[{"categories":null,"contents":"Introduction A number of basic Cadence tutorial videos are available on YouTube.\nGetting Started   In Windows, find and open the application Capture CIS (see Cadence Schematic Tutorials)\n  Create and name a new project and add existing part libraries (see Creating a New Project in Cadence)\n  Add parts to your schematic. First, check to see if the parts you need already exist in a library. For example, schematic symbols for header pins (which are useful for connecting to components external to your custom printed circuit board, like batteries, PSoC® boards, and sensors, see Figure 1) can be found by searching for \u0026ldquo;Header\u0026rdquo; in the Place Part dialog box (see Figure 2)\n      Figure 1: Header         Figure 2: Place Part dialog box     Create a custom library to store custom schematic symbols for your design that are not included in the built-in libraries (very common), and add it to your project (see Creating a Custom Library in Cadence)\n  Create and save custom schematic symbols in your custom library. If you later need to edit a custom schematic symbol, make sure to replace the edited symbol in the cache (see Creating a Custom Schematic Symbol in Cadence)\n  Create printed circuit board footprints for all components on your printed circuit board\n  For electronic devices with DIP/SOIC/PLCC/QFP/PGA/SIP/ZIP packages (which are typically integrated circuits and plug-in modules with evenly-spaced pins), it is easiest to use the \u0026ldquo;Package Symbol Wizard\u0026rdquo; (See Creating a Custom PCB Footprint using Package Designer in Cadence)\n  For all other components, create custom footprints manually (see Creating a Custom PCB Footprint Manually in Cadence)\n  Create custom padstacks for the pads of each custom footprint (See Creating a Custom Padstack in Cadence)\n  Link all footprints to schematic symbols in Design Entry CIS by updating the library search path (see Changing the Library Search Path in Cadence Design Entry CIS)\n  Link all footprints to schematic symbols in PCB Editor by updating the library search path (see Changing the Library Search Path in Cadence PCB Editor)\n  Transfer the schematic to PCB Editor for the PCB layout and design (see Transferring a Cadence Schematic to PCB Editor)\n  Prepare and submit your PCB Layout for fabrication\n  Based on a tutorial by Cody Van Cleve\n","permalink":"https://embedded-systems-design.github.io/getting-started-with-cadence/","tags":["tutorial","cadence"],"title":"Getting Started with Cadence"},{"categories":null,"contents":"Installation System Requirements  PC: Windows 10 (64-bit) Professional, Windows Server 2012 and 2012 R2, Windows Server 2016, or greater (Hardware and Software Requirements). Note that Cadence does not support Windows 10 Starter nor Home Basic. Mac: Windows 7, 8, 8.1, 10 or greater running on Boot Camp or Parallels  Before Installing Cadence has been known to change environment variables used by other software. One of those is the HOME variable. If left unset, it will add this variable and define it as C:\\Cadence\\SPB_Data-Silent\\\nIt is therefore recommended to set that variable so that your other software remains working\nOpen up the file explorer (win+e)\nNavigate to \u0026ldquo;This PC\u0026rdquo;, right click and select properties.\nOn the left hand side select \u0026ldquo;advanced system settings\u0026ndash;\u0026gt;environment variables\u0026rdquo;\nIn the top window, look for the HOME environment variable. If it exists, you leave it as is\n If it doesn\u0026rsquo;t exist, select \u0026ldquo;new\u0026rdquo; In variable name, type HOME (all caps) In the value field, enter the path to your user directory C:\\Users\\MYUSERNAME. You can browse to the right directory  Save your changes.\nInstructions  Go to Canvas and find the announcement from your professor on Cadence installation. Download Cadence17.4.zip from the link provided. The installer is over 8.2 GB so make sure you are using high-speed Internet at home or on campus. Double-click the Cadence17.4.zip file to decompress the installer. You can delete the ZIP file after it is decompressed. Open the Cadence17.4 folder and double-click InstallTPSCadence.vbs to initiate the installation. There is no status bar or completion message during the installation process, which may take up to an hour. You will know it is complete when the installer icon disappears from the task bar. You can delete the installation folder after it has finished installation. Download the HotFix from the link provided in the Canvas announcement. The HotFix is over 6.4 GB so make sure you are using high-speed Internet at home or on campus. Decompress the Hotfix ZIP file. You can delete the ZIP file after it is decompressed. Launch setup.exe to initiate the HotFix installation. The HotFix has a status bar indicating when it is complete. Confirm that Cadence and the HotFix have installed correctly by launching Start \u0026gt; Cadence PCB 17.4-2019 \u0026gt; Capture CIS 17.4. This program allows you to model electronic schematics. The version number should be 17.4-2019 S020. Follow the Configuring Cadence instructions to configure and optimize Cadence for the ASU Polytechnic engineering programs.  Using Cadence On Campus  Cadence is available in the following computer labs at ASU: PRLTA 103, PRLTA 109, and PRLTA 117. You can also use Cadence on campus when connected to the ASU wifi network.  Using Cadence in On Campus Housing or Off Campus In order to use Cadence on your computer either in on-campus housing or off campus, you must have two-factor authentication enabled on your account (instructions) and connect to the ASU VPN prior to launching Cadence. This allows Cadence to connect to the ASU license server.\nMost Common Errors Q: What if I don\u0026rsquo;t have enough hard drive space to install Cadence on my computer?\nA:\n Free space on your hard drive Use an external hard drive on your computer to move other files off of C:\\ to make space for Cadence. Cadence will only run properly off of C:\\. Use Cadence on the computers in PRLTA 103/109/117  Q: During installation, I get an error about a potential Trojan horse. What should I do?\nA: Right click on the installer and click \u0026ldquo;Run as administrator\u0026rdquo;.\nQ: During installation, the installer fails because it cannot find a file. What should I do?\nA: Make sure to unzip the Cadence17.4.zip file to a folder before running Install_Cadence17.4.exe. Also make sure that there are no spaces in the folder path that in which the installer is located.\n","permalink":"https://embedded-systems-design.github.io/installing-cadence/","tags":["asu","software","cadence","pcb"],"title":"Installing Cadence"},{"categories":null,"contents":"What is Bluetooth Low Energy?  Intro to Bluetooth Low Energy video from Cypress Bluetooth Low Energy datasheets from Cypress Developing Bluetooth Smart Applications for Android tutorial from NewCircle Training provides a high-level explanation of how Bluetooth Low Energy works.  Where can I find examples of PSoC 4 BLE projects?  100 Projects in 100 Days with PSoC® 4 BLE from Cypress Project #020: UART to BLE Bridge from Cypress Configuring a Find Me Profile with BLE video from Cypress Finishing the Find Me Application with Firmware video from Cypress Adding Battery Level Service and Testing with CySmart video from Cypress Using CapSense with Bluetooth Low Energy video from Cypress Extending Battery Life with PSoC Low Energy Modes video from Cypress Forum posts on Cypress.com  How to send data from the PSoC BLE module to the CySmart app    How do I create a custom BLE profile?  Creating a BLE Custom Profile app note from Cypress  How do I create an Android app that is BLE-enabled?  Developing Bluetooth Smart Applications for Android tutorial from NewCircle Training provides a high-level explanation of how Bluetooth Low Energy works. BLE App Development in JavaScript Explained - Bluetooth Low Energy in Action article from EVO Things provides an example that is similar to the CySmart app Developing Bluetooth Smart Applications for Android Tutorial video from NewCircle Training Bluetooth Low Energy API guide from Google Forum posts on Cypress.com  Developing an Android app for PSoC BLE Create Android app and interface it with PSoC 4 BLE    Where can I find examples of custom Android apps that are BLE-enabled?  Project #028: BLE Proximity Profile from Cypress Project #031: BLE Pressure Sensor (BMP180) from Cypress Project #037: BLE Billboard from Cypress android-BluetoothLEGatt example code from Google CySmart App example from Cypress  How do I create an iOS app that is BLE-enabled? Beginner\u0026rsquo;s Guide to iOS Development from HONGKIAT\n The Interface - Part I Building Your First App - Part II  Where can I find examples of custom iOS apps that are BLE-enabled?  Project #022: Apple Notification Center Service (ANCS) Profile from Cypress CySmart App example from Cypress  How do I communicate from PSoC® 4 BLE to PSoC® 4 BLE?  1-way and 2-way PSoC® BLE communication examples from Harsha Kadekar  Video of 2-way communication   PSoC® BLE Custom Server example from Jon Isaiah  BLE Peripheral Server, which updates an example array of 2 floats and responds to read requests from the client BLE Central Client, which reads data from the server and prints it to the serial port   BLE Button Demo from Jonathan Bush  If you find additional resources that are helpful, please send them to Dr. Jordan\n","permalink":"https://embedded-systems-design.github.io/about-bluetooth-communication-abc/","tags":["bluetooth","cypress","microcontroller"],"title":"About Bluetooth Communication (ABC)"},{"categories":null,"contents":"Introduction Text is important on PCB layouts to identify the designers, project, version, components, etc. Typically, text can be placed on a silkscreen layer that sits on top of the copper. However, our manufacturing process in PRLTA 109 only supports text that is milled on the TOP COPPER or BOTTOM COPPER layers.\nNote: It is required that all PCB designs have your name, course, and team number so that the Peralta Engineering Studios staff can distinguish your board from others.\nHow do you create millable text in Cadence PCB Editor?   Open your design in PCB Editor\n  Choose Setup \u0026gt; Design Parameters\u0026hellip; and click the Text tab. Click the \u0026hellip; button next to Setup text sizes (see Figure 1). The Text Setup window will open (see Figure 2).\n        Figure 1: Design Parameter Editor Text tab         Figure 2: Text Setup window    In the Text Setup window, change the Photo Width for Text Blk 4 to 10.00 (see Figure 2). The 4th text value is big enough to read but not overly large. Click OK and OK to return to your design.\n  Click the abc+ button in the toolbar (see Figure 3) and click on the Options tab on the right hand of the screen (see Figure 4).\n        Figure 3: Add Text button         Figure 4: Options tab configured for the 4th text block    Configure the options to make sure the Top or Bottom layer is selected, and that the Text block is set to 4 (or whichever one that you changed in step 2) (see Figure 4).\n  Click anywhere on the board and type the text that you wish to add (see example, Figure 5).\n        Figure 5: Example text on a layout   Based on a tutorial by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/adding-text-to-a-layout-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Adding Text to a Layout in Cadence PCB Editor"},{"categories":null,"contents":"What is an escape room? An escape room is a real-life adventure game where you pay to be locked in a room filled with puzzles and given a limited time (usually 60 minutes) to solve the puzzles with your team in order to escape the room. There are also virtual video game escape rooms.\n Real-life room escape on Wikipedia Locked In: Behind the Scenes of the Escape Room Craze from Make Magazine \u0026lsquo;Escape Rooms\u0026rsquo; Challenge Players To Solve Puzzles To Get Out story from NPR In Escape Rooms, Video Games Meet Real Life article from the New York Times  Who designs escape rooms?  Blacklight Attractions Game Masters Live Escape Rooms The Ha Ha Shop (lots of great ideas for puzzle items) Escape Game Design Race to Escape TV show on the Science Channel  What are best practices for designing escape rooms?  How to Design an Escape Room article from Fast Company Being a Room Escape Puzzle Master for a Night from the Room Escape Artist blog Tips and trends in making escape games from Adam Clare Designing a real-life Escape the Room experience from Gamasutra What are any puzzle ideas for real escape rooms? from Quora  Where can I find escape rooms?  Epic Escape Game (Phoenix) Escape Adventure AZ (Mesa) Escape the Room AZ (Scottsdale) Key Quest Escape Room (Phoenix) PanIQ Escape Room (Phoenix) Phoenix Escape Room (North Phoenix, Gilbert) Trapped in a Room With a Zombie (Phoenix) Escape Room Directory (Worldwide) Escape Games from Addicting Games  ","permalink":"https://embedded-systems-design.github.io/all-about-escape-rooms/","tags":["technology"],"title":"All About Escape Rooms"},{"categories":null,"contents":"What are serial protocols? I2C, SPI, and UART are three of the most common protocols for serial data transmission. An overview of these protocols can be found here:\n UART - I2C - SPI - Serial communications #001 video from Electronoobs Introduction to Interfaces video from element14  I2C Communication  I2C Communication, part 1: Introduction video I2C Communication, part 2: Microchip Code Configurator video MPLAB XC8 for Beginners Tutorial 38: Interfacing the TC74 I2C Temperature Sensor video (TC74 Datasheet)  SPI Communication  SPI Communication, part 1: Introduction video SPI Communication, part 2: Configuration with Microchip Code Configurator video SPI and Shift Register Tutorial using the Microchip Curiosity board by Qinchen Zha  UART Communication  MPLAB XC8 for Beginners Tutorial 19: EUSART with MPLAB Code Configurator video UART PIC to Argon tutorial by Mykol Reklaitis  ","permalink":"https://embedded-systems-design.github.io/all-about-serial/","tags":["tutorial","uart","microcontroller","interfacing"],"title":"All About Serial"},{"categories":null,"contents":"What is a smart home? A smart home links together home comfort, entertainment, appliances, thermostats, lighting, and other electronic devices in a home together such that they can be controlled by voice, gesture, computer, or phone. Apple, Amazon, and other companies are trying to bring myriad smart home products from different manufacturers together through the Echo and HomeKit, respectively.\n What is a smart home? from Smart Home USA How Smart Homes Work from HowStuffWorks.com How your home will know what you need before you do from CES 2016 The Smartest Connected Home Products at CES 2016 from PC Magazine  Where can I find databases of smart home devices?  Smart Home Database from smarthomedb.com Connected Home devices cataloged by Postscapes OpenHomeAutomation.net Smart Irrigation Controllers on the market from Postscapes Ari jay comet home automation blog  Where can I find manufacturers of smart home devices?  Green Bean Maker Module for GE Appliances Harmony TV Remotes from Logitech Nest - makes thermostats, smoke + CO2 alarms, and wifi security cameras  Products that work with Nest   OpenSprinkler - open-source, web-based sprinkler controller Phillips Hue lighting products Samsung SmartThings appliances  ","permalink":"https://embedded-systems-design.github.io/all-about-smart-homes/","tags":null,"title":"All About Smart Homes"},{"categories":null,"contents":"Altering Trace Widths\n      Figure 1   Sometimes you need to globally change trace widths in your board after designing it. Instead of deleting them all and starting from scratch, you can select all the traces at once using the following steps:\n Make sure you are in general edit mode by clicking on the icon highlighted in the top row of icons:        Figure 2   Right click in the design workspace, selecting \u0026ldquo;super filter \u0026ndash;\u0026gt; Connect Line\u0026rdquo;        Figure 3   Drag a box around your entire design, selecting all connect lines        Figure 4    4. Right click in the workspace and select \u0026ldquo;change width\u0026rdquo; in the resulting menu.\n      Figure 5         Figure 6   Hit enter and see the result:        Figure 7   Turn your super filter back off:        Figure 8   ","permalink":"https://embedded-systems-design.github.io/altering-trace-widths/","tags":["ecad","cadence"],"title":"Altering Trace Widths"},{"categories":null,"contents":"How are PCBs fabricated at ASU? The following video shows our PCB manufacturing process.\n Video by Peralta Engineering Studios\nHow do you prepare and submit Cadence PCB design for fabrication? Label the PCB design with your name, course, and team number (required for manufacturing)\nRun a Design Rules Check in Cadence PCB Editor and fix any errors identified\nExport Gerber files from Cadence PCB Editor\nExport solder mask layers from Cadence PCB Editor (optional, final design only)\nRun a Design for Manufacturing check with DFM Now and fix any errors identified\nPrint a 1:1 (100%)-sized copy of your PCB design and physically place all components on the printout to confirm that the footprints are correct. This is particularly important for ICs, connectors, and daughterboards.\nShow your successful DFM check results to a TA or professor so that they can document approval of your PCB design for fabrication. You must receive approval from a TA or the professor before your PCB will be fabricated.\nZip all of your PCB files together in one ZIP folder with filename YourLastName.YourFirstName.zip\n Top.art Bottom.art Outline.art Drill.drl SolderMaskTop.art SolderMaskBottom.art  Submit your files at fultonapps.asu.edu/polylab. Include the following information in the request details:\n Professor and class Quantity of boards (only 1 allowed per design; exceptions allowed with professor approval) Solder mask needed? (only allowed for final board designs) Rub out area needed? If yes, specify location. (Pro tip: Rub out copper underneath antennas) Copper thickness (0.5, 1, or 2 oz/ft^2)  You will receive an emails from the Poly Lab Request Notification System indicating the acceptance of the job and when your PCB is ready to be picked up. If you are interested in learning about and being a part of the fabrication process with the LPKF mill, please see one of the staff members in PRLTA 109. If you have any questions, please contact Peralta.Labs@asu.edu\nAfter receiving your PCB, make sure to do a continuity test on all traces and vias before adding parts and soldering.\n","permalink":"https://embedded-systems-design.github.io/asu-pcb-fabrication-process/","tags":["asu","cadence","pcb"],"title":"ASU PCB Fabrication Process"},{"categories":null,"contents":"Please see this link\n","permalink":"https://embedded-systems-design.github.io/asu-pcb-mill-specs/","tags":null,"title":"ASU PCB Mill Specs"},{"categories":null,"contents":"A bypass capacitor (aka \u0026ldquo;filter cap\u0026rdquo;) is a small capacitor that dampens electrical noise moving toward an IC. Electrical noise can cause circuit malfunctions. Unless otherwise specified in the data sheet of an IC, a 0.1 ÂµF non-polarized ceramic capacitor usually makes a good bypass capacitor.\n http://www.learningaboutelectronics.com/Articles/What-is-a-bypass-capacitor.html https://en.wikipedia.org/wiki/Decoupling_capacitor https://www.microcontrollertips.com/why-so-many-bypass-capacitors-faq/ (dead)The Seattle Robotics Society posted an excellent article describing bypass capacitors in more detail.  ","permalink":"https://embedded-systems-design.github.io/bypass-capacitor-basics/","tags":["components","filter","noise","capacitors","ics"],"title":"Bypass capacitor basics"},{"categories":null,"contents":"Capture CIS Manuals  OrCAD Capture Quick Reference OrCAD Capture User\u0026rsquo;s Guide OrCAD Capture Reference Guide  ","permalink":"https://embedded-systems-design.github.io/cadence-manuals/","tags":["ecad","cadence"],"title":"Cadence Manuals"},{"categories":null,"contents":"There are a number of tutorials available for creating schematics in Cadence. The best tutorials are in videos, as the manuals and online help are poor.\nWhat is a schematic? A schematic is an electronic CAD diagram that shows the components used in a circuit and the interconnections among the components. A schematic includes a symbology described in the table of Electrical Symbols \u0026amp; Electronic Symbols. An example schematic created by Dr. Jordan is available here.\nWhat is Cadence Schematic Capture? Cadence Schematic Capture is an electronic CAD (ECAD) program that captures the components that go into a circuit and the interconnections between the component. This information will later be passed to the PCB Editor by way of a netlist in order to create a PCB. Read the short Cadence Schematic Capture Datasheet for an overview of the software and its features.\nHow do I launch Cadence to create a schematic? In Windows, launch \u0026ldquo;Design Entry CIS\u0026rdquo;.\nThis program is also called \u0026ldquo;Allegro Design Entry CIS\u0026rdquo; and \u0026ldquo;OrCAD Capture CIS\u0026rdquo;. These programs are all equivalent.\nHow do I create a schematic?  ** WARNING:** Do NOT use spaces in naming your projects. Spaces will prevent Cadence from working correctly.\n Quick Guide: Creating a New Project in Cadence Cadence Schematics Settings and Setup video from Casey Petersen Part 1: Getting Started video from iEngineered OrCAD Basic Tutorial video from Lauren Spradlin  If you plan to import any schematic symbols from the web (see below) or create custom schematic symbols (see below), you must create a custom symbol library in which to store them.\n Quick Guide: Creating a Custom Library in Cadence Part 7: Working with Part Libraries video from iEngineered.  How do I place parts on a schematic?  Placing parts, editing schematics, editing parts, and connecting parts video from Casey Petersen Part 2: Drawing Schematics video from iEngineered  How do I edit parts and annotations on a schematic?  Part 3: Editing the Schematic Design video from iEngineered Part 4: Editing Text and Graphics video from iEngineered  Where do I find parts? The first place to look for parts is in the built-in libraries, which have hundreds of thousands of parts but will likely not have every part that you need.\n Searching the built-in Cadence libraries video from parsysEDA  You can also search for parts that others have made using the ActiveParts Internet Component Assistant tool. Any parts that you add using ActiveParts will need to be stored in a custom parts library (see How do I create a schematic? above).\n Using the ActiveParts Internet Component Assistant tutorial from Cadence  How do I create a custom part (schematic symbol)? If a part is not available through one of the sources above, then you must create both a custom schematic symbol and a custom PCB footprint (the physical layout of copper on a printed circuit board to which the component is soldered). Creating a custom PCB footprint is covered in another blog entry on creating PCB layouts.\n Quick Guide: Creating a Custom Schematic Symbol Creating new parts and preparing for footprints video from Casey Petersen Creating custom schematic symbols video from parsysEDA Making and Editing Capture Parts - Chapter 7 in the Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner  How do I show the power and ground pins on a schematic component? Cadence sometimes hides the power and ground pins on components (particularly ICs and custom components). Components don\u0026rsquo;t automatically have power and ground connected to them. In order to show the power and ground pins, do the following:\n Open your project in Allegro Design Entry CIS Open the schematic page Right-click on the component and choose \u0026ldquo;Edit Properties\u0026hellip;\u0026rdquo; Make sure the \u0026ldquo;Power Pins Visible\u0026rdquo; property checkbox is checked Repeat for each component that has power and ground pins  How do I prepare my schematic for transfer to a PCB layout? STEP 1: Assign footprints to all components.\n Quick Guide: Transferring a Schematic to PCB Editor OrCAD Tutorial - Section 8.3 (older version of software)  STEP 2: Check the schematic for errors. Schematic capture programs have a design rules check (DRC) option that checks for inconsistencies in schematics. DRCs will not find all errors (for instance, choosing the wrong part or function).\n Quick Guide: Transferring a Schematic to PCB Editor OrCAD Tutorial - Section 2.4 (older version of software) Part 10: Design Validation and Processing video from iEngineered  STEP 3: Convert the schematic into a netlist (a file that lists all of the interconnections in a schematic) that will then be loaded into the PCB layout program. Loading a netlist into a PCB layout program is covered on the Transferring a Schematic to PCB Editor page.\n Part 11: Intercommunication tools, Netlist Creation and Back Annotation video from iEngineered OrCAD Tutorial - Section 2.6 (older version of software)  How do I configure Capture to find my custom footprints? A common error message is that Cadence cannot find your custom footprints. The footprint search path must be updated in order to correct this error.\n Changing the Library Search Path in Cadence Design Entry CIS tutorial  How do I configure project and program settings?  Part 5: Using Project Manager video from iEngineered Part 6: Setting Preferences and Backup video from iEngineered  How do I organize a large design? Cadence supports two major ways to organize large designs: splitting them over multiple pages and using hierarchical blocks. Either method is appropriate for use in projects, and often companies will specify the way that official schematics should be organized.\nA design can span over multiple pages as long as the necessary signal nets are connected. Nets can be connected across pages using off-page connectors with the same name on each page.\n Part 8: Off-Page Connectors and Net Connectivity from iEngineered  Designs can also be organized to use hierarchical blocks, which are similar to blocks on a block diagram. Descending into a hierarchical block will open a sub-schematic with the circuitry that is part of the block (e.g., the power supply).\n Part 9: Creating Hierarchical Blocks from iEngineered  Working With Part Libraries  How to create and add a new custom library to your project: \u0026lt;working-with-libraries.html\u0026gt; How to update your design cache if you update a part in your library: \u0026lt;updating-part-in-your-library.html\u0026gt;  ","permalink":"https://embedded-systems-design.github.io/cadence-schematic-tutorials/","tags":["cadence"],"title":"Cadence schematic tutorials"},{"categories":null,"contents":"This page lists tutorials for doing circuit simulations in Cadence.\nGetting Started  Cadence Circuit Simulations (the basics) video from Casey Petersen  iEngineered Series  Part 12: Altering Schematic for Simulation Purpose video from iEngineered Part 13: PSpice Biaspoint Analysis video from iEngineered Part 14: PSpice Transient Analysis video from iEngineered Part 15: Basic DC Sweep video from iEngineered Part 16: Basic AC Sweep video from iEngineered Part 17: Param Tool video from iEngineered Part 18: Charged Capacitor \u0026amp; Inductor video from iEngineered  Examples  Cadence Linear Voltage Regulator Simulation video from Casey Petersen Cadence Simulation of (2) Low-Pass Filters video from Casey Petersen  ","permalink":"https://embedded-systems-design.github.io/cadence-simulation-tutorials/","tags":["simulation","cadence"],"title":"Cadence simulation tutorials"},{"categories":null,"contents":"Introduction This Cadence walkthrough goes through the process of creating a PSoC® 4 BLE module schematic symbol and PCB footprint.\nStep 1: Find part information in datasheets  Download the PSoC® 4 BLE module data sheet from the Cypress website. You will need the pin names in Step 2. Download the PSoC® 4 BLE module mechanical drawing. You will need the dimensions in Step 3.  Step 2: Create the custom schematic symbol   In Windows, open \u0026ldquo;Capture CIS\u0026rdquo;\n  Create a custom library\n  Right-click on your custom library and choose \u0026ldquo;New Part\u0026rdquo; (see Figure 1). The New Part Properties window will appear (see Figure 2).\n      Figure 1: Creating a new part in your custom library         Figure 2: New Part Properties window     In the New Part Properties window (see Figure 2), name the part and click OK. The new part creation window will appear (see Figure 3).\n        Figure 3: New part creation window   Click the \u0026ldquo;Place pin array\u0026rdquo; button in the toolbar (see Figure 4). The \u0026ldquo;Place Pin Array\u0026rdquo; configuration window will appear (see Figure 5).        Figure 4: Place pin array tool         Figure 5: Place Pin Array configuration window   Complete the configuration as shown in Figure 5 and click OK.  Pro Tip: Instead of configuring Place Pin Array as shown in Figure 5, repeat this step twice: Once for the first 20 pins, and a second time for the remaining 24 pins. This will eliminate the need to move pins from one side of the symbol to the other.\n Place the pins on the symbol. You may need to adjust the size of the dotted rectangle in.\n  Click the \u0026ldquo;Place rectangle\u0026rdquo; button in the toolbar (See Figure 6) and add a rectangle box along the dotted lines inside the pins (see Figure 7).\n        Figure 6: Place rectangle tool         Figure 7: Schematic symbol with pins and rectangle   Double-click on each pin individually to show the Pin Properties window (see Figure 8). Configure each pin according to the pin names in the PSoC® 4 BLE module datasheet. Table 1 shows the basic pin types for each of the pins on the PSoC® 4 BLE module.        Figure 8: Pin Properties window      Pin Name Pin Type     All GPIO pins Bidirectional   VDDD, VDDA, VDDR, and all GNDs Power   XRES Input   VREF Output    Table 1: Pin types for the PSoC® 4 BLE module\nThe final custom schematic symbol is shown in Figure 9        Figure 9: Final custom schematic symbol for the PSoC® 4 BLE module    Save the symbol to your library by right-clicking on the symbol editor tab and choose \u0026ldquo;Save\u0026rdquo; (see Figure 10).        Figure 10: Saving the schematic symbol   You have successfully created a custom schematic symbol for the PSoC® 4 BLE module that you can now use in your schematic. You can continue creating the remainder of your schematic now and make the PCB footprint later, or continue with this tutorial to create the footprint now.  Step 3: Create the custom PCB padstack The custom PCB padstack definition includes mechanical dimensions for the copper pads and the hole to be drilled in the board for each pin in the custom PCB footprint that you will design in Step 4.\n  In Windows, open \u0026ldquo;Padstack Editor\u0026rdquo;\n  Choose File \u0026gt; New\u0026hellip; The New Padstack window appears (see Figure 11).\n        Figure 11: New Padstack window    In the \u0026ldquo;New Padstack\u0026rdquo; window (see Figure 11), click \u0026ldquo;Browse\u0026hellip;\u0026rdquo; and select the location of your custom symbols folder (e.g., Desktop/Cadence/symbols)\n  In the \u0026ldquo;New Padstack\u0026rdquo; window (see Figure 11), enter a pad stack name of pad70cir40d_AB (where AB are your initials) and click OK.\n  On the \u0026ldquo;Start\u0026rdquo; tab, configure the parameters to match Figure 12 below.\n        Figure 12: Start tab configuration   Click on the \u0026ldquo;Drill\u0026rdquo; tab and configure the parameters to match Figure 13 below.        Figure 13: Drill tab configuration   Do not change any settings on the \u0026ldquo;Secondary Drill\u0026rdquo; tab. Click on the \u0026ldquo;Drill Symbol\u0026rdquo; tab and configure the parameters to match Figure 14 below.        Figure 14: Drill Symbol tab configuration   Do not change any settings on the \u0026ldquo;Drill Offset\u0026rdquo; tab. Click on the \u0026ldquo;Design Layers\u0026rdquo; tab and configure the parameters to match Figure 15 below.        Figure 15: Design Layers tab configuration   Click on the \u0026ldquo;Mask Layers\u0026rdquo; tab and configure the parameters to match Figure 16 below.        Figure 16: Mask Layers tab configuration    Do not change any settings on the \u0026ldquo;Options\u0026rdquo; tab. Click on the \u0026ldquo;Summary\u0026rdquo; tab and confirm that your padstack matches this example.\n  Choose File \u0026gt; Save and close \u0026ldquo;Padstack Editor\u0026rdquo;\n  Step 4: Create the custom PCB footprint   In Windows, open \u0026ldquo;PCB Editor\u0026rdquo;\n  Choose File \u0026gt; New\u0026hellip; The \u0026ldquo;New Drawing\u0026rdquo; window appears (see Figure 17).\n        Figure 17: New Drawing window    In the \u0026ldquo;New Drawing\u0026rdquo; window (see Figure 17), click \u0026ldquo;Browse\u0026hellip;\u0026rdquo; and select the location of your custom symbols folder (e.g., Desktop/Cadence/symbols). Then, enter a drawing name of your choice. Do not use spaces in the drawing name. Choose a \u0026ldquo;Drawing Type\u0026rdquo; of \u0026ldquo;Package symbol\u0026rdquo; and click OK to return to the empty drawing window.\n  Next, you need to create the package geometry for the footprint. The package geometry is a visual representation of the physical dimensions of the part. Click the \u0026ldquo;Shape Add Rect\u0026rdquo; button in the toolbar (see Figure 18) and click on the Options tab on the right hand side of the screen. Configure the settings in the Options tab to match those shown in Figure 19. The dimensions of the rectangle and the rounded corners came from the PSoC® 4 BLE mechanical drawing.\n        Figure 18: Shape Add Rect tool         Figure 19: Options tab for the Shape Add Rect tool   Click in the Command window at the bottom of the screen and enter the coordinates to place the package geometry: x 0 1800. The rounded rectangle package geometry will appear with the lower left corner of the window at (0,0) and the upper right corner at (1100,1800) (see Figure 20).        Figure 20: Package geometry and Command window   Next, lay out the pads for the left side of the PSoC® module. Choose Layout \u0026gt; Pins and click on the Options tab on the right hand side of the screen. Configure the settings in the Options tab to match those shown in Figure 18.        Figure 18: Layout \u0026amp;gt; Pins Options tab configured for the left header   Click in the Command window at the bottom of the screen and enter the coordinates to place the left header: x 180 367 (see Figure 19). This will place pin 1 at (180, 367) on the lower right hand corner of the left header, pin 2 on the lower left hand corner of the header, pin 19 in the upper right hand corner of the header, and pin 20 in the upper left hand corner of the header.        Figure 19: Left header placed using the command prompt   Click the Options tab again and configure it to match the settings shown in Figure 20. Note the updated values for the Y Qty, X and Y Order, and Pin #.        Figure 20: Layout \u0026amp;gt; Pins Options tab configured for the right header   Click in the Command window at the bottom of the screen and enter the coordinates to place the right header: x 920 1267 (see Figure 21). This will place pin 21 at (920, 1267) in the upper left hand corner of the right header, pin 22 in the upper right hand corner of the header, pin 43 in the lower left hand corner of the header, and pin 44 in the lower right hand corner of the header.        Figure 21: Right hand header placed using the command prompt   Next, you need to give the footprint a reference designator that matches the reference designator in your custom schematic symbol (typically U). Click the \u0026ldquo;Label Refdes\u0026rdquo; button in the toolbar (see Figure 22) and click on the Options tab on the right hand side of the screen. Configure the settings in the Options tab to match those shown in Figure 23.        Figure 22: Label Refdes tool         Figure 23: Options tab for the Label Refdes tool   Click on or around the part and type U* (see Figure 24). The * will be replaced with the part number assigned in the schematic (e.g., U1).        Figure 24: Footprint with reference designator   Close PCB Editor and save changes  Step 5: Link the Custom PCB Footprint to the Custom Schematic Symbol   Open a schematic that uses the custom symbol in Capture CIS.\n  In your schematic, double-click on the placed custom symbol. The Property Editor window will open (see Figure 25).\n        Figure 25: Property Editor window for PSoC® 4 BLE module    Type the filename for the footprint into the \u0026ldquo;PCB Footprint\u0026rdquo; field and close the Property Editor window.\n  To confirm that the footprint was properly linked to the custom schematic symbol, right-click on the part in the schematic and select \u0026ldquo;Show Footprint\u0026rdquo;. The \u0026ldquo;Footprint Viewer\u0026rdquo; window will open and show the footprint (see Figure 26).\n        Figure 26: Footprint successfully linked to the custom schematic symbol   If the footprint does not show up, confirm that the name of the footprint in the Property Editor matches the filename of the footprint, and that the symbols folder is configured correctly in Cadence.\nThe following video shows the process described in this tutorial from start to finish. Note that the Cadence interface has changed for padstack editing since the time the video was created.\n Based on a video and tutorial created by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/cadence-walkthrough-psoc-4-ble-module/","tags":["cypress","cadence","pcb"],"title":"Cadence Walkthrough: PSoC 4 BLE Module"},{"categories":null,"contents":"When calculating the resistance value for your current limiting resistor there are a few variables to consider. First, what is the supply voltage that will be applied to the LED? Second, what is the forward voltage of the LED you chose? Third, what is the amount of current you want to flow through your LED? By answering these questions, you will be able to calculate the value for the resistor. To begin the process, you must know what supply voltage you will be giving the LED. Whether its 12V, 5V, or 3.3V this value is important to the calculation of the resistance. The next piece of information that is needed is the forward voltage for the particular LED that is being used. To find this information you must reference the datasheet for the part. The forward voltage can be found in the Electrical Characteristics section of the datasheet. Shown below is an image of the forward voltage for an Osram LED:\n      Figure   As we can see from the image, the maximum forward voltage for the LED is 3.2V. The next piece of information that is needed is the current that needs to flow through the LED. To find this information, the datasheet must once again be referenced. Typically, this information is shown in the form of a graph depicting forward current vs. luminous intensity. Shown below is an example of a pair of graphs from the same Osram LED as the before:\n      Figure   These graphs show useful information that is needed to calculate our resistor value. The graph on the right shows the relative luminous flux vs. forward current. The first step is to choose the brightness you want for your application. For this example, we will use 1.0 for our value. From the graph, we can gather that at 1.0 relative intensity, a 350mA forward current is needed. Now the information from the graph on the left must be referenced. From the graph, we can see that for a forward current of 350mA, the LED will have a forward voltage of 2.8V. After finding that, we have all the information that is needed to calculate the value for the current limiting resistor. The equation is shown below:\n$$R_$$\nWhere $R_$ is the forward current in Amps. For the example that was chosen, the equation would look like this:\n$$R_$$\nFrom this equation, we can calculate the resistance as 6.28Ω (assuming a supply voltage of 5V). While most LEDs will not require this amount of current in order to operate (most datasheets say 20mA) it is still able to show how to find and use the information in the datasheet to find the current limiting resistor value.\n","permalink":"https://embedded-systems-design.github.io/calculating-current-limiting-resistor-value-for-leds/","tags":null,"title":"Calculating Current Limiting Resistor Value for LEDs"},{"categories":null,"contents":"Why would you need to change the hole diameter? The default diameter of holes in Cadence is 0.3 mm. This is too small for most components to fit through, as well as too small for proper through-plating of vias. According to the Peralta PCB Mill specifications, hole diameters should be at least 0.5 mm (19.7 mil). Therefore, the following settings are recommended:\n Drill diameter \u0026gt; 20 mil Pad diameter = drill diameter + (at least) 30 mil Soldermask diameter = pad diameter + 20 mil  Example: If the drill diameter = 31.5 mil, the pad diameter = 61.5 mil and the solder mask = 81.5 mil.\nHow do you change the hole diameter in PCB Editor?  In PCB Editor, open your design and right-click on a via or hole and choose \u0026ldquo;Replace padstack\u0026rdquo;. If you want to only change the selected via or hole, choose \u0026ldquo;Selected instance(s)\u0026rdquo;. If you want to change all vias or holes on your board, choose \u0026ldquo;All instances\u0026rdquo; (see Figure 1). The \u0026ldquo;Select a padstack\u0026rdquo; dialog box appears (see Figure 2).        Figure 1: Replace pad stack contextual menu   In the \u0026ldquo;Select a padstack\u0026rdquo; dialog box, select Pad62cir32d (which has a 62 mil pad and a 32 mil hole) or another pad with a hole size of at least 20 mil and click OK (see Figure 2). While the hole size is reasonable for many components, the pad size is still too small.        Figure 2: Select a padstack dialog box   Or you can modify the existing Padstack in your design. Right-click again on a via or hole and choose \u0026ldquo;Modify design padstack\u0026rdquo;. If you want to only change the selected via or hole, choose \u0026ldquo;Selected instance(s)\u0026rdquo;. If you want to change all vias or holes on your board, choose \u0026ldquo;All instances\u0026rdquo; (see Figure 3). The \u0026ldquo;Padstack Editor\u0026rdquo; dialog box appears (see Figure 4).        Figure 3: Modify design pad stack contextual menu   In the \u0026ldquo;Padstack Editor\u0026rdquo; dialog box, increase the \u0026ldquo;Regular Pad\u0026rdquo; diameters to 60.0 or greater on the TOP and BOTTOM layers (see Figure 4), and change the Mask Layers diameters to 80.0 (see Figure 5).        Figure 4: Padstack Editor dialog box         Figure 5: Padstack Editor dialog box - Mask Layers tab   In the \u0026ldquo;Padstack Designer\u0026rdquo; dialog box, choose File \u0026gt; Update to Design and Exit. You have successfully increased the pad size of the via or hole.  Based on a tutorial by Seana O\u0026rsquo;Reilly and updated by Qinchen Zha\n","permalink":"https://embedded-systems-design.github.io/changing-a-hole-diameter-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Changing a Hole Diameter in Cadence PCB Editor"},{"categories":null,"contents":"Introduction A via is an electrical interconnection that connects one layer of a PCB to another layer of a PCB. Vias are typically used when two wires need to cross on the same side of a PCB design, but cannot without continuing the trace on a different layer. It is best to minimize the use of vias for boards being manufactured in Peralta to maximize reliability, but sometimes they are necessary in order to complete a design. If you do need a via, the default via padstack in Cadence is too small for the LPKF ProtoMat S63 PCB Mill that we use to manufacture PCBs in PRLTA 109. There are two ways to address this issue:\n Place all of your vias, and then replace them with the provided asuvia.pad padstack (provided in the Cadence installation instructions you followed earlier in the semester). Change the size of the drill and pad on the Cadence default via.pad padstack.  1.0: Replacing your existing vias with the asuvia.pad padstack 1.1. In Windows, lay out the traces and vias on your board, minimizing the number of vias used.\n1.2. Right-click on one of the vias and select Replace Padstack \u0026gt; All instances (see Figure 1 below)\n      Figure 1: Using Replace Padstack to change all instances of a via padstack   1.3. Select the asuvia.pad Padstack from the list of available padstacks (see Figure 2 below) and click OK. Note: This will only work if you have configured Cadence properly according to our provided instructions, and your Cadence/symbols folder contains asuvia.pad\n       Figure 2: Selecting the asuvia padstack   2.0: Changing the default via.pad padstack As an alternative to using asuvia.pad, you can instead change the default via.pad padstack. You do not need to do both.\n2.1. In Windows, open Padstack Editor\n2.2. Choose File \u0026gt; Padstack Library Browser\u0026hellip; and choose via.pad from the list (see Figure 3). Click OK.\n      Figure 3: Choosing via.pad from the Library Padstack Browser   2.3. In the Drill/Slot hole section, set the Drill diameter to 31.5 and change your \u0026ldquo;Decimal places:\u0026rdquo; to 2 (see Figure 4).\n      Figure 4: Drill diameter set to 31.50   2.4. Click the Design Layers tab (see Figure 5) and change the settings for the BEGIN LAYER, DEFAULT INTERNAL, and END LAYER. Click the Mask Layers tab (see Figure 6) and change the settings for SOLDERMASK_TOP and SOLDERMASK_BOTTOM.\n      Figure 5: Design Layers tab with layers configured         Figure 6: Mask Layers tab with layers configured   2.5. Choose File \u0026gt; Save and overwrite the existing file. You have now successfully changed the default via size to be manufacturable and handle up to 5 amps of current!\nNote: If you are working on the computers in Peralta Studios, you may not be able to change and save the default via because of file permissions. Instead, simply change the padstacks to use the asuvia.pad after you are done designing the board.\nThe following video shows the process described in this tutorial from start to finish in Cadence 16.6 (old version):\n Based on a video and tutorial created by Robert Goby and updated by Qinchen Zha (2/2020) and Ryan Sparks (10/2020).\n","permalink":"https://embedded-systems-design.github.io/changing-the-default-via-padstack-in-cadence-pcb-editor/","tags":["asu","cadence","pcb"],"title":"Changing the Default Via Padstack in Cadence PCB Editor"},{"categories":null,"contents":"Why would I need to change the library search path? When creating a custom PCB footprint for a component, it is stored somewhere on your computer. In order for Design Entry CIS to find where a custom footprint is stored and associate it with a schematic component, the library search path must be changed so that Design Entry CIS knows where to look.\nNote: In order for PCB Editor to find custom PCB footprints and associate them with schematic components, you also need to change the library search path in PCB Editor.\nHow do I change the library search path in Design Entry CIS?   Save your custom footprints in the symbols folder on your computer. Depending on how Cadence is installed on your computer, the full path should be similar to:\nC:\\Program Files\\Cadence\\SPB_17.4\\share\\pcb\\pcb_lib\\symbols When creating a new footprint drawing, the New Drawing dialog box will show the default path (see Figure 1 below). If the path in the dialog box is different than the path above, use the dialog box path for the remainder of this tutorial.\n      Figure 1: New Drawing dialog box   |\n  Also, note the exact name of the footprint. This will be needed later in order to reference it.\nLaunch Design Entry CIS. Note the full path for the Capture.ini file shown on the Start Page (see Figure 2). Depending on how Cadence is installed on your computer, the full path should be similar to:  C:\\Cadence\\SPB_Data-Silent\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini or, if you made a custom HOME variable: %HOME%\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini\n      Figure 2: Design Entry CIS Start Page   Copy (Control-C) the full path of the Capture.ini file. Open the File Explorer in Windows, paste the full path into the path bar (see Figure 3), and press return.        Figure 3: Capture.ini file path in the File Explorer.   The Capture.ini file will open in Notepad. Under the [Allegro Footprints] section, add the full library search path from step 1 above if it is not already listed (see Figure 4). Note that you must increment the number after Dir for each path added (e.g., Dir0, Dir1, Dir2). Do not delete any existing paths from the list. ** **        Figure 4: Capture.ini file with several library search paths added   You have successfully added a library search path to Design Entry CIS. If you are still not able to attach your custom footprints to schematic symbols, re-check the above steps and make sure your custom footprint name is correct.  Based on a tutorial written by Seana O\u0026rsquo;Reilly.\n","permalink":"https://embedded-systems-design.github.io/changing-the-library-search-path-in-cadence-design-entry-cis/","tags":["cadence"],"title":"Changing the Library Search Path in Cadence Design Entry CIS"},{"categories":null,"contents":"Why would I need to change the library search path? When creating a custom PCB footprint for a component, it is stored somewhere on your computer. In order for PCB Editor to find where a custom footprint is stored, the library search path must be changed so that PCB Editor knows where to look.\nNote: In order for Design Entry CIS to find custom PCB footprints and associate them with schematic components, you also need to change the library search path in Design Entry CIS.\nHow do I change the library search path in PCB Editor?  Save your custom footprints in the symbols folder on your computer. Depending on how Cadence is installed on your computer, the full path should be similar to:  C:\\Cadence\\SPB_17.2\\share\\pcb\\pcb_lib\\symbols When creating a new footprint drawing, the New Drawing dialog box will show the default path (see Figure 1 below). If the path in the dialog box is different than the path above, use the dialog box path for the remainder of this tutorial.\n      Figure 1: New Drawing dialog box   Also, note the exact name of the footprint. This will be needed later in order to reference it.\n In PCB Editor, choose Setup \u0026gt; User Preferences\u0026hellip; (see Figure 2). This will open the User Preferences Editor (see Figure 3).\n      Figure 2: User Preferences Menu         Figure 3: User Preferences Editor     In the User Preferences Editor (see Figure 3, above), choose the Paths \u0026gt; Library.\n  The padpath and psmpath lists where Cadence will search for padstack (.pad) and package symbol footprint (.psm) files on your computer.\n Click on the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to the padpath preference. A window similar to Figure 4 will appear.\n      Figure 4: psmpath Items Dialog Box     Make sure the library search path from step 1 above is in the list. If it is not, click the new item button (circled in red in Figure 4) and add the full path to your footprint to the list. Do not delete any existing directories from the list. Click OK when finished.\n  Repeat steps 4 and 5 for the padpath, using the same path from step 1. It is recommended that padstacks (.pad) and package symbol footprints (.psm) be stored in the same folder to simplify usage. Click OK when finished to exit the User Preferences Editor.\n  Finally, you need to confirm that the path was correctly updated to see your custom footprint. In PCB Editor, choose Place \u0026gt; Manually\u0026hellip; (see Figure 5). This will open the Placement dialog box. Choose the Advanced Settings tab (see Figure 6).\n      Figure 5: Place Manually Menu         Figure 6: Placement Dialog Box     In the Advanced tab of the Placement dialog box (see Figure 6), ensure that the box next to Library is checked.\n  In the Placement dialog box, choose the Placement List tab and select Package symbols from the drop-down menu (see Figure 7).\n      Figure 7: Package symbols selected in the Placement dialog box     If your custom footprint shows up in the Placement List (see Figure 8), you have successfully updated the library search path. If it does not show up in the Placement List, re-check the above steps.\n      Figure 8: Footprints successfully linked to PCB Editor     Based on a tutorial written by Seana O\u0026rsquo;Reilly.\n","permalink":"https://embedded-systems-design.github.io/changing-the-library-search-path-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Changing the Library Search Path in Cadence PCB Editor"},{"categories":null,"contents":"Microcontrollers make wonderful \u0026ldquo;brains\u0026rdquo; for embedded systems, but are severely limited in the amount of current they can supply to an external device. In order to determine the amount of current a microcontroller can supply (or sink) with an output pin, open the data sheet and look for the section describing \u0026ldquo;Absolute Maximum Ratings\u0026rdquo;. There, there should be a specification described as the maximum current for a single GPIO pin (see example, Figure 1).\n      Figure 1: Example Absolute Maximum Ratings table from a PSoC® 4200 datasheet   In the example above, the maximum current that can be sourced/sunk with an I/O pin is 25 mA. Therefore, if you are trying to control an external device that draws 100 mA, the microcontroller can not supply the full amount of current. Or, if your motor requires 12V and the microcontroller only supplies 5V, there is also a mismatch.\nSolution: Add a transistor to interface between the low voltage/low current provided by the microcontroller to the high voltage/high current required by the actuator! Dr. Jordan has put together a detailed presentation on choosing an appropriate transistor for use in high-power digital switching.\n","permalink":"https://embedded-systems-design.github.io/choosing-transistors-for-highpower-digital-switching/","tags":["electrical","interfacing","actuator","transistor","mosfet"],"title":"Choosing transistors for high-power digital switching"},{"categories":null,"contents":"Before using Cadence, configure it for optimal performance by following the instructions below.\nStep 1. Create a Cadence Folder Hierarchy In order for both you and Cadence to find your files easily, download the custom Cadence folder hierarchy ZIP file to your computer and decompress it on the desktop. The resultant folder hierarchy is as follows:\n Desktop\\Cadence\\Backups - All backups saved by Design Entry CIS and PCB Editor will be saved here. Desktop\\Cadence\\Projects - All project files that you generate should be saved here. Inside this folder, create a separate folder for each project or schematic so that the files do not get mixed up when you create a new project. Desktop\\Cadence\\step - All .step files that you download or make to use with the PCB Editor 3-D View function should be stored in this folder. Downloadable .step files can be found at 3D Content Central. Desktop\\Cadence\\symbols - All .pad, .bsm, .psm, and .dra files that you download or make should be stored in this folder. These files contain component footprints and mechanical pins that are used by Cadence. This folder also contains a special ASU via padstack (asuvia.pad) that improves manufacturability on the LPKF PCB mill in PRLTA 109.   Step 2. Configure Capture CIS CAPTURE.INI is the primary file in which Cadence stores all of the program settings for schematic editing in Capture CIS. We have created a custom CAPTURE.INI file for the ASU Polytechnic School engineering programs. Follow the instructions below to install and modify the custom CAPTURE.INI file:\n Open the Capture CIS application, which you will use to design schematics. When the \u0026ldquo;Cadence Product Choices\u0026rdquo; window (see Figure 4) appears, select Allegro PCB Design CIS L and click the checkbox next to Use as default. Click OK to continue.        Figure 1: Cadence Product Choices window    Quit the \u0026ldquo;Capture CIS 17.4\u0026rdquo; application.\n  Download the ASU Polytechnic School custom Capture.INI file to your computer. This custom file configures Cadence as follows:\n  Tells Capture CIS to look for PCB footprints in both C:\\Program Files\\Cadence\\SPB_17.4\\share\\pcb\\pcb_lib\\symbols and in C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols.\nTurns on autosave to save your Capture CIS design every 10 minutes.\nTurns on auto backup to back up your Capture CIS design every 10 minutes to C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\Backups.\nAdds two custom help links to the Capture CIS \u0026gt; Help \u0026gt; Web Resources menu\n Embedded System Design Resources Blog - Cadence Posts Cadence Manuals  Edit the custom CAPTURE.INI file to replace the two instances of the text YOURWINDOWSLOGIN with your Windows login (where your home directory is located) on your computer. Examples:  DIR1=C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols\nto\nDIR1=C:\\Users\\ssjorda1\\Desktop\\Cadence\\symbols\nBackup Direcory Path=C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\Backups\nto\nBackup Direcory Path=C:\\Users\\ssjorda1\\Desktop\\Cadence\\Backups\nFigure 2 below shows the original custom CAPTURE.INI file, and Figure 3 below shows an edited example.\nCopy your edited custom CAPTURE.INI file to replace the default CAPTURE.INI file at one of the following paths:  C:\\ProgramData\\SPB_Data\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini\nor\nC:\\SPB_Data-Silent\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini\nor if you have defined your home directory differently according to the installation instructions, use\n%HOME%\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini where %HOME% is the location you set as your home directory (typcically C:\\Users\\YOURUSERNAME)\n      Figure 2: Original custom CAPTURE.INI template         Figure 3: Example edited custom CAPTURE.INI template   Step 3. Configure PCB Editor   Open the PCB Editor application, which you will use to create PCB designs. When the \u0026ldquo;17.4 Allegro PCB Designer Product Choices\u0026rdquo; window (see Figure 4) appears, select \u0026lsquo;Allegro PCB Designer\u0026rsquo; or \u0026lsquo;Allegro PCB Venture\u0026rsquo; and click the checkbox next to Use as default. Click OK to continue.\n      Allegro PCB Designer Product Choices window     Choose Setup \u0026gt; User Preferences\u0026hellip; (see Figure 5).\n      Figure 5: Setup \u0026amp;gt; User Preferences\u0026amp;hellip; menu option     Turn on autosave in PCB Editor to automatically back up your design in case of a system crash by selecting the File_management \u0026gt; Autosave category and changing the settings to match the configuration shown in Figure 6 below. Note: By selecting the Favorite check box, PCB Editor will make it easier to access these settings in the future by saving them in the My_favorites folder at the top of the Categories list.\n      Figure 6: User Preferences Editor Autosave category configuration     Configure the search paths in PCB Editor by selecting the Paths \u0026gt; Library category and selecting the Favorite checkboxes next to padpath, psmpath, and steppath (see Figure 7).\n      Figure 7: User Preferences Editor Paths \u0026amp;gt; Library window     Click the \u0026hellip; next to padpath and add the path to the symbols folder in the Cadence folder on your desktop (C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols) (see Figure 8). Click the up button to give your library priority over the default location(s). Click OK to save changes.\n      Figure 8: Adding to the padpath example     Click the \u0026hellip; next to psmpath and add the path to the symbols folder in the Cadence folder on your desktop (C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols) (see Figure 9). Click the up button to give your library priority over the default location(s). Click OK to save changes.\n      Figure 9: Adding to the psmpath example     Click the \u0026hellip; next to steppath and add the path to the step folder in the Cadence folder on your desktop (C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\step) (see Figure 10). Click the up button to give your library priority over the default location(s). Click OK to save changes.\n      Figure 10: Adding to the steppath example     Click OK to save changes.\n  Congratulations, you have configured Cadence! Next: Get started creating a schematic\nCommon Issues If you can\u0026rsquo;t find your config.ini file, make sure you Also, here is a video documenting an older version of this process:\n ","permalink":"https://embedded-systems-design.github.io/configuring-cadence/","tags":["cadence","pcb"],"title":"Configuring Cadence"},{"categories":null,"contents":"What is a UART (Universal Asynchronous Receiver/Transmitter)? UART is one serial protocol used for communicating data between two digital devices (e.g., between the Pioneer Kit and the computer).\nWhen is a UART useful? Some sensors (e.g., GPS and RFID units) have a UART interface. Additionally, it is very helpful for debugging programs by using it to send messages back to the computer indicating the current status of the program.\nHow does a UART work? More information on UARTs is available in the Microcontroller UART Tutorial from Society of Robots.\nHow many PSoC® chips does the PSoC® 4 Pioneer Kit have? See the PSoC® Hardware Development Kits page. This is important to understand the answer to the next question.\nHow do I connect and configure the PSoC® 4 Pioneer Kit to send information to the computer over the UART?   On the Pioneer Kit, connect a jumper wire from UART RX (P04) of the PSoC® 4 to J8_10 (P12[7]) of the PSoC® 5LP\n  On the Pioneer Kit, connect a second jumper wire from UART TX (P0[5]) of the PSoC® 4 to J8_9 (P12[6]) of the PSoC® 5LP\n  Connect the Pioneer Kit to your computer with a USB cable.\nNext, you will need to determine which COM port the Pioneer Kit is connected to, install a terminal program, and configure it to read data from the serial port on your computer. This will allow you to see the output from your program.\n  Determine which COM port the Pioneer Kit is connected to by opening the Bridge Control Panel application in the Cypress folder in the Start menu, and looking for the COM port listed with the highest number (see Figure 2, below). Write down this port name and close the Bridge Control Panel.\n      Figure 2: Bride Control Panel     Download, install, and open the terminal program PuTTY\n  Click on the Terminal tab and configure it with the settings shown in Figure 3 (below)\n      Figure 3: PuTTY terminal configuration tab     Click on the Session tab and configure it with the settings shown in Figure 4. Use the COM port for your computer determined earlier in this tutorial. Save the session as PSoC and click \u0026ldquo;Open\u0026rdquo;.\n      Figure 4: PuTTY Session configuration tab     Finished! Now, you can see text sent between your computer and PSoC® 4 Pioneer Kit via the UART.\n  ","permalink":"https://embedded-systems-design.github.io/configuring-the-uart-on-psoc/","tags":["cypress","uart","microcontroller","debugging","software"],"title":"Configuring the UART on PSoC"},{"categories":null,"contents":"What is a connector? A connector is an electrical component that links two or more components together. The major types of connectors are:\n Wire to wire (e.g., an in-line connector that connects a battery to a wire harness) Wire to board (e.g., a connector that attaches a sensor to a printed circuit board) Board to board (e.g., connectors used to mate a daughterboard with a motherboard) Power connectors, which handle higher currents Modular connectors (e.g., Ethernet plugs) Terminal blocks and barrier strips, which are useful for connecting and disconnecting wires with screw terminals (e.g., a connector used inside a sprinkler or security control box)  What companies manufacture connectors?  Molex (free samples request) TE Connectivity (free samples instructions)  You can also order connectors directly from distributors (e.g., Newark, Digikey, Mouser)\nHow do I choose a connector? ","permalink":"https://embedded-systems-design.github.io/connectors-101/","tags":["components"],"title":"Connectors 101"},{"categories":null,"contents":"What is a board outline? A board outline is the outermost boundary of a printed circuit board design. It is used by the PCB manufacturer to cut the printed circuit board to the specified size and shape.\nHow do you create a board outline in Cadence PCB Editor?   In PCB Editor, select the rectangle tool in the toolbar (see Figure 1).\n      Figure 1: Rectangle tool     In the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen, make sure \u0026ldquo;Active Class and Subclass\u0026rdquo; is set to Board Geometry and Design_Outline (see Figure 2).\n      Figure 2: Active Class and Subclass options     If you would like to change the type of corners on the board, you can change them in the Corners section of the Options tab (see Figure 3). Options include orthogonal (90 degree), chamfer (sloping edge), and round (curved).\n      Figure 3: Corners options     In the Shape Creation section of the Options tab, choose \u0026ldquo;Place Rectangle\u0026rdquo; and enter the width and height for the board outline in mils (1 mil = 0.001\u0026quot;; 2000 mil = 2\u0026quot;) (see Figure 4).\n      Figure 4: Shape Creation options     Place the rectangle on the board design (see Figure 5).\n      Figure 5: Board Outline Placed     Choose Setup \u0026gt; Change Drawing Origin and click in the lower left-most point of the board outline. Your board outline is now complete!\n  Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/creating-a-board-outline-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Creating a Board Outline in Cadence PCB Editor"},{"categories":null,"contents":"Creating a Custom DC Barrel Jack Schematic Symbol and PCB Footprint in Cadence (Includes Padstack Tutorial)\nFor this tutorial, we will utilize the PRT-10811 breadboard-compatible DC barrel jack adapter sold by Sparkfun, and will be referring to its product drawing found here .\nPart 1: Creating a Barrel Jack Schematic Symbol\n  Open Capture CIS. You can optionally create a new project, design, and/or library, or you can use an existing library.\n  Right click your library and select \u0026ldquo;New Part\u0026rdquo;.\n  Name the part and set the part reference prefix to J, as shown. Leave the PCB Footprint field blank (unless you did part 2 first, then use the name of the footprint).\n      Figure     Open up the product drawing for the barrel jack adapter. Note the \u0026ldquo;Circuit Diagram\u0026rdquo; section on the left with the pins numbered 1, 3, 2. We will be drawing this symbol by hand in Cadence.\n  Place the three pins spaced out vertically with their numbers, positions, and names according to the drawing.\n      Graphical user interface, application, table, Excel Description automatically generated     Enlarge the bounding box by clicking on it and then dragging the pink corner handles. Then, space the pins out farther. Since drawn shapes will have their vertices snapped to the grid of dots we can see in the background, we will need some extra space to make this symbol.\n      Table, calendar Description automatically generated        Calendar Description automatically generated     Select the line tool (top of the shapes toolbar). Draw a series of lines representing the tip spring, as shown in the drawing. After drawing one line segment, you can begin another at the endpoint of the previous line.\n      Graphical user interface, application, Teams Description automatically generated         Chart, line chart Description automatically generated     Draw more lines representing the shunt terminal, as pictured. The arrow is imitated with two lines forming an angle pointing downward.\n      Figure     Start drawing the center terminal with a single, short straight line.\n      Figure     Select the rectangle tool (second from the top of the shapes toolbar). Draw a rectangle, 1 wide and 4 tall, centered at the left end of this line.\n      Chart, line chart Description automatically generated     Draw two straight horizontal lines, one above the center of the rectangle and one below.\n      Figure         Figure     Select the Arc tool now (second from the bottom of the shape toolbar shown). Click first the left end of the top line, then the space between the lines and one to the left, then the left end of the bottom line. This will cap off the center terminal.\n      Chart, diagram Description automatically generated     Move the pin names so they don\u0026rsquo;t overlap the symbol. If desired or needed, readjust the positions of the lines/shapes slightly.\n      Figure     You now have a barrel jack schematic symbol. Nice work!\n  Part 2: Creating a Barrel Jack PCB Footprint Creating the Padstack\n  Open up Padstack Editor. Select Thru-Pin for padstack usage, Circle for pad geometry.\n      Figure     Look at the dimensions in the drawing under \u0026ldquo;Recommended P.C.B. Layout\u0026rdquo;. The pins aren\u0026rsquo;t circular, so you\u0026rsquo;ll want the drill hole to be the size of the longest dimension plus tolerances (1.6+0.3=1.9 mm -\u0026gt; 74.8 mils) to ensure it isn\u0026rsquo;t too small. Consult the PCB Mill Specs and round up to the nearest drill size for the drill diameter.\n      Graphical user interface Description automatically generated     Define a drill symbol with the same radius as your drill hole.\n      Graphical user interface, application Description automatically generated     Select your regular pad size. You\u0026rsquo;ll want one that guarantees sufficient annular ring and allows adequate clearance between pins. Annular ring can be calculated using the following equation from ProtoExpress.com (read more about annular ring there ).\nAnnular ring width = (Diameter of the pad - Diameter of the finished hole) / 2\nAccording to this equation, a pad diameter of 100 is sufficient for the minimum annular ring of 10 needed to satisfy Peralta\u0026rsquo;s DFM constraints. 128 was chosen for this example as this value results in a larger annular ring yet is still small enough to avoid pin overlap when used in its intended footprint.\n      Graphical user interface Description automatically generated     Select an anti pad and thermal pad size approximately 20 mils larger than the size of the regular pad.\n      Graphical user interface Description automatically generated     Add default internal layers identical to the outer layers, so the program doesn\u0026rsquo;t give you an error when saving. As a shortcut, you can actually drag your cursor across a row so the three pads' settings are selected together and then copy and paste this row into other layers.\n  Define the soldermask layers with a radius about 20 mils larger than the thermal/anti pads.\n      Figure     Save the padstack with a memorable enough name to find it in the list later. Make sure to use the Save button in the file menu, not the one on the Summary page (which only saves the summary).\n  Creating the Footprint   Open PCB Editor, create a new drawing, enter the name you\u0026rsquo;ll use for your PCB footprint, and select \u0026ldquo;Package symbol\u0026rdquo;.\n      Graphical user interface Description automatically generated     Reset the origin so it\u0026rsquo;s somewhere you can see it. To do this, zoom in really far, then go to Setup -\u0026gt; Change Drawing Origin and click the center of the screen. If no errors about drawing extents appear in the command window and you can see the origin, you\u0026rsquo;re good, if not re-adjust the zoom and try again.\n      Figure     Click the \u0026ldquo;Place Pin\u0026rdquo; button to start placing your pins. Select the correct padstack, then place pin 1 at the drawing origin. You can do this either by simply clicking the origin, or by typing x 0 0 into the command window to select (0, 0) as the coordinates for this operation.\n      A picture containing text, screenshot, monitor, computer Description automatically generated     To determine the placement of pin 2, refer to the dimensions given in the drawing. Pin 1 is 13.6 mm to the right of the front of the physical package, while pin 2 is 7.8 mm to the right of the same edge. This means that the distance between them is (13.6 - 7.8) == 5.8 mm. Since pin 2 is to the left of pin 1, we put a negative sign on the number, and we need to convert to mils . Mils = mm *39.37, so 5.8 mm * 39.37 =228.3 mils (to one decimal place).\nSo the coordinates of pin 2 are (-228.3, 0). Use the command x -228.3, 0 to place pin 2 precisely at this point.\n  Use the dimensions to place pin 3. The distance of pin 3 to the edge of the barrel jack is 10.6 mm, so to find its x-position relative to pin 1, 10.6 - 13.6 = -3mm = -118.1 mils. The y-distance is stated as 4.8 mm down (negative in our coordinate system) which rounds up to 189 mils.\nThus, use x -118.1 -189 to place pin 3.\n      A picture containing text, screenshot, monitor, electronics Description automatically generated     Place the reference designator. Click the button shaped like a capital I or a text cursor next to the Place Pin button to enter the correct mode.\n      Graphical user interface, application Description automatically generated   Click where you want the text, type J* and then hit enter. The reference designator will then appear.\n  Add the package outline. This is a critical step to ensure the barrel jack will be oriented correctly in your PCB layout.\n      Figure   Click the Add Rectangle tool, two to the right of the Reference Designator button. Using the drop-down menus on the right, make sure Active Class and Subclass are Package Geometry and Assembly_Top, respectively.\nThe dimensions for this rectangle come from the width and length of the barrel jack stated in the drawing. Note that the jack is pointing to the left, so the width of our rectangle will be the length from the drawing (14.5 mm = 570.9 mils), the height of our rectangle will be the width from the drawing (9 mm = 354.3 mils), and it will be placed on the left side.\n      Figure   From the drawing, the origin of this rectangle would be 13.6 mm to the left of pin 1, and 4.5 mm above. Converting these to mils, the coordinates are (-535.4, 177.2). So type x -535.4 177.2 to place the rectangle at that location.\n      A picture containing text, screenshot, monitor, screen Description automatically generated     You now have a barrel jack footprint!\nBased on a post written by Joshua Weight\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-dc-barrel-jack-schematic-symbol-and-pcb-footprint-in-cadence/","tags":["custom part","cadence"],"title":"Creating a Custom DC Barrel Jack Schematic Symbol and PCB Footprint in Cadence"},{"categories":null,"contents":"In order to use schematic symbols imported from the web or custom created for your project (very common), you must create a custom symbol library in which to save them. It is good practice to create a custom library for each project that you work on to save your schematic symbols. To create a custom library, do the following:\n  With your project open, choose \u0026ldquo;File \u0026gt; New \u0026gt; Library\u0026rdquo;. This will create a new library with a default name under Design Resources in the project.\n      Figure 1     Right-click on the new library and choose \u0026ldquo;Save As\u0026hellip;\u0026rdquo; You will be prompted to enter a name and choose a location for the custom library. Save the custom library in the same folder as your project files.\n      Figure 2     Add the custom library to your project by clicking the \u0026ldquo;Place Part\u0026rdquo; tool in the toolbar. Then, click the \u0026ldquo;Add Library\u0026rdquo; button (which looks like a dotted square with a yellow corner) and locate the library file that you saved in the previous step (it will likely be in a different location than the pre-installed libraries). Click \u0026ldquo;Open\u0026rdquo; to add the library to the list of active libraries.\n      Figure 3: Toolbar with Add Part button         Figure 4: Add Library button (dotted square with yellow corner)     To create a new part in the custom library, right-click on the library and choose \u0026ldquo;New Part\u0026rdquo;. More information on creating custom parts can be found on the Creating a Custom Schematic Symbol in Cadence page.\n  Based on a tutorial by Cody Van Cleve\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-library-in-cadence/","tags":["tutorial","cadence","custom part"],"title":"Creating a custom library in Cadence"},{"categories":null,"contents":"Introduction A padstack is a design for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered (see example, Figure 1). You may need to create a custom padstack when creating custom parts to ensure that the pad and hole are big enough to be reliable. This tutorial describes the manual creation of custom padstacks using the Pad Designer application.\n      Figure 1: Padstack examples for through-hole and surface mount devies   The example custom padstacks created in this tutorial will be for TI LM2676 SIMPLE SWITCHER® 8V to 40V, 3A Low Component Count Step-Down Regulator (see Figure 2).\n      Figure 2: LM2676 Switching Power Supply IC   Search the Datasheet for the Footprint Specifications In order to build a custom padstack, you first need to find the footprint (sometimes called \u0026ldquo;land pattern\u0026rdquo; specifications in the datasheet for the component. Figure 2 shows the land pattern of the IC package from page 34 of the LM2676 datasheet.\n      Figure 3: Land pattern from the LM2676 datasheet. Dimensions are in mils, with brackets in mm.   By interpreting Figure 3, the following key dimensions were determined:\nPad - Pins\n 7 total pins Pad length = 36 mils Pad width = 85 mils Pad spacing = 50 mils (center of one pad to center of the next pad)  Mechanical/Thermal Un-Plated Pad* (underneath the body of the chip)*\n Length = 410 mils Width = 425 mils  Create a Custom Electrical Padstack 7 pins of the LM2676 will be soldered to (7) 36 mil x 85 mil (L x W) pads spaced 50 mils apart (center to center). Since the 7 pads are all the same, we can create a single padstack and use it for all of the pins.\n In Windows, open the \u0026ldquo;Pad Designer\u0026rdquo; application. The Pad Designer window shown in Figure 4 will appear and default to editing the parameters for a new unnamed padstack. For a surface mount padstack, the options on the Parameters tab can be left at their defaults.        Figure 4: Pad Designer window, Parameters tab   The Summary box shows the overall specifications for the currently loaded pad.\nThe Units box shows the units to be used in the creation of the pad, and the number of decimal places that can be used to specify a unit. The mil (1/100th of an inch) is standard for most electronic applications. Higher precision numbers may not improve the overall accuracy due to limitations in manufacturing processes.\nThe Usage options box shows several unused options for padstacks.\n Microvias (option usually dimmed) are tiny laser-drilled holes used to improve the electrical connection between the layers of a multilayer PCB. \u0026ldquo;Suppress unconnected int. pads; legacy artwork\u0026rdquo; allows for the use of older pads in new designs. Since we are only able to print double-layer (two-sided) PCBs, this option can remain unselected. \u0026ldquo;Mech pins use antipads as Route Keepout; ARK\u0026rdquo; limits routing of traces near mechanical (e.g., thermal or mechanical attachment) pads on the PCB. This option can remain unselected.  The Multiple drill box is not used.\nThe *Drill/Slot hole *box shows multiple options for padstack holes. 3 hole types are supported:\n **Circle Drill - most common **(even if the part is surface mount and has no holes) Oval Slot - uncommon. Rectangle slot - used when cutting slots around pads. Uncommon.  Plating is a conductive coating that makes a connection through holes in a PCB. 3 plating types are supported:\n **Plated - most common. **A pad will be created and then a hole will be drilled through the pad. Then, the hole will be plated after the PCB mill is finished. Non-plated - uncommon. An area without copper will be milled, and then a hole will be drilled through the PCB. The Thieving tool is more effective for creating mounting holes. Optional - uncommon. This allows the computer to decide.  Drill diameter - this is where you will enter the diameter (in the units specified above) of the drill hole. Applies to through-hole designs only.\nTolerance - uncommon (leave 0.0). Acceptable tolerances for drilling that are communicated to the PCB mill. A tolerance of 0.0 means that the hole should be as close to the actual dimensions as possible.\nOffset X and Y - uncommon (leave 0.0). This allows for corrections if the PCB mill is drilling holes in the wrong places. This can be fixed more easily in the PCB mill control software.\nNon-standard drill - uncommon (leave blank). This option allows for methods of drilling that are beyond what we have available.\nThe Drill/Slot symbol box allows for the creation of silkscreen shapes around the pad. Circle and square are most typical.\nThe Top view box shows the padstack under design.\n      Figure 5: Pad Designer window, Layers tab    The Layers tab is shown in Figure 5.\nThe *Padstack layers *box provides options for editing individual layers or the entire PCB. The \u0026ldquo;Single layer mode\u0026rdquo; allows for simplifying the padstack for a single-sided (single-layer) board. You can click on layers and make changes via the Regular Pad, Thermal Relief, and Anti Pad boxes described below.\nThe default layers for a padstack are:\n BEGIN LAYER - top copper layer of the PCB DEFAULT INTERNAL - inner layers of the PCB (our PCB mill is limited to 2 layers) END LAYER - bottom copper layer of the PCB SOLDERMASK_TOP - top colored soldermask layer of the PCB SOLDERMASK_BOTTOM - bottom colored soldermask layer of the PCB PASTEMASK_TOP - top solder paste layer of the PCB (uncommon in class) PASTEMASK_BOTTOM - bottom solder paste layer of the PCB (uncommon in class) FILMMASK_TOP - top conformal coating layer of the PCB (uncommon in class) FILMMASK_BOTTOM - bottom conformal coating layer of the PCB (uncommon in class)  The Views box shows the current padstack under design, either as a horizontal cross-section or a top view.  The Regular Pad box allows editing of the size of the pad itself. The Thermal Relief box allows editing for the thermal relief pads necessary for parts that create a lot of heat (e.g., high-power MOSFETs and voltage regulators). The Anti Pad box allows editing of the keep-out area that limits the space that can be milled around the pad. All three types have the following options:\n Geometry - shape of the pad (circle, square, and rectangle most common). Set \u0026ldquo;Thermal Relief\u0026rdquo; and \u0026ldquo;Anti Pad\u0026rdquo; to Null if you do not want to use them. Shape - allows the creation of custom pad shapes. Especially useful for complex SMD devices. Flash - uncommon. Allows the protection of a layer from heat stress. Width and Height- size of the pad on the PCB Offset X and Y - uncommon. This allows for corrections if the PCB mill is not aligned. This can be fixed more easily in the PCB mill control software.  In this example, the pad dimensions from the datasheet are entered to create the pad shown in Figure 4.\nFinally, choose \u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and save the padstack to your project folder with a useful name (e.g., \u0026ldquo;SMD85W36L\u0026rdquo; which means a surface mount pad with width of 85 mil and length of 36 mil). Do not use spaces in filenames.\nCreate a Custom Mechanical Padstack In this example, there is also a mechanical pad with dimensions 410 mils x 425 mils (L x W). Follow the instructions above to create the mechanical pad as a \u0026ldquo;Thermal Relief\u0026rdquo; instead of a \u0026ldquo;Regular Pad\u0026rdquo;.\n\u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and save the padstack to your project folder with a useful name (e.g., \u0026ldquo;LM2676mech\u0026rdquo;). Do not use spaces in filenames.\nAdditional Resources  Part 19: Designing Pads video from iEngineered  Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-padstack-old/","tags":null,"title":"Creating a Custom Padstack (old)"},{"categories":null,"contents":"Introduction A padstack is a design for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered (see example, Figure 1). You may need to create a custom padstack when creating custom parts to ensure that the pad and hole are big enough to be reliable. This tutorial describes the manual creation of custom padstacks using the Pad Designer application.\n      Figure 1: Padstack examples for through-hole and surface mount devies   The example below is for a simple round pad. You should look up the dimensions for your own parts.\nSearch the Datasheet for the Footprint Specifications In order to build a custom padstack, you first need to find the footprint (sometimes called \u0026ldquo;land pattern\u0026rdquo; specifications in the datasheet for the component. Create a Custom Electrical Padstack 1. Open the new Padstack editor in Cadence:\n      Figure 2   2. Select Thru-pin and circle on the start tab\n      Figure 3   3. Enter the drill diameter\n      Figure 4   4. Define the symbol that will be used to represent the drill hole:\n      Figure 5   5. Define the Top and bottom layer inner, outer, and thermal geometry. Since Peralta uses two-layer boards, geometry other than begin and end layers will be ignored.\n      Figure 6   The layers tab provides options for editing individual layers or the entire PCB. You can click on layers and make changes via the Regular Pad, Thermal Relief, and Anti Pad boxes described below.\nThe default layers for a padstack are:\n BEGIN LAYER - top copper layer of the PCB DEFAULT INTERNAL - inner layers of the PCB (our PCB mill is limited to 2 layers) END LAYER - bottom copper layer of the PCB SOLDERMASK_TOP - top colored soldermask layer of the PCB SOLDERMASK_BOTTOM - bottom colored soldermask layer of the PCB PASTEMASK_TOP - top solder paste layer of the PCB (uncommon in class) PASTEMASK_BOTTOM - bottom solder paste layer of the PCB (uncommon in class) FILMMASK_TOP - top conformal coating layer of the PCB (uncommon in class) FILMMASK_BOTTOM - bottom conformal coating layer of the PCB (uncommon in class)  6. Define the soldermask geometry for the top and bottom layers\n      Figure 7   7. Look through the summary page to ensure everything was entered correctly:\n      Figure 8   8. Save to the custom symbols folder you created and included in your padpath.\nAdditional Resources  Part 19: Designing Pads video from iEngineered  ","permalink":"https://embedded-systems-design.github.io/creating-a-custom-padstack-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom padstack in Cadence"},{"categories":null,"contents":"Introduction A PCB footprint is the physical layout on a PCB to which a component is soldered. Usually, you must create a custom PCB footprint for each custom schematic symbol that you create. Footprints can be made for many standard components (e.g., basic ICs) using the Package Symbol Wizard (see the Creating a PCB footprint using Package Designer in Cadence page), but more complex components (like switching power supply ICs with thermal reliefs) must be created by hand. This tutorial details the manual creation of a custom footprint.\nThe example custom PCB footprint created in this tutorial will be a TI LM2676 SIMPLE SWITCHER® 8V to 40V, 3A Low Component Count Step-Down Regulator (see Figure 1).\n      Figure 1: LM2676 Switching Power Supply IC   Search the Datasheet for the Footprint Specifications In order to build a custom footprint, you first need to find the footprint (sometimes called \u0026ldquo;land pattern\u0026rdquo; specifications in the datasheet for the component. Figures 2 and 3 show the land pattern and physical dimensions of the IC package from page 34 of the LM2676 datasheet.\n      Figure 2: Land pattern from the LM2676 datasheet. Dimensions are in mils, with brackets in mm.         Figure 3: Physical package dimensions from the LM2676 datasheet. Dimensions are in mils, with brackets in mm.   By interpreting Figures 2 and 3, the following key dimensions were determined:\nPackage geometry (overall)\n Length = 565 mils Width = 410 mils  Mechanical/Thermal Un-Plated Pad (underneath the body of the chip)\n Length = 410 mils Width = 425 mils  Pad - Pins\n 7 total pins Pad length = 36 mils Pad width = 85 mils Pad spacing = 50 mils (center of one pad to center of the next pad)  Create Custom Padstack(s) For each different type of pin/pad, you need to create a custom padstack. For more information, see the Creating a custom padstack in Cadence page. For this example, you will need to create two custom padstacks using the dimensions above: one for the mechanical pad and one for the pin pads (which are all the same, so one padstack can be used).\nCreate a New Footprint   In Windows, open the PCB Editor application. (You can also use the Package Designer application).\n  Choose \u0026ldquo;File \u0026gt; New\u0026hellip;\u0026rdquo;. The New Drawing window shown in Figure 4 will appear.\n      Figure 4: New Drawing window     Name your drawing, select \u0026ldquo;Package symbol\u0026rdquo; and click OK. A blank package workspace will appear.\n  Since the component footprint is a rectangle (common), choose the \u0026ldquo;Shape Add Rect\u0026rdquo; tool (see Figure 5).\n      Figure 5: Toolbar     Move the cursor over the \u0026ldquo;Options\u0026rdquo; tab (see Figure 6) and enter the package geometry information from the datasheet. Then, place the rectangle on the blank workspace.\n      Figure 6: Options tab     Choose \u0026ldquo;Layout \u0026gt; Pins\u0026rdquo; to switch to pin mode. Move the cursor over the \u0026ldquo;Options\u0026rdquo; tab (see Figure 7). The options available in the tab are described below.\n      Figure 7: Layout \u0026amp;gt; Pins - Options tab   The Connect and Mechanical options allow a choice between an electrical pin (Connect) and a mechanical or thermal relief (described in step i below).\nThe Padstack box and the \u0026ldquo;\u0026hellip;\u0026rdquo; button allow entry of the path to the padstack file. These can be the same or different for each pin, depending on the land pattern in the component datasheet.\nThe Copy mode option allows selection of the coordinate system for your pins. Rectangular (default) is most common.\nThe X and Y options allow entry of the quantity, spacing (in mils), and order of pins being placed at once. Note that multiple pins placed this way will all use the same padstack (which in most cases is fine).\nThe Rotation option dictates which way the padstack will be rotated. This is particularly relevant when pins are wrapped around multiple sides of an IC (e.g., for a microcontroller).\nThe Pin # and Inc options allow entry of the starting pin number for the first pin and the number by which to increment pin numbers when multiple pins are placed simultaneously. Make sure that these pin numbers align with the pin numbers in the custom schematic symbol that you created.\nThe Text block and Text name options allow association of a name with the part.\nThe Offset X and Y options allow correction of spacing errors. If you have created your footprint correctly up to this point, you should not need this option.\n  Click on the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to Padstack. The \u0026ldquo;Select a padstack:\u0026rdquo; window will appear (see Figure 8). Make sure that both \u0026ldquo;Database\u0026rdquo; and \u0026ldquo;Library\u0026rdquo; are checked, and select the custom padstack that you created for the electrical pad. In this example, the custom padstack is called \u0026ldquo;Smd_85W36h\u0026rdquo;, meaning that it is a surface mount part that is 85 mil wide and 36 mil high. Click OK.\n      Figure 8: Select a padstack window for electrical pad     Configure the rest of the Options window as shown in Figure 9 and click to place the first pin in the correct position inside the rectangle. The result (top view) should look like Figure 10.\n      Figure 9: Options for adding 7 custom pads         Figure 10: Pins added to footprint   This is a good time to double-check the data sheet connection diagrams to make sure the pin numbering is correct. Figure 11 shows the connection diagram for the IC package from page 2 of the LM2676 datasheet.\n      Figure 11: Connection diagram from LM2676 datasheet   Careful examination shows that our new symbol has pin 1 at the top of the footprint, whereas the datasheet indicates that pin 1 should be at the bottom of the footprint. This is a critical detail (and common mistake) that must be fixed in order for the board to work properly.\nThere are two ways to fix this problem.\nOPTION 1: Delete and replace. Right-click in the workspace and choose \u0026ldquo;Done\u0026rdquo;. Then, right-click on each pin and choose \u0026ldquo;Delete\u0026rdquo;. Finally, re-place the pins using the corrected options shown in Figure 12.\n      Figure 12: Corrected options for adding 7 pads   OPTION 2: Manually Edit Text. Click the \u0026ldquo;Text Edit\u0026rdquo; tool in the toolbar (the bottom icon in Figure 13). Edit the number on each pin to correct it.\n      Figure 13: Toolbar with Text Edit tool (bottom)   The corrected footprint is shown in Figure 16.\n  Next, add the mechanical pad. Choose \u0026ldquo;Layout \u0026gt; Pins\u0026rdquo; to switch to pin mode. Move the cursor over the \u0026ldquo;Options\u0026rdquo; tab and click on the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to Padstack. Select the custom padstack that you created for the mechanical pad. In this example, the custom padstack is called \u0026ldquo;Lm2676_Mech\u0026rdquo; (see Figure 14). Click OK and place the pad in the correct position inside of the rectangle.\n      Figure 14: Select a padstack window for mechanical pad     Finally, you need to add a reference designator (RefDes) for the part number (in this example, LM2676) to the diagram. Click the Label Refdes tool (R1 button, second from the right in Figure 15) and add the part number above the footprint.\n      Figure 15: Label Refdes tool (second from right)     Finally, choose \u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and save the footprint to your project folder. Do not use spaces in file names. Note that the Package Wizard creates two files: a DRA file (drawing of the package) and a PSM file (package symbol, footprint). The finished PCB footprint is shown in Figure 16.      Figure 16: Finished PCB footprint     Additional Resources  Making and Editing Footprints - Chapter 8 in the Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner How to Create Complex Footprints video from parsysEDA OrCAD Tutorial - Section 8.2 (older version of software)  Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-pcb-footprint-manually-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom PCB footprint manually in Cadence"},{"categories":null,"contents":"Introduction A PCB footprint is the physical layout on a PCB to which a component is soldered. Usually, you must create a custom PCB footprint for each custom schematic symbol that you create. This tutorial details the easiest way to make custom footprints using the Package Symbol (Wizard).\nThe example custom PCB footprint created in this tutorial will be a Cypress PSoC® 4 CY8CKIT-049 4xxx Prototyping Kit (see Figure 1).\n      Figure 1: PSoC® 4 Prototyping Kit   1. Search the Datasheet for the Footprint Specifications In order to build a custom footprint, you first need to find the footprint specifications in the datasheet for the component. However, sometimes a datasheet does not include a footprint. In this example, Cypress provides the PCB design files for the PSoC® 4 CY8CKIT-049 4xxx Prototyping Kit, where you can get more useful information. Figure 2 shows the PCB layout provided by Cypress. Of note is that while it does show the dimensions of the PCB, it does not show the spacing or position of the pins in relation to the edges of the PCB. In this case, you will need a pair of calipers to measure the pin spacing and position of the pins in relation to the edge. Most standard header pins in embedded systems have a 100 mil (0.1\u0026quot;) spacing between pins, but it is always good to double-check to avoid unnecessary PCB respins later. Additionally, this board can be\u0026quot;snapped\u0026quot; to separate the programmer (left) from the processor (right). This tutorial will assume that the programmer will be snapped off and only the processor module will be used.\n      Figure 2: Prototyping Kit PCB layout from Cypress   Using this drawing and a pair of calipers to fill in missing information, the final dimensions were determined to be:\n Number of pins = 44 (22 per side) Lead pitch = 100 mils (0.1\u0026quot;) - spacing from the center of one pin to the center of the next pin in a row Terminal row spacing = 750 mils (0.75\u0026quot;) - spacing from the center of one row of pins to the center of the other row of pins Package width = 950 mils (0.95\u0026quot;) Package length = 2300 mils (2.3\u0026quot;)  2. Create a New Footprint   In Windows, open the PCB Editor application. (You can also use the Package Designer application).\n  Choose \u0026ldquo;File \u0026gt; New\u0026hellip;\u0026rdquo;. The New Drawing window shown in Figure 3 will appear.\n      Figure 3: New Drawing window     Name your drawing (do not use spaces in drawing names), select \u0026ldquo;Package symbol (wizard)\u0026rdquo; and click OK. The Package Symbol Wizard window shown in Figure 4 will appear.\n      Figure 4: Package Symbol Wizard window     Select the Package Type closest to the footprint that you are trying to make and click \u0026ldquo;Next \u0026gt;\u0026rdquo;. The Package Symbol Wizard - Template window shown in Figure 5 will appear. For more information on package types, see the IC Packages tutorial on Sparkfun. In this tutorial, the PSoC® footprint is closest to a Dual In-line Package (DIP), which is a common through-hole package.\n      Figure 5: Package Symbol Wizard - Template window     In the Package Symbol Wizard - Template window, select \u0026ldquo;Default Cadence supplied template\u0026rdquo; and click \u0026ldquo;Load Template\u0026rdquo;. Click \u0026ldquo;Next\u0026gt;\u0026rdquo; to continue to the \u0026ldquo;General Parameters\u0026rdquo; window (shown in Figure 6). The default template is generally good for most all footprints made using this wizard. Custom templates are required when the grid spacing is different, or if making very small parts (e.g., with QFN packages).\n      Figure 6: Package Symbol Wizard - General Parameters window     The General Parameters window allows you to set the units that will be used to enter dimensions (typically \u0026ldquo;mils\u0026rdquo; for electronics applications) and the default prefix for the reference designator for this part. A reference designator is the unique ID labeling each part in a schematic (e.g., U1, U2, U3 for ICs). Click \u0026ldquo;Next \u0026gt;\u0026rdquo; to continue to the \u0026ldquo;DIP Parameters\u0026rdquo; window (see Figure 7).\n      Figure 7: Package Symbol Wizard - DIP Parameters window     The DIP Parameters window allows you to enter the number of pins, spacing, width, and length of the footprint determined from the manufacturer (see step 1, above). Enter the appropriate information and click \u0026ldquo;Next \u0026gt;\u0026rdquo; to continue to the \u0026ldquo;Padstacks\u0026rdquo; window (See Figure 8).\n      Figure 8: Package Symbol Wizard - Padstacks window     A padstack is a specification for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered. In our example, there are 44 pins that each use the same padstack. Click the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to \u0026ldquo;Default padstack to use for symbol pins\u0026rdquo; to display the padstack browser (see Figure 9).\n      Figure 9: Package Symbol Wizard Padstack Browser     In the Padstack Browser window, choose a padstack that is appropriate for your component and click \u0026ldquo;Next \u0026gt;\u0026rdquo;. The numbers are typically in mils (e.g., \u0026ldquo;Pad60cir42d\u0026rdquo; is a circular pad with diameter 60 mils and drill diameter of 42 mils). For through-hole components, it\u0026rsquo;s usually better to have larger padstacks to allow for plenty of soldering area. For surface-mount components, the padstack should match the recommendations in the datasheet from the manufacturer. When in doubt, it\u0026rsquo;s sometimes easier to make a custom padstack (see the Creating a Custom Padstack in Cadence page).\n      Figure 10: Package Symbol Wizard - Symbol Compilation window     The Symbol Compilation window appears (see Figure 10). Leave the default options selected and click \u0026ldquo;Next \u0026gt;\u0026rdquo; to show the Summary window (see Figure 11).\n      Figure 11: Package Symbol Wizard - Summary     Finally, click \u0026ldquo;Finish\u0026rdquo; to complete the creation of the new symbol. A new window appears with the finished symbol (see Figure 12). Note that the Package Wizard creates two files: a DRA file (drawing of the package) and a PSM file (package symbol, footprint).\n      Figure 12: Finished PCB footprint     Additional Resources  Quick Guide: Creating a Custom PCB Footprint using Package Designer Part 20: Package Symbol Wizard video from iEngineered  Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-pcb-footprint-using-package-designer-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom PCB footprint using Package Designer in Cadence"},{"categories":null,"contents":"Introduction In most designs, some components will not be available in built-in libraries. The purpose of this tutorial is to show how to make a custom schematic symbol that can be used in the design of schematics in Cadence.\nThe example custom schematic symbol created in this tutorial will be a Texas Instruments CC2541 Bluetooth-enabled microcontroller.\nLimitations This guide will not cover how to add the custom fields required for PSpice simulations. Unless you are planning to run circuit simulations, PSpice models are not required (and are often not part of the built-in parts).\n1. Search the Datasheet for the Pin Layout In order to build a custom schematic symbol, you need to find the pin layout in the data sheet of the component. Figure 1 shows the pin layout from the CC2541 datasheet.\n      Figure 1: Pin layout for the CC2541 microcontroller   2. Create a New Project and Custom Library See the Creating a New Project in Cadence page for instructions.\n3. Create a New Schematic Symbol Right-click on your custom library and choose \u0026ldquo;New Part\u0026rdquo; (see Figure 2). The New Part Properties window will appear (see Figure 3). Note that the file path at the bottom of the window will be the path of your custom library.\n      Figure 2: Creating a new part in your custom library         Figure 3: New Part Properties window.   Name your part with the part number from the component datasheet. If you have not yet created a footprint for your part, you can add it at a later time.\nNext, use the Place Rectangle tool in the toolbar (see Figure 4) to make an outline for your part within the dashed lines. If the area enclosed by the dashed lines is not big enough, you can enlarge it with the arrow tool. IEEE schematic formatting standards dictate that schematic symbols are usually rectangular.\n      Figure 4: Place rectangle tool   Once your rectangle is complete, you can begin placing pins using the Place Pin tool in the toolbar (see Figure 5). It is a good idea to place pins on the same sides of the chip as its physical layout (see the data sheet) to make circuit debugging easier. In the case of the CC2541, there are 10 pins on each side for a total of 40 pins.\n      Figure 5: Place pin tool   Upon clicking the Place Pin tool, a window will appear (see Figure 6). The name should be the same as the pin name in the data sheet but different than all other pins on the chip. If there are multiple pins with the same name in the data sheet, add a number to each one to differentiate (e.g., GND1, GND2). The pin number should be the pin number on the chip package, which can also be found in the data sheet. The shape can be a line (common) or other shape depending on the function of the pin. The pin type can be passive, but setting the pin type correctly will help the Electrical Rules Check (ERC) find errors in your design more easily. When you are finished configuring the pin, click OK.\n      Figure 6: Place Pin window   Once you are finished adding all of the pins for the component, your final product should look something like the symbol in Figure 7.\nPRO TIP: When designing a custom schematic symbol, consider the schematic in which it needs to fit. The location of the schematic pins in the custom schematic symbol need not be identical to the physical part, but changing the order might complicate troubleshooting for beginners.\n      Figure 7: Completed schematic symbol   Finally, save your part by choosing \u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and double-checking to make sure it is saving to your custom library. Do not use spaces in filenames. Your custom schematic symbol will now be stored in your custom library and will be available for placing into your schematic.\n4. Editing a Custom Schematic Symbol If you need to edit a custom schematic symbol, save the symbol first. Then, open the Design Cache folder in the project browser (see Figure 8), right-click on the edited schematic symbol in the design cache, and select \u0026ldquo;Replace Cache\u0026rdquo; from the drop down menu to update the schematic symbol in your schematic (see Figure 9)\n      Figure 8: Design Cache folder         Figure 9: Right-click menu options   Based on tutorials by Josh Carroll, Cody Van Cleve, and Robert Goby\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-schematic-symbol-in-cadence/","tags":["cadence"],"title":"Creating a custom schematic symbol in Cadence"},{"categories":null,"contents":"Introduction This tutorial will walk through the creation of a custom surface-mount device (SMD) footprint manually. A MCH3382 Power MOSFET from ON Semiconductor will be used as an example.\nHow do you create a custom SMD pad manually in Cadence?   First, find the soldering footprint (sometimes named slightly differently, depending on manufacturer) in the component datasheet (see Figure 1).\n      Figure 1: Recommended soldering footprint for MCH3382 Power MOSFET     In Windows, open Pad Editor in the Cadence folder in the Start Menu. The Pad Editor window will appear (see Figure 2). The pad editor will allow you to create a padstack for the three individual pads in the footprint. Select \u0026ldquo;SMD Pin\u0026rdquo; under \u0026ldquo;Select padstack usage:\u0026rdquo; and select \u0026ldquo;Rectangle\u0026rdquo; under \u0026ldquo;Select the default pad geometry\u0026rdquo;.\n      Figure 2: Pad Editor main window     In the \u0026ldquo;Units\u0026rdquo; section of the Pad Editor window (located in the bottom left corner), change the units to match the units in the component datasheet (see Figure 2). For the MCH3382, the footprint is in millimeters (mm).\n  Click the Design Layers tab and select the BEGIN LAYER (see Figure 3). Choose a Geometry of Rectangle and enter the width and height (found in the component data sheet) of a single pad.\n      Figure 3: Layers tab with BEGIN LAYER and Rectangle Pad selected     Save the padstack in the same location as your custom symbols. The following folder is the default:\n  C:\\Program Files\\Cadence\\SPB_17.2\\share\\pcb\\pcb_lib\\symbols Repeat steps 1 - 5 for any additional different pads in your component. You do not need to recreate the same pad if it is used multiple times in a single footprint.  How do you create a custom SMD footprint manually in Cadence?  Open PCB Editor and create a \u0026ldquo;New Drawing\u0026rdquo;. Name the drawing after the package name, and set the \u0026ldquo;Drawing Type\u0026rdquo; to Package symbol (see Figure 4). Click OK.        Figure 4: New Drawing dialog box   Select the Color / Visibility tab under display (see Figure 5) to adjust the footprint colors to contrast against the black background (see Figure 6).        Figure 5: Color/Visibility selection         Figure 6: Color Dialog with all subclasses set to white for better contrast    In the Color selection, select white and double-click on the white box beside the All subclass to set all of the subclasses to white (see Figure 6). Click OK.\n  Choose Setup \u0026gt; Grids\u0026hellip; to adjust the grid layout and spacing. In the Define Grid dialog, check the \u0026ldquo;Grids On\u0026rdquo; checkbox, enter 0.1 for the Spacing in both the x and y dimensions, and click OK (see Figure 7).\n      Figure 7: Define Grid dialog     Place an origin mark by going to Setup \u0026gt; Change Drawing Origin (see Figure 8)\n      Figure 8: Changing the location of the drawing origin     Choose Layout \u0026gt; Pins and click on the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen (see Figure 9).\n      Figure 9: Options tab for the Pin layout tool     Click the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to \u0026ldquo;Padstack\u0026rdquo; and select the padstack that you made in the first part of this tutorial.\n  Determine an origin for your footprint based on the measurements in the datasheet. For the MCH3382, the origin will be where the vertical and horizontal measurement lines intersect in the bottom center of the footprint (see Figure 10).\n      Figure 10: Recommended soldering footprint for MCH3382 Power MOSFET     In the Command window at the bottom of the screen, type x -65 0 to place the first pad to the left of the origin. Type x 65 0 to place the second pad to the right of the origin, and x 0 210 to place the third pad above.\n  Next, add a box around the footprint so that it is clear the pads are related when laying out the printed circuit board. Select the Rectangle tool in the toolbar, and click the Options tab on the right side of the screen. Set the \u0026ldquo;Active Class and Subclass\u0026rdquo; to Package Geometry and Assembly_Top, respectively.\n  In the Command window at the bottom of the screen, type x -80 0 and press return to place the left corner of the box. Then, type x 80 210 to place the top right corner of the box. Right-click and select \u0026ldquo;Done\u0026rdquo;. The footprint should now look like Figure 11.\n      Figure 11: Footprint after adding pads     Next, we need to add a reference designator that will be visible in the PCB layout. Choose Layout \u0026gt; Labels \u0026gt; RefDes. Select the center of the component and type \u0026ldquo;U?\u0026rdquo;. Right-click and select \u0026ldquo;Done\u0026rdquo;. The footprint should now look like Figure 12.\n      Figure 12: Footprint after adding reference designator     Save and close PCB Editor. You have successfully made a custom SMD footprint!\n  Based on a tutorial by Aaron Dolgin, updated by Sheena Benson (2/2020)\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-smd-footprint-manually-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom SMD footprint manually in Cadence"},{"categories":null,"contents":"What is a ground plane? A ground plane is a large area of copper in a printed circuit board design that is connected to ground on the power supply.\nWhat are advantages of having a ground plane in your PCB layout?  Simpler circuit layout. All components with ground connections will automatically connect to the ground plane, rather than separate traces. Since most of your components will need to be connected to ground, this is a significant advantage. Larger current capacity. Ground planes are typically larger in area than typical PCB traces, meaning they can conduct larger return currents. This means that the ground potential across different parts of your circuit will be more similar and stable. Less electrical noise. When a digital component changes states (high -\u0026gt; low or low -\u0026gt; high), it creates electrical noise that travels throughout the circuit. Since ground planes have very low impedance, they \u0026ldquo;absorb\u0026rdquo; the electrical switching noise more effectively. Separate analog and digital grounds. For some (e.g., audio) circuits, it is necessary to have separate analog and digital grounds. With ground planes, you can make one layer of the board an analog ground plane and the other layer a digital ground plane, and connect them at a single point to minimize the effects of digital switching noise on the analog circuitry.  What are disadvantages of having a ground plane in your PCB layout?  All traces and continuity must be carefully checked with a digital multimeter (DMM) before applying power to the board for the first time. (This is required even if you do not use a ground plane, but is even more important if you do.) When soldering and testing PCBs, ground planes make it extremely easy to accidentally short traces to ground. If the PCB manufacturing process leaves any extra copper behind (e.g., from milling), a power or signal trace may be connected directly to ground and short out components or power supplies when powering up the board. A DMM or oscilloscope probe can short a trace or component if the probe touches the powered trace and the ground plane simultaneously. Applying solder mask to the PCB will reduce (but not eliminate) this possibility. Sometimes, \u0026ldquo;ground islands\u0026rdquo; are created where a part of the ground plane is isolated from the rest of the circuit. A fix for this problem is described later in this tutorial.  How do you create a ground plane in an existing PCB layout?  Start with a PCB layout that has a board layout, all components placed, and all traces routed except the ground traces (see example with ground traces in blue, Figure 1). As you can see, routing all of the ground traces in the example below would add a lot of complexity, so adding a ground plane is a good design option.        Figure 1: Example PCB layout with un-routed ground traces in blue    In the toolbar, click on the Add Rectangle tool (see Figure 2) and select the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen (see Figure 3). Do not draw a rectangle yet.\n      Figure 2: Add rectangle tool         Figure 3: Options tab for the Add Rectangle tool     In the Options tab, click on the \u0026ldquo;\u0026hellip;\u0026rdquo; button (see Figure 4) near \u0026ldquo;Assign net name\u0026rdquo; and choose your ground net (see Figure 5). Click OK to close the \u0026ldquo;Select a net\u0026rdquo; dialog box.\n      Figure 4: ... button to assign ground net name         Figure 5: \u0026amp;ldquo;Select a net\u0026amp;rdquo; dialog box     Draw a rectangle around all of the placed components. If the above steps were completed correctly, the blue rats nest connections should disappear and ground pins electrically connected to the ground plane (see example, Figure 6).\n      Figure 6: Ground rectangle placed   Figures 7 and 8 below show closeups \u0026ldquo;before ground plane\u0026rdquo; and \u0026ldquo;after ground plane\u0026rdquo; connections.\n      Figure 7: Closeup of board design before ground plane         Figure 8: Closeup of board design after ground plane   As you can see in Figure 8 above, the connections between the ground pins and the ground plane are very small (5 mils), making them a potential point of unreliability or failure in the design. Connections to power and ground should be a minimum of 20 mils, or larger if using higher currents (use a trace width calculator to determine the minimum size).\n  To increase the size of the connections between pins and the ground plane, choose Shape \u0026gt; Global Dynamic Params\u0026hellip; (see Figure 9).\n      Figure 9: Global Dynamic Parameters menu option     Select the \u0026ldquo;Clearances\u0026rdquo; tab (see Figure 10) and update the oversize values to a larger number (20 mils or greater) to make the design easier to manufacture and test.\n      Figure 10: Clearances tab with updated oversize clearance values     Select the \u0026ldquo;Thermal relief connects\u0026rdquo; tab (see Figure 11) and update the thermal width to a larger number (20 mils, or greater for higher currents). Click \u0026ldquo;OK\u0026rdquo; to apply the changes.\n      Figure 11: Thermal relief connects tab with updated thermal width   Figures 12 and 13 below show closeups before and after the changes to the global dynamic parameters. Note that changes are applied to the entire design, not just a single pad.\n      Figure 12: Example pad before global dynamic parameters adjustments         Figure 13: Example pad after global dynamic parameters adjustments     How do I find and eliminate ground islands? A \u0026ldquo;ground island\u0026rdquo; is a section of a ground plane that is isolated from the rest of the circuit. Ground islands can often be discovered through careful examination of a design with a ground plane, noticing where a rats nest wire still exists (see example, Figure 14).\n      Figure 14: Example \u0026amp;ldquo;ground island\u0026amp;rdquo;   A ground island can be fixed by adding a via between the ground island and the remainder of the ground plane (see example, Figure 15).\n      Figure 15: Repaired ground island         Figure 16: Completed PCB design with ground plane   What is a void, rubout, or anti-etch and when do I use one? A void, rubout, or anti-etch is a place where the copper is fully removed from the PCB. A common use of rubouts is underneath Bluetooth or Wifi antennas (e.g., from a Photon or Argon) as having a ground plane underneath an antenna will effectively shield RF waves from reaching the antenna. At best this will mean reduced range for a wireless device, and at worst it will mean that the device will not connect wirelessly.\nHow do I create a rubout in Cadence?    First, make sure you have placed all of the components on your PCB (and ideally have not started routing traces yet, though this can still be done even if you have routed traces).\n  Choose Shape \u0026gt; Manual Void/Cavity and choose a shape of your liking (see Figure 17).\n        Figure 17: Anti-etch selection   Draw an anti-etch on the appropriate layer(s) in appropriate place(s) (e.g., underneath an antenna). If there are existing races or vias in the area of the anti-etch, you will need to move them. If you have ground (or power) planes on multiple layers, you should place an anti-etch on each of the copper layers (e.g., TOP and BOTTOM). See example in Figure 18.        Figure 18: Anti-etch example under a PSoC® 5 footprint   To delete an anti-etch, you need to use the special delete tool in the Manual Void/Cavity menu (see Figure 19).        Figure 19: Delete tool for manual void/cavity   When generating your final Gerber files, you will need to add these anti-etches to the layers in the Artwork Control Form in order for them to be manufactured (see How do I export Gerber files from Cadence?).  Additional Resources  Tutorial on Split Planes from parsysEDA Based on a tutorial by Cody Van Cleve and updated by Jacob Lara in 2020.*  ","permalink":"https://embedded-systems-design.github.io/creating-a-ground-plane-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Creating a Ground Plane in Cadence PCB Editor"},{"categories":null,"contents":"Creating a new project in Cadence\n  In Windows, open the Design Entry CIS program. This program allows you to edit schematics, and will be used to export a netlist describing your schematic into the PCB Editor.\n  Choose \u0026ldquo;New \u0026gt; Project\u0026hellip;\u0026rdquo; (see Figure 1), type a name for the project and choose a place to save your project files. Since we will not be simulating the circuit in this tutorial, leave \u0026ldquo;Enable PSpice Simulation\u0026rdquo; unselected and click OK (see Figure 2). WARNING: Do not use spaces or non-alphanumeric characters in the file name for your project.\n      Figure 1: New Project menu         Figure 2: Making a New Project     You may need to add an existing library in order to use Cadence\u0026rsquo;s built-in schematic symbols or custom parts you have previously created. While the option to add libraries directly from the New Part dialog no longer exists in Cadence 17.4, adding a library can be done immediately after the new project has been created:\nFirst, click on the Add Part button (which looks like an integrated circuit with a green plus sign) on the toolbar (see Figure 3)\n      Figure 3: Toolbar with Add Part button   Second, click the Add Library button (which looks like a stack of books with a green plus sign on the bottom right hand corner) in the Place Part dialog box (see Figure 4)\n      Figure 4: Place Part dialog box   Finally, select all of the files in the library folder and click Open (see Figure 5)\n      Figure 5: Browse File dialog box to add libraries   The default location where library files are stored should be similar to: C:\\Cadence\\SPB_17.4-silent\\tools\\capture\\library\\\n  If you plan to use any schematic symbols not built into Cadence, it is a good idea to create a custom library in which to store the symbols. Further instructions are available on the Creating a Custom Library in Cadence page.\n  Video Walkthrough ","permalink":"https://embedded-systems-design.github.io/creating-a-new-project-in-cadence/","tags":null,"title":"Creating a new project in Cadence"},{"categories":null,"contents":"You can try to find existing footprints for components, but most components will require custom footprints.\nIf you are not able to find an existing footprint for a component, then you will need to make a custom footprint. In order to make a custom footprint, you will need a datasheet for the component that includes mechanical dimensions of the component and footprint.\nThe process for creating a footprint is as follows:\nCreate a custom padstack for the component. A padstack is a design for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered.\nCreate a custom footprint for the component. There are two ways to do this:\n Creating a custom footprint using Package Designer - useful for symmetric ICs (e.g., microcontrollers). Does not work well for parts that have mechanical or thermal pads or non-symmetric packages (e.g., voltage regulators or MOSFETs) Creating a custom footprint manually / creating a custom SMD footprint manually  Update the library search path in Design Entry CIS\nUpdate the library search path in PCB Editor\n Figure 1: Video walkthrough of creating a custom footprint (by Ryan Sparks, 2020)\n","permalink":"https://embedded-systems-design.github.io/creating-custom-footprints/","tags":["cadence","pcb"],"title":"Creating Custom Footprints"},{"categories":null,"contents":"Watch the video mini-lecture on DC motor control from Dr. Jordan  What types of DC motors are most common?  Brushed DC motors. Current flowing in one direction makes the motor turn one direction, and current flowing in the opposite direction makes the motor turn the opposite direction. Stepper motors - provide absolute position control but require a special controller IC Servo motors - PWM signal controls the position of the motor  How do I connect a brushed DC motor to a microcontroller? DC motors are inductive loads and therefore cannot be directly connected to a microcontroller without damaging the microcontroller. There are two protection mechanisms that go into a successful motor interface:\n Back EMF / flyback diode - protects against current spikes that can damage a microcontroller. Use \u0026ldquo;rectifier\u0026rdquo; diodes (e.g., 1N400x series) H-bridge - switches current on or off to the motor, and changes the direction of the motor  The LMD18200 is a common off-the-shelf H-Bridge IC.\nHow do I change the speed of the motor? Generate a Pulse Width Modulation (PWM) signal from your microcontroller and use it to control the H-bridge.\nHow does a stepper motor work? See the excellent animated GIFs in the Stepper motor entry on Wikipedia\nHow do I connect a stepper motor to a microcontroller? Use an off-the-shelf driver IC instead of trying to build your own driver. The DRV8825 is a common stepper motor control chip.\n","permalink":"https://embedded-systems-design.github.io/dc-motors-101/","tags":["circuits","actuator","motor"],"title":"DC Motors 101"},{"categories":null,"contents":"What is drawing software used for? Drawing software is used to create diagrams for inclusion in presentations and reports.\n   Title Description Availability     Inkscape Recommended . Open source drawing program which can produce professional vector drawings in many formats Open source   Draw.Io Recommended. Add-on to google drive documents, free http://draw.io   Google Drawings Recommended . Cloud-based collaborative diagramming app available in Google Drive   LucidChart cloud-based collaborative diagramming app ASU has a site license if you use your ASU google account. Or get an Education Account   Visio Vector-based drawing program Available for download here via Microsoft OnTheHub (formerly Dreamspark). Microsoft Visio 2013 Viewer available from Microsoft   Powerpoint Recommended . Can save Drawings as .png Can be purchased as part of Office Suite. Also available on ASU computers   Adobe Illustrator Professional Vector-based Drawing Software. Available on some ASU lab computers, or for purchase / subscription   Draftsight Free AutoCAD clone, for dxf/dwg editing only Free here , requires registering   CorelDraw Professional Vector-based Drawing Software Available in Innovation Hub (for laser cutting). Must be purchased otherwise.    ","permalink":"https://embedded-systems-design.github.io/drawing-software/","tags":["asu","software","drawing"],"title":"Drawing Software"},{"categories":null,"contents":"What is a Gerber file? A Gerber file (also known as artwork) is a 2-D graphical representation of a single layer of a PCB. A typical design will have individual Gerber files for each layer (e.g., top copper, bottom copper, top silkscreen, bottom silkscreen, top soldermask, bottom soldermask) of a PCB.\nWhat is a drill file? A drill file (also known as a NC Drill file) stores both the specific sizes and types of drill bits that will be used in manufacturing a PCB in addition to the specific coordinate locations where each hole must be drilled. Our equipment uses files that are in Excellon format.\nYou need both Gerber files for each layer and a single drill file in order to successfully submit your design for manufacturing.\nHow do I export Gerber files from Cadence?   Open your PCB layout in Allegro PCB Designer\n  Choose \u0026ldquo;Manufacture \u0026gt; Artwork\u0026hellip;\u0026rdquo; The Artwork Control Form window (see Figure 1) appears.\n      Figure 1: Artwork window     Next, a board outline must be added. Right-click on the TOP folder and choose \u0026ldquo;Add Manual\u0026rdquo; (see Figure 2).\n      Figure 2: Right-click on TOP and choose \u0026amp;ldquo;Add Manual\u0026amp;rdquo;     Enter a film name of OUTLINE and click \u0026ldquo;OK\u0026rdquo; (see Figure 3).\n      Figure 3: Film Name window     Expand OUTLINE folder and right click on \u0026ldquo;BOARD GEOMETRY/DESIGN_OUTLINE\u0026rdquo; and select add.\n      Figure 3.5: Subclass Selection window     In the Subclass Selection window (see Figure 4), expand the BOARD GEOMETRY folder and check the box next to DESIGN_OUTLINE. Click \u0026ldquo;OK\u0026rdquo;.\n      Figure 4: Subclass Selection window     Select the OUTLINE checkbox (see Figure 5). Make sure in Film options that \u0026ldquo;Film name: DESIGN_OUTLINE\u0026rdquo; appears (if it does not, select the OUTLINE checkbox again). Set the Undefined line width to 0.1.\n      Figure 5: Artwork Control Form     If you have an anti-etch (rubout), you will need to add it to the layer that you put it on. Click on the down arrow under the layer folder(s) that you added it too. Then, right-click on the items in the folder and select Add (see Figure 6).\n      Figure 6: Add anti-etch layer     Then, expand the anti-etch subclass folder and select the box next to the layer you are adding it to (see Figure 7). Repeat this process for each layer that you have an anti-etch on.\n      Figure 7: Adding the anti-etch layer to the top     Click the \u0026ldquo;Select all\u0026rdquo; button to output all of the layers\n  Click \u0026ldquo;Create Artwork\u0026rdquo; to export the Gerber files\n  Click \u0026ldquo;OK\u0026rdquo; to return to the layout\n  How do I export solder mask files from Cadence? See the Exporting Solder Mask Layers from Cadence PCB Editor tutorial\nHow do I export drill files from Cadence?   Open your PCB layout in Allegro PCB Designer\n  Choose \u0026ldquo;Manufacture \u0026gt; NC \u0026gt; NC Drill\u0026hellip;\u0026rdquo; The NC Drill window (see Figure 6) appears.\n      Figure 6: NC Drill window     Click \u0026ldquo;Parameters\u0026hellip;\u0026rdquo; The Parameters window (see Figure 7) appears.\n      Figure 7: NC Parameters window     Select \u0026ldquo;Enhanced Excellon format\u0026rdquo; and click \u0026ldquo;Close\u0026rdquo;\n  Name the drill file and save it in the same directory as your project\n  Select \u0026ldquo;Auto tool select\u0026rdquo; and \u0026ldquo;Repeat codes\u0026rdquo;\n  Click \u0026ldquo;Drill\u0026rdquo; to export the drill file\n  Click \u0026ldquo;Close\u0026rdquo; to return to the layout\n  ","permalink":"https://embedded-systems-design.github.io/exporting-gerber-files-from-cadence-pcb-editor/","tags":["tutorial","footprint","cadence","pcb"],"title":"Exporting Gerber files from Cadence PCB Editor"},{"categories":null,"contents":"What is a solder mask? Solder mask is the thin polymer layer that is applied to a printed circuit board to insulate copper traces from unwanted connections. It is often green, red, or blue, and is put over all parts of a PCB except where components are to be soldered.\nHow do you create a solder mask layer in PCB Editor?   Export TOP, BOTTOM, and OUTLINE Gerber files for your design (see Exporting Gerber Files from Cadence).\n  In PCB Editor, open your completed design and choose Manufacture \u0026gt; Artwork\u0026hellip; (see Figure 1). The \u0026ldquo;Artwork Control Form\u0026rdquo; will open (see Figure 2).\n      Figure 1: Manufacture \u0026amp;gt; Artwork\u0026amp;hellip; menu option         Figure 2: Artwork Control Form     Right-click on any of the folders in the \u0026ldquo;Available films\u0026rdquo; section and select \u0026ldquo;Add Manual\u0026rdquo; (see Figure 3). The film naming dialog box will appear (see Figure 4).\n      Figure 3: Add Manual contextual menu option     In the film naming dialog box, name the new film name SoldermaskTop (or something similar, see Figure 4) and click OK. The \u0026ldquo;Subclass Selection\u0026rdquo; dialog box will appear (see Figures 5, 6, and 7).\n      Figure 4: Film naming dialog box     In the \u0026ldquo;Subclass Selection\u0026rdquo; dialog box, expand the DRC ERROR CLASS, PIN, and VIA CLASS folders and check the box next to SOLDERMASK_TOP in each folder (See Figures 5, 6, and 7). Click OK.\n      Figure 5: DRC ERROR CLASS         Figure 6: PIN         Figure 7: VIA CLASS     In \u0026ldquo;Artwork Control Form\u0026rdquo;, ensure that \u0026ldquo;Film name\u0026rdquo; is SoldermaskTop and \u0026ldquo;Undefined line width\u0026rdquo; is 0.01 (see Figure 8).\n      Figure 8: Film name and undefined line width options     Repeat steps 3 - 6 to create a solder mask for the bottom layer, if desired.\n  Under \u0026ldquo;Available films\u0026rdquo;, select both the SoldermaskTop and SoldermaskBottom and click \u0026ldquo;Create Artwork\u0026rdquo;.\n  If successful, you will see the message in Figure 9.\n      Figure 9: Success!     Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/exporting-solder-mask-layers-from-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Exporting Solder Mask Layers from Cadence PCB Editor"},{"categories":null,"contents":"Where can I find a list of existing PCB footprints for Cadence PCB Editor? While Cadence does have some built-in footprint libraries, they are limited due to the hundreds of thousands of different parts in existence. Additionally, most companies make their own footprints to match the specific manufacturing processes that they use.\nIn most cases, it is easier and faster to build your own custom footprints for all components. However, there are some built-in libraries that can be found in the following directory:\nC:\\Cadence\\SPB_17.4-silent\\share\\pcb\\pcb_lib\\symbols Within this folder, you can double-click on the .dra files to see footprints and the .pad files to see padstacks in PCB Editor.\nAdditionally, there is a footprints document that will show you most of the footprints that exist in the library.\nWhat are the most commonly used built-in padstacks? There are a number of useful built-in through-hole padstacks located in:\nC:\\Cadence\\SPB_17.4-silent\\share\\pcb\\pcb_lib\\symbols that follow the naming convention:\npad(number1)(circle/square)(number2)d where\n \u0026ldquo;number1\u0026rdquo; is the outer diameter of the copper ring outlining the pad (see Figure 1, blue ring), \u0026ldquo;circle/square\u0026rdquo; is the shape of the pad (cir is most common for this class), \u0026ldquo;number2\u0026rdquo; is the diameter of the hole in the center of the pad (see Figure 1, red circle)        Figure 1: Example through-hole Padstack, where the blue ring is copper and the red is the hole   For example, pad93cir56d.pad is a padstack with an outer copper ring diameter of 93 mils (not mm), and a center hole diameter of 56 mils.\nFor surface-mount padstacks, it is easiest to make your own using the Padstack Editor application.\nWhat are the most commonly used built-in footprints? First, look in the manufacturer\u0026rsquo;s datasheet for each component and identify the package type and footprint dimensions. Package type information is typically near the beginning or end of the datasheet. Footprint dimensions are typically near the end of the datasheet.\nOnce you have identified the package type and footprint dimensions, there are a number of useful built-in through-hole and surface mount footprints located in:\nC:\\Cadence\\SPB_17.4-silent\\share\\pcb\\pcb_lib\\symbols Capacitors (through-hole)  cap196 - cylindrical vertical-mount capacitor (e.g., electrolytic, tantalum) with 100-mil center-to-center spacing between pins cap300 - circular flat or rectangular vertical-mount capacitor (e.g., ceramic, film) with 300-mil center-to-center spacing between pins cap400 - axial horizontal-mount capacitor with 400-mil center-to-center spacing between pins cap600 - axial horizontal-mount capacitor with 600-mil center-to-center spacing between pins cap1000 - axial horizontal-mount capacitor with 1000-mil center-to-center spacing between pins cap1500 - axial horizontal-mount capacitor with 1500-mil center-to-center spacing between pins  Capacitors (surface mount)  smc0805 - rectangular surface mount capacitor of size 0805 (0.08\u0026quot; x 0.05\u0026quot;) smc1206 - rectangular surface mount capacitor of size 1206 (0.12\u0026quot; x 0.06\u0026quot;) smc1210 - rectangular surface mount capacitor of size 1210 (0.12\u0026quot; x 0.10\u0026quot;)  smc1812 - rectangular surface mount capacitor of size 1812 (0.18\u0026quot; x 0.12\u0026quot;)  Diodes, inductors, resistors, and other axial-lead components (through-hole, horizontal mount)  res400 - resistor with a 400-mil center-to-center spacing between holes res500 - resistor with a 500-mil center-to-center spacing between holes res600 - resistor with a 600-mil center-to-center spacing between holes res800 - resistor with a 800-mil center-to-center spacing between holes res1000 - resistor with a 1000-mil center-to-center spacing between holes  Headers and Jumpers (through hole)  jumper1 - 1-pin header jumper2 - 2-pin header with 100-mil center-to-center spacing between pins jumper3 - 3-pin single-row header with 100-mil center-to-center spacing between pins jumper4 - 4-pin single-row header with 100-mil center-to-center spacing between pins jumper5 - 5-pin single-row header with 100-mil center-to-center spacing between pins jumper8 - 8-pin (4x2) double-row header with 100-mil center-to-center spacing between pins jumper14 - 14-pin (7x2) double-row header with 100-mil center-to-center spacing between pins jumper16 - 16-pin (8x2) double-row header with 100-mil center-to-center spacing between pins  Resistors (surface mount)  smr0805 - rectangular surface mount resistor of size 0805 (0.08\u0026quot; x 0.05\u0026quot;) smr1206 - rectangular surface mount resistor of size 1206 (0.12\u0026quot; x 0.06\u0026quot;) smr1210 - rectangular surface mount resistor of size 1210 (0.12\u0026quot; x 0.10\u0026quot;)  smr2010 - rectangular surface mount resistor of size 2010 (0.20\u0026quot; x 0.10\u0026quot;) smr2512 - rectangular surface mount resistor of size 2512 (0.25\u0026quot; x 0.12\u0026quot;)  Test Points (used to provide easy access for a multimeter or oscilloscope probe) (through hole)  tp1 - square pad with round hole in the middle  Transistor Outline (TO) Package Types (through hole)  to(number), where \u0026ldquo;number\u0026rdquo; is the number of the specific to case style from the component data sheet (e.g., a transistor with a to92 package type)  If your package type and footprint dimensions do not match one of those listed above, then you must create your own custom footprint.\n","permalink":"https://embedded-systems-design.github.io/finding-existing-pcb-footprints-for-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Finding existing PCB footprints for Cadence PCB Editor"},{"categories":null,"contents":"Once you know the types of components that you need for your project, the next step is to find sources/vendors from which you can purchase the components (also known as sourcing parts). Follow the process below to source parts:\n  Check the PRLTA 103 Component Catalog spreadsheet and the parts drawers in PRLTA 103 to see if we have a similar part in stock. Parts in PRLTA 103 do not count toward your prototype budget.\n  For integrated circuits (ICs), sensors, and actuators, go to the manufacturer\u0026rsquo;s website and see if they offer free samples online. If you can\u0026rsquo;t order them online, call the company\u0026rsquo;s sales line and ask \u0026ndash; companies are often more than happy to give you free parts so that you remember their company after graduation.\n  Check to see if a compatible part is in stock at one of our preferred vendors. Even if you can find parts for a lower cost on other sites, it\u0026rsquo;s better to order from one of our preferred vendors because of our university discount and streamlined ordering process.\n  ASU Preferred Vendors:\n Grainger McMaster-Carr MSC Industrial Newark Staples  If the part you need is not available in stock from the above sources, you may order from other suppliers. However, the university will not place an order unless the cost of the parts exceeds the cost of shipping, so please try and minimize the number of vendors that you order from to keep our costs down.  Other Vendors to Consider:\n Adafruit All Electronics Digi-Key Harbor Freight Tools Hobby Engineering Jameco Electronics Microchip Mouser Electronics NewEgg Parallax Robot Mesh RobotShop SparkFun Electronics  Finally, DO NOT ORDER FROM:   AliExpress AliBaba Rakuten Amazon (without prior written instructor approval)  ","permalink":"https://embedded-systems-design.github.io/from-where-can-i-source-parts/","tags":["components","asu","ordering","parts","process","purchasing","suppliers","sourcing"],"title":"From where can I source parts?"},{"categories":null,"contents":"What are fuses and when do I need them? A fuse is an electronic component that protects a circuit by creating an open circuit if it draws too much current. **Fuses do not protect against voltages that are too high. **\nFuses are most useful around power supplies, both when power comes into a system and on individual power rails. For example, if you have a 12V rail that should only draw 750 mA and a 5V rail that should only draw 400 mA, you might put a 750 mA fuse in series with the 12V supply output and a 500 mA fuse in series with the 5V supply output.\nA common mistake that fuses protect against is accidentally shorting the power rail to ground (e.g., with a DMM probe as you are trying to touch the correct pins). This causes an infinite amount of power to be drawn from the power supply, and can sometimes damage or destroy voltage regulators or power supplies.\nWhat are the most common types of fuses? Standard fuses contain a small piece of wire made of an alloy that melts readily. If the current gets too high, it burns out and opens the circuit. Standard fuses come in many different shapes and sizes.\n Advantages: Inexpensive, replaceable Disadvantages: Must be replaced when blown, sometimes no visual indication that they are blown Examples from Littelfuse  Resettable PTC fuses are tripped by heat caused by current above the rating of the fuse. If the current flowing through the fuse goes above its rating, the fuse changes from having very low resistance to having a high resistance (thereby stopping the flow of current through the circuit). It is self-resetting after power is removed and the fuse cools.\n Advantages: Reusable, useful when cause of overcurrent is a user failure (e.g., plugging a connector into the wrong pins on a PCB) Disadvantages: More expensive than standard fuses, small leakage current after breaking, significantly lower voltage ratings (60V) compared with non-resettable fuses (600V) Examples from Littelfuse  Circuit breakers are typically used in AC power applications like homes.\n Advantages: Reusable and easy to reset by hand. This reduces downtime and repair costs. Easy-to-see indication of whether the circuit breaker is tripped. Useable as an on-off switch. Disadvantages: Very expensive, not well suited for low-voltage DC applications  ","permalink":"https://embedded-systems-design.github.io/fuses-101/","tags":["components"],"title":"Fuses 101"},{"categories":null,"contents":"What is a printed circuit board (PCB)? See the What is a Printed Circuit Board? page for more information about PCBs and the general design flow for creating a PCB.\nWhat is Cadence PCB Editor? Cadence PCB Editor is an electronic CAD (ECAD) program that takes a netlist created by Cadence Schematic Capture and provides you a software environment to design a PCB. A netlist is a file that describes interconnections among components in a circuit. Read the short Cadence (Allegro) PCB Designer Datasheet for an overview of the software and its features.\nVideo Walkthrough (Cadence 16.6)  How do I launch Cadence to create a PCB? In Windows, launch \u0026ldquo;PCB Editor\u0026rdquo;.\nThis program is also called \u0026ldquo;Allegro PCB Designer (was Performance L)\u0026rdquo; and \u0026ldquo;Allegro PCB Design L (legacy)\u0026rdquo;. These programs are all equivalent.\nHow do I transfer a design from Design Entry CIS to PCB Editor? See the Transferring a Cadence Schematic to PCB Editor page.\nHow do I create a PCB layout in PCB Editor?  Create a board outline Change the library search path to point to the footprints folder Place the components into the design Route traces on the PCB Follow the ASU PCB Fabrication Process  Misc Globally changing trace widths: \u0026lt;altering-trace-widths.html\u0026gt;\nGlobally changing vias: TBD\nAdditional Resources  Introduction to the PCB Design Flow by Example - Chapter 2 in the Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner  ","permalink":"https://embedded-systems-design.github.io/getting-started-with-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Getting Started with Cadence PCB Editor"},{"categories":null,"contents":"What is a House of Quality, and what is it used for? The House of Quality diagram is used to translate customer requirements, market research, patent benchmarking, and technical benchmarking into product capabilities that can be targeted in a new product design. It is an integral component of the Quality Function Deployment (QFD) method for translating qualitative user needs into quantitative requirements.\n Gupta, P. (2001). The house that quality built. Printed Circuit Fabrication, 24(12), 47-48.  How do I build a House of Quality?  House of Quality Interactive Tutorial from Antony Lowe Quality Function Deployment (QFD) and House of Quality video from MIT Open Courseware House of Quality roof diagram video from EGR 202 (start at 6:50)  Where can I find House of Quality templates?  Free House of Quality (QFD) Templates from QFD Online  Where can I find House of Quality examples?  Criteria Correlation Matrix example from EGR 202  ","permalink":"https://embedded-systems-design.github.io/house-of-quality/","tags":["problem definition"],"title":"House of Quality"},{"categories":null,"contents":"Introduction This tutorial goes through how to save CIS schematics and PCB layers as a PDF.\n  First, configure Microsoft Print to PDF to print to a file\n  packaging-cadence-files-for-submission.html\n  Saving a Cadence Schematic as a PDF\n  Open your schematic in Capture CIS.\n  Choose File \u0026gt; Print.. (see figure 1) and then click OK (see figure 2). Note: Do not \u0026ldquo;Export as PDF\u0026rdquo; for capture CIS\n      Figure 1: Capture CIS print location.        Figure 2: Print settings page for Capture CIS.     Choose where to save PDF.\n    Saving layers in PCB editor as a PDF\n  Open your layout in PCB editor.\n  Choose File \u0026gt; Export to PDF.. (see figure 3).\n      Figure 3: PCB editor export to PDF location.     Select layers or \u0026ldquo;films\u0026rdquo; you want to show up in the PDF (See figure 4).\n      Figure 4: PDF export confirmation screen.     Select export to save the PDF of your selected layers.\n    ","permalink":"https://embedded-systems-design.github.io/how-to-export-a-pdf-from-capture-and-pcb-editor/","tags":["ecad","tutorial","cadence","documentation","drawing"],"title":"How to export a PDF from Capture and PCB Editor"},{"categories":null,"contents":"In order to program a Cypress Programmable System on a Chip (PSoC®), you first need to install Integrated Development Environment (IDE) software on your computer. An IDE is program that you install on a computer to support the development of software for a particular hardware platform. It typically includes a text editor for editing source code, a compiler to covert source code into machine code, and a debugger for helping to identify the source of errors in source code.\nThere are two primary free IDEs available to program on the PSoC® platform. Both will only run on Windows, but will run on a Mac running Windows via Bootcamp or Parallels.\n PSoC® Creatorâ„¢. This IDE is the simplest to get started with PSoC®.   Download it here (requires the creation of a free account). Training is available here.  PSoC® Designer. This IDE allows lower-level configuration of the PSoC® hardware. It is recommended for advanced applications only.  Download it here (requires the creation of a free account). Training is available here.  ","permalink":"https://embedded-systems-design.github.io/integrated-development-environments-for-psoc/","tags":["cypress","programming","microcontroller","software"],"title":"Integrated Development Environments for PSoC"},{"categories":null,"contents":"What is an interrupt? Consider the following knock-knock joke:\n      Figure 1   Joker: \u0026ldquo;Knock, knock\u0026rdquo;\nInnocent Person: \u0026ldquo;Who\u0026rsquo;s there?\u0026rdquo;\nJoker: \u0026ldquo;Interrupting cow\u0026rdquo;\nInnocent Person: \u0026ldquo;Interrupting co\u0026hellip;\u0026rdquo;\nJoker: \u0026ldquo;Mooooo\u0026rdquo; (while the innocent person is responding)\nWe started this discussion of interrupts with a knock knock joke because it captures the essence of what an interrupt is in an embedded system. Consider the main loop of the program as the \u0026ldquo;Innocent Person\u0026rdquo; and the event (e.g., sensor) as the \u0026ldquo;Joker\u0026rdquo;. The Joker causes the normal routine of the knock knock joke to be broken by the event of the punchline delivery (interrupt).\nWhen an event in a system triggers an interrupt, the program momentarily breaks from whatever it is currently doing in the main loop, executes code in an interrupt service routine, and returns to the place where it left off in the main loop. Since most microcontrollers can only handle one software task at a time, using interrupts allows multiple things to be monitored at the same time.\nWhat is an interrupt service routine? An interrupt service routine (abbreviated ISR) is the separate program code that is executed after an interrupt is triggered. It is similar to calling a function (except that the calling mechanism is by interrupt, rather than explicit call in the code).\nWhat are the different types of interrupts?  Internal interrupt. Internal interrupts are created internally by the microcontroller. For example, when the UART receives a byte from an external sensor, it could trigger an interrupt. External interrupt. External interrupts are created externally to the microcontroller and are usually associated with external interrupt pins. For example, a button could be attached to a microcontroller pin and when the pin changes state, an interrupt could be triggered.  How does interrupt priority work? Since interrupts can happen at nearly any time, there is a possibility that interrupts from two or more different sources can be generated at the same time. If the microcontroller finds pending interrupts from multiple different sources, it will use the programmer-assigned priorities for each interrupt source to determine which interrupt service routine to run first. Once the first interrupt is serviced, additional interrupts will be serviced in priority order.\nHow do I create a UML diagram for an interrupt service routine? An example UML activity diagram for an interrupt-based system is shown in Figure 1 below.\n      Figure   For more information on UML, please see the What is Unified Modeling Languageâ„¢ (UML®)? blog post.\nWhat is the general process for enabling interrupts on a microcontroller? Interrupts are typically active in a specific region of code defined by the programmer. Before the region of code where interrupts should be active, interrupts must be enabled (typically one or more lines of code specific to the microcontroller). After the region of code where interrupts should be active, interrupts must be disabled (typically one or more lines of code specific to the microcontroller).\nReferences  https://www.techopedia.com/definition/7772/internal-interrupt https://www.techopedia.com/definition/7115/external-interrupt http://www.scriptoriumdesigns.com/embedded/interrupts.php  Based on a blog entry written by Kevin Nichols\n","permalink":"https://embedded-systems-design.github.io/interrupts/","tags":["microcontroller","software"],"title":"Interrupts"},{"categories":null,"contents":"An interrupt is a signal received by a microcontroller and emitted by hardware or software that is signaling a system event that needs immediate attention. Interrupts are useful to avoid constant monitoring of electronic peripherals (e.g., sensors).\nSpecial care must be taken when using interrupts on the PSoC®. Cypress has published excellent application notes on using interrupts on the PSoC®:\n PSoC® 4 Interrupts from Cypress PSoC® 3 and PSoC 5LP Interrupts from Cypress  ","permalink":"https://embedded-systems-design.github.io/interrupts-on-psoc/","tags":["cypress","microcontroller","documentation"],"title":"Interrupts on PSoC"},{"categories":null,"contents":"Introduction When drawing a schematic, crossing wires can make the schematic difficult to read and follow signals (see example, Figure 1). This tutorial shows several techniques for keeping your schematic tidy.\n      Figure 1: Example of difficult-to-follow schematic   How do I keep my schematic tidy? Technique 1: Lay out parts to avoid crossing wires You can edit the pin layout of a schematic symbol to avoid crossing wires (see Figure 2).\n      Figure 2: Schematic symbol edited to avoid crossing wires   Technique 2: Use Net Aliases Net aliases let you make connections across the schematic without wires. Nets (wires) with the same name are electrically connected.\n      Figure 3: Place net alias tool         Figure 4: Schematic using net aliases   Technique 3: Use Multiple Pages You can also create multi-page schematics and use off-page connectors (similar to net aliases) to make electrical net connections across pages.\nTechnique 4: Boxes and Labeling An excellent way to help make your schematic more readable is to use the box tool and the text tool to section off and label different areas of the schematic. Also, make sure to complete your title block.\n      Figure 5: Example schematic with sections and labels   Based on a tutorial written by Robert Goby. Updated by Zachary Conley.\n","permalink":"https://embedded-systems-design.github.io/keeping-a-schematic-tidy/","tags":["cadence"],"title":"Keeping a Schematic Tidy"},{"categories":null,"contents":"How do I manually route a design in PCB Editor? Your design should have a board outline and components placed, and blue lines (the \u0026ldquo;rats nest\u0026rdquo;) between the components (see example, Figure 1). These blue lines are not traces, but rather points that are connected on your schematic and should be converted to traces in your design.\n      Figure 1: Board outline, components, and rats nest     Click the \u0026ldquo;Add Connect\u0026rdquo; button in the toolbar (see Figure 2)\n      Figure 2: Add Connect button     Go to the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen and change the settings for the trace as necessary (e.g., whether it will be on the top or bottom layer, which via will be used, and the line width) (see Figure 3).\n*Note: *Make sure that your power and ground traces meet the recommended minimums\n      Figure 3: Options tab for Add Connect     Left click on a starting pin to start the trace, and left click on the ending pin to end the trace (see Figures 4 and 5).\nNote: Avoid 90 degree angles when routing traces. They create electro-magnetic radiation that interferes with other circuits.\n      Figure 4: Left click to start a trace         Figure 5: Left click to end a trace     If you need to add a via (a conductive hole from one layer to another, allowing traces to cross on different layers), you can double-left click while you are placing the trace in order to change layers (see Figure 6).\nNote: Vias reduce the reliability of a trace. It is recommended that you minimize the number of vias used in your design.\n      Figure 6: Double-left click to add a via     Continue the above process until all of the rats nest lines are routed (see example, Figure 7). Note that the power and ground traces are larger than the signal traces. This is important for having a fully-functioning design.\n      Figure 7: Example completed PCB design     Note: Manual routing of traces will almost always result in the best possible design. Auto-routing algorithms are notoriously poor and create board designs that are more complex and more difficult to debug.\nAdditional Resources  How to Route Multiple Traces Simultaneously video from EMA Design Automation  Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/manual-routing-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Manual Routing in Cadence PCB Editor"},{"categories":null,"contents":"How do I measure the spacing between pins to make sure my footprint matches the Datasheet? See the How to check your footprints using the OrCAD PCB Editor Measurement tool video\nHow do I measure the size of my PCB?  With your PCB design open, click the Show Measure tool (see Figure 1). Click on any two points (e.g., the corners of the PCB) to measure the distance between those points. Confirm that the measurement is under any manufacturing limits.        Figure 1: Measuring PCB size   ","permalink":"https://embedded-systems-design.github.io/measurement-in-cadence-pcb-editor/","tags":null,"title":"Measurement in Cadence PCB Editor"},{"categories":null,"contents":"What is CAD software used for? Computer Aided Drafting (CAD) software is used to capture and simulate designs electronically. It is commonly used for electrical or mechanical designs.\nWhat free mechanical CAD software is available for me to install on my computer? SolidWorks (recommended) - 3-D CAD package\n Available from Engineering Technical Services eDrawings Viewer available from Solidworks  Microsoft Visio - Vector-based drawing program\n Available from MyApps under Microsoft Imagine Microsoft Visio 2013 Viewer available from Microsoft  Sketchup Make - 3-D modeling program\n Available from Sketchup  What mechanical CAD software is available for me to use on campus computers?  SolidWorks (recommended) - 3-D CAD package Sketchup Pro - 3-D modeling program Adobe Illustrator - Vector-based drawing program  ","permalink":"https://embedded-systems-design.github.io/mechanical-cad-software/","tags":["asu","cad","mechanical"],"title":"Mechanical CAD Software"},{"categories":null,"contents":"What microcontrollers does Atmel specialize in? Atmel was one of the top IC manufacturers that makes a number of 8-bit, 32-bit, and ARM microcontrollers, including the AVR microcontroller used in the Arduino. Microchip purchased Atmel in 2017 and is maintaining the AVR line of microcontrollers. The following is a list of helpful resources for getting started with Microchip AVR microcontrollers.\nHow do I choose an AVR microcontroller?  Use the Microchip Parametric Search Tool to find and select AVR microcontrollers.  What software do I need to install to program an AVR microcontroller?  Atmel Studio Integrated Development Environment (IDE) from Microchip  What hardware do I need to program an AVR microcontroller? Check the manufacturer\u0026rsquo;s web page for the specific microcontroller you are using for specific information on the hardware you need to program it. Some common programmers include:\n AVR Dragon from Microchip Using an Arduino as an AVR In-System Programmer (ISP) from Arduino.cc  What do I need to consider when designing a printed circuit board (PCB) that includes an AVR microcontroller?  Application Note AN2519: AVR Microcontroller Hardware Design Considerations from Microchip  What online forums focus on AVR microcontrollers?  AVR Freaks  Where do I find code examples and tutorials for AVR microcontrollers?  AVR Programming tutorial from hackaday.com  ","permalink":"https://embedded-systems-design.github.io/microchip-avr-microcontrollers/","tags":["programming","microcontroller"],"title":"Microchip AVR Microcontrollers"},{"categories":null,"contents":"What microcontrollers does Microchip specialize in? Microchip specializes in 8-bit, 16-bit, and 32-bit PIC microcontrollers.\nHow do I choose a Microchip microcontroller?  Microchip Advanced Part Selector from Microchip Information about PIC microcontrollers database  What software do I need to install to program a Microchip microcontroller?  MPLAB® X Integrated Development Environment (IDE) from Microchip MPLAB® Code Configurator graphical programming environment from Microchip  What hardware do I need to program a Microchip microcontroller? Check the manufacturer\u0026rsquo;s web page for the specific microcontroller you are using for specific information on the hardware you need to program it.\n PICkit 3 In-Circuit Debugger from Microchip MPLAB ICD 3 In-Circuit Debugger from Microchip  What do I need to consider when designing a printed circuit board (PCB) that includes a Microchip microcontroller? See the microcontroller data sheet for information on PCB layout and external component considerations.\n Compiled Tips \u0026lsquo;N Tricks Guide from Microchip  How do I use MPLAB® X?  Microchip.com  What online forums focus on Microchip microcontrollers?  Microchip Developer Help from Microchip MicrocontrollerBoard.com  Where do I find code examples and tutorials for Microchip microcontrollers?  Code Examples from Microchip PIC Tutorials from Gooligum Electronics (some free)  What resources exist for the PIC16F887 microcontroller?  PIC Microcontrollers by Milan Verle  What resources exist for PIC24 microcontrollers?  PIC24 Tutorial from Engscope  ","permalink":"https://embedded-systems-design.github.io/microchip-pic-microcontrollers/","tags":["programming","microchip","microcontroller","pic"],"title":"Microchip PIC Microcontrollers"},{"categories":null,"contents":"Part I  Part II ","permalink":"https://embedded-systems-design.github.io/oscilloscopes-101/","tags":null,"title":"Oscilloscopes 101"},{"categories":null,"contents":"Introduction This tutorial goes through how to package Cadence schematic and PCB files for submission to Canvas.\nFirst, configure Microsoft Print to PDF to print to a file   In Windows, go to Settings \u0026gt; Devices \u0026gt; Printers \u0026amp; scanners and click on Microsoft Print to PDF. Click Manage and then Printer properties to open the \u0026ldquo;Microsoft Print to PDF Properties\u0026rdquo; window.\n  In the \u0026ldquo;Microsoft Print to PDF Properties\u0026rdquo; window, click the Change Properties button and then click on the Ports tab (see Figure 1). Select the checkbox next to FILE: Print to File and click OK.\n      Figure 1: Microsoft Print to PDF Properties, Ports tab     Packaging a Cadence schematic project for submission to Canvas   Open your schematic project in Capture CIS\nFirst, you will convert your schematic to PDF form.\n  Choose File \u0026gt; Print Setup\u0026hellip; and change the printer setup to \u0026ldquo;Microsoft Print to PDF\u0026rdquo; (or your other preferred method of printing to PDF).\n  Choose File \u0026gt; Print and click OK, saving your PDF to the desktop. If you are trying to expand the printout to fill a C-sized sheet, make sure to indicate that when you submit the PDF for printing to the plotter.\nNext, you will ZIP the folder with your schematic project files.\n  In Windows, find the project folder in which you created and saved your Cadence schematic design (see Figure 2).\n      Figure 2: Example of finding the schematic project folder     Verify that the most important files are in your project folder: (see Figure 3)\n .DSN - Cadence schematic design file .OPJ - Cadence schematic project file .OLB - Cadence schematic library file (only exists if you have a custom library)        Figure 3: Example of Cadence DSN and OPJ files   Note: You may have additional files in this folder, depending on the steps you took during the creation of your schematic. It is OK to leave additional files in the folder.\n  In Windows, right-click on the project folder and choose Send to \u0026gt; Compressed (zipped) folder (see Figure 4).\n      Figure 4: Creating a .zip file in Windows     Move the .zip file to the desktop with the .pdf you created in steps 1 - 4.\n  Submit both the .pdf and the .zip file to the appropriate assignment on Canvas.\n  Packaging a Cadence schematic and PCB project for submission to Canvas   In Windows, open your PCB in PCB Editor\nFirst, you will convert your PCB layout to .jpg form.\n  Choose File \u0026gt; Plot\u0026hellip; Click \u0026ldquo;Setup\u0026hellip;\u0026rdquo; and change the printer to \u0026ldquo;Microsoft Print to PDF\u0026rdquo;. Save the PDF file to the desktop.\nNext, you will ZIP the folder with your PCB project files.\n  In Windows, find the project folder in which you created and saved your Cadence PCB design (see Figure 6).\n      Figure 6: Example of finding the PCB project folder     Verify that the most important files are in your project folder: (see Figure 7)\n .DSN - Cadence schematic design file .OPJ - Cadence schematic project file .OLB - Cadence schematic library file (only exists if you have a custom library) .ART - Gerber files used for manufacturing .DRL - Drill files used for manufacturing (only exists if you have through-hole components) .BRD - Cadence PCB editor design file        Figure 7: Example of Cadence PCB files   Note: If you are missing any of the above files then recheck your Gerber file export process or seek additional assistance from course staff. You may have additional files in this folder, depending on the steps you took during the creation of your schematic and PCB. It is OK to leave additional files in the folder.\n  In Windows, right-click on the project folder and choose Send to \u0026gt; Compressed (zipped) folder (see Figure 8).\n      Figure 8: Creating a .zip file in Windows     Move the .zip file to the desktop with the .jpg you created in steps 1 - 2.\n  Submit both the .jpg and the .zip file to the appropriate assignment on Canvas.\n  The following video shows an older version of the process described in this tutorial.\n Based on a video and tutorial created by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/packaging-cadence-files-for-submission/","tags":["cadence","pcb"],"title":"Packaging Cadence Files for Submission"},{"categories":null,"contents":"What is the Particle Argon? What does it do? The Particle Argon is a \u0026ldquo;wi-fi for everything\u0026rdquo; development kit that includes a microcontroller, wi-fi hardware, and easy-to-use web-based IDE (Integrated Development Environment). It is typically used to add wi-fi functionality into products without spending a huge amount of development time on the wi-fi hardware and software. A more detailed introduction is available here.\nNote: The Particle Argon was previously known as the Photon and the Spark Core, so you may see documentation referring to Spark Core or Photon instead. The software API is basically the same for all of them.\nWhere can I get an Argon board?  Each team can check out one (1) Argon board in PRLTA 109. If you need additional Argon boards, please see Dr. Jordan If you want to buy your own Argons, you can purchase them from Particle  Where can I find the hardware specifications for the Argon?  Argon Datasheet from Particle  Where can I find the firmware/software for the Argon? Notes: Firmware is a term used to describe software that directly interfaces with hardware. An API (Application Programming Interface) is a guide to the software/firmware functions you can use in your code.\n Particle Device OS Firmware API API from Particle Firmware Upgrades from Particle  How do I configure the Argon to run on my computer?  Getting Started guide from Particle  How do I communicate between the Argon and my microcontroller? There are two major ways to communicate between the devices:\n Using a UART (Universal Asynchronous Receiver Transmitter). UART connections transmit ASCII text, meaning that if you are trying to send numbers you will first need to convert them into strings (see FAQ question below). This strategy allows you to send data either to or from the Argon by either reading from or writing to the UART. An older example of how to do this is available here (note that it is for the older version of the Argon called the Spark Core, so some of the code may not work). Using the I/O pins on the Argon (Note: This is not a form of serial communication). If you only need to turn something on and off, or read a simple bit or analog value, then this is a simpler solution than using the UART. See the Pins and button definitions section of the datasheet and the Input/Output API pages on the Argon for more information. Here is a UART PIC to Argon Tutorial written by Mykol Reklaitis  How do I send numeric or formatted data over a UART connection?  Use the sprintf() function for your microcontroller. sprintf() prints formatted data to a string that can be sent over a UART connection. See this tutorial from tutorialspoint for more information.  Where can I find examples of Argon projects?  Particle Community SPO Learning Lab  How do I communicate between a Argon and a phone app? Option 1: Tinker Mobile App One option is use the Tinker mobile app from Particle. This off-the-shelf app is a good option if your project only needs to send simple information between Argon and the microcontroller.\nAdvantages of Tinker app\n Off-the-shelf multi-platform option to control individual analog and digital I/O pins through a standard interface Easy to use Useful to test whether a problem is in software or hardware (because since it\u0026rsquo;s provided by the manufacturer, it will hopefully work correctly) You can modify the callback functions to include your own code  Disadvantages of Tinker app\n App can not be modified, so you don\u0026rsquo;t have control over the user interface on the phone. (This may be OK for a proof of concept) Does not support entering text into the app directly (though you can send ASCII text over the UART in the firmware code)  Option 2: UbiDots App Framework The UbiDots app framework is designed to capture and display sensor data using an off-the-shelf app provided by the company. This is a good option if your project primarily needs to display and/or log sensor data (e.g., body temperature).\nAdvantages of UbiDots\n You have some control over the user interface in the app Connect your Particle device to Ubidots tutorial from UbiDots  Disadvantages of UbiDots\n UbiDots is primarily for gathering and displaying information (microcontroller \u0026ndash;\u0026gt; Argon \u0026ndash;\u0026gt; UbiDots \u0026ndash;\u0026gt; UbiDots app), and may not be able to send information back to your microcontroller easily.  Option 3: Write your own phone app You will need to create functions in the Argon firmware and call those functions via the Particle Cloud REST API. This is a good option if someone in your group has prior coding experience and/or time to figure out how to write an app.\nAdvantages of custom apps\n Full access to send and receive data between the Particle and the microcontroller Full access to modify the user interface (within Android/iOS limitations)  Disadvantages of custom apps\n Apps are usually platform-specific, meaning that if you write an app for Android it will likely not be compatible with iOS and vice-versa  More information on custom app development is provided below.\nOption 4: Run a web server on the Argon You can run a web server (based on Webduino, documentation here) on the Argon and then log into it from a phone or computer. This is a good option if you want to have full control via HTML over what is displayed.\nAdvantages of a web server\n Platform-independent Allows use of JavaScript and HTML to sculpt your \u0026ldquo;app\u0026rdquo;  Disadvantages of a web server\n Programming is time consuming and somewhat unintuitive  Option 5: Use Particle.publish() to post data to a web page on your computer Advantages of Particle.publish()\n Platform-independent Tutorial available here  Disadvantages of Particle.publish()\n Requires the use of HTML and JavaScript  How do I create an Android app?  Particle Android Cloud SDK (Software Development Kit) from Particle  You will need an app development environment. Suggested environments include:\n MIT App Inventor Xamarin (cross-platform, free for academic use) Phonegap (cross-platform)  Where can I find examples of custom Android apps that work with Argon?  MIT App Inventor example  How do I create an iOS app?  Particle iOS Cloud SDK (Software Development Kit) from Particle  You will need an app development environment. Suggested environments include:\n Start Developing iOS Apps (Swift) from Apple Xamarin (cross-platform, free for academic use) Phonegap (cross-platform)  Where can I find examples of custom iOS apps that work with Argon?  Coming soon  How do I communicate between a Argon and a computer?  Coming soon  How do I communicate between a Argon and another Argon?  Connecting Two Photons Together TCP Server and Client between two Photons The Buddy System: Publish and Subscribe  ","permalink":"https://embedded-systems-design.github.io/particle-argon-wifi-board/","tags":["tutorial","uart","design","argon","wireless","particle"],"title":"Particle Argon Wifi Board"},{"categories":null,"contents":"What is a patent?  \u0026ldquo;A patent for an invention is the grant of a property right to the inventor, issued by the United States Patent and Trademark Office\u0026rdquo; (for more information, see General Information Concerning Patents from the USPTO). Patents are the most common way of protecting intellectual property that is physically tangible (e.g., projects you might do in our engineering program).  What is a trademark?  \u0026ldquo;A trademark is a word, name, symbol, or device that is used in trade with goods to indicate the source of the goods and to distinguish them from the goods of others\u0026rdquo; (for more information, see What is a Trademark or Servicemark? from the USPTO). Trademarks are typically used to protect a unique name for a product, but not the product itself. For example, Dr. Jordan\u0026rsquo;s engineering education research lab is called STEAM Labsâ„¢.  What is a copyright?  \u0026ldquo;Copyright is a form of protection provided to the authors of \u0026lsquo;original works of authorship\u0026rsquo; including literary, dramatic, musical, artistic, and certain other intellectual works, both published and unpublished\u0026rdquo; (for more information, see What is a Copyright? from the USPTO). As a student, you automatically own the copyright for any text that you write (e.g., your project reports). However, copyrights are typically not used to protect engineering designs.  Why do I need to search for patents? If you knowingly or unknowingly use intellectual property that is patented by someone else in your own commercial designs, you may become the target of lawsuits from the patent owner. Therefore, when designing new products it is best to search for the patents you may be infringing upon (either through the product as a whole or particular features, such as a touch display) so that you can either design around the patents or reach out to the patent owner to license the patent.\nHow do I search for a patent? How to Conduct a Preliminary U.S. Patent Search: A Step by Step Strategy - web tutorial from the Patent and Trademark Resource Center (PTRC)\nSeven Step Strategy - outline from the PTRC\n 7-Step U.S. Patent Search Strategy Guide - detailed handout from the PTRC  What patent databases should I use?  USPTO Patent Full-Text and Image Database (PatFT) USPTO Patent Application Full-Text and Image Database (AppFT) Google Patent Search Global Patent Search Network (GPSN) Additional sites listed on the USPTO website  ","permalink":"https://embedded-systems-design.github.io/patents-101/","tags":["patents"],"title":"Patents 101"},{"categories":null,"contents":"Before exporting your PCB design for fabrication, you **must **verify the design and fix any errors. Time invested verifying your design before manufacturing will make the assembly and testing process significantly easier.\nWhat are best practices for the design of PCBs?  Designing PCBs for Debugging - (First Board Spins) video from Casey Petersen Fundamentals of Layout Out PC Boards from Jack Ardizzoni of Analog Devices Printed Circuit Board (PCB) Design Issues from Analog Devices PCB Design of Switch Mode Power Supplies (SMPS or Switchers) video from Casey Petersen A Practical Guide to High-Speed Printed Circuit Board Layout from Jack Ardizzoni of Analog Devices High Speed System Applications: PC Board Layout and Design Tools from Analog Devices  General  All components have footprints Bypass/decoupling capacitors for voltage regulators are placed as physically close as possible to the regulators Bypass/decoupling capacitors for ICs are placed as physically close as possible to each IC\u0026rsquo;s power and ground pins (see example of good layout, Figure 1) Power and ground traces are at least 40 mil wide and were sized using a trace width calculator Board space is allocated for mechanical constraints (e.g., PCB mounting holes, heat sinks, connectors) The top and bottom copper layers are labeled in text \u0026ldquo;top\u0026rdquo;, \u0026ldquo;bottom\u0026rdquo;, and \u0026ldquo;group name\u0026rdquo;        Figure 1: Example of good bypass capacitor placement   Vias  Minimize the number of vias in your design. Vias reduce the reliability of your system. No vias under components (particularly ICs)  Additional Considerations  Consider how your components will be mounted when routing traces. For example, if you have a through-hole connector on the top of your board, it\u0026rsquo;s better to route the traces for it on the bottom layer. Make the board outline in copper Make sure that the size of your board will fit inside your product enclosure Do NOT use the autorouter. Use manual routing to simplify the board design. Simple design = easier debugging. When using surface mount components, size 0805 resistors and capacitors (or larger) are easier to work with Through-hole connectors are mechanically stronger than surface-mount connectors Avoid right angles (90 degrees) in traces. Instead, \u0026ldquo;curve\u0026rdquo; the trace with a 45 degree angle around a corner Fill some extra space on your board with several 0.1\u0026quot; spaced test points to allow for easier modifications If your system uses in-system programming (ISP), place the ISP connector as physically close to the microcontroller as possible  ","permalink":"https://embedded-systems-design.github.io/pcb-design-checklist/","tags":["checklist","pcb"],"title":"PCB design checklist"},{"categories":null,"contents":"What equipment is available at each of the benches? Function Generator (5 MHz)\nMicroscope - Aven zipScope 2M USB Digital Microscope\nMultimeter - Agilent 34461A Digital Multimeter, 6.5 Digit\n Truevolt Series Digital Multimeters Operating and Service Guide   Oscilloscope/Logic Analyzer\nAgilent MSO-X 4024A Oscilloscope (200 MHz, 4 Analog + 16 Digital Channels) - includes serial decoding capabilities\n InfiniiVision 4000 X-Series Oscilloscope User\u0026rsquo;s Guide  Agilent MSO7054A Mixed Signal Oscilloscope (500 MHz, 4 Analog + 16 Digital Channels)\n InfiniiVision 5000/6000/7000A Series Oscilloscopes User\u0026rsquo;s Guide  Power Supplies (2 per bench) - BK Precision 1671A Triple-Output 30V, 5A Digital Display DC Power Supply\n Instruction Manual for BK Precision 1671A Power Supply  Soldering Irons - Weller WX2020 Solder Station (includes 2 WXP120 Soldering Irons)\n Weller WX120 Soldering Iron Operating Instructions Weller WX 2 Solder Station Operating Instructions  ","permalink":"https://embedded-systems-design.github.io/peralta-103-resources/","tags":["testing","asu","test equipment"],"title":"Peralta 103 Resources"},{"categories":null,"contents":"While it is easy to place components using the mouse, most designs require precise placement of some components (e.g., to align parallel headers). This tutorial walks through how to place components at a specific X-Y coordinate, determine the X-Y coordinates of a component, measure the distance between two components, move an existing component to a specific X-Y coordinate, and move an existing component relative to its current location.\nHow do you place a component at a specific X-Y coordinate?   Choose Place \u0026gt; Manually\u0026hellip; (see Figure 1). The Placement dialog box appears (see Figure 2).\n      Figure 1: Place \u0026amp;gt; Manually\u0026amp;hellip; menu         Figure 2: Placement dialog box     Check the box next to the part that you want to place, but do not place it yet. Instead, go to the command line at the bottom of the screen and type the desired placement coordinates in the following format: x x-coordinate y-coordinate\n  Example:\nCommand \u0026gt; x 0 0 will place the component at the origin (0,0)\n Press Enter to place the component at the desired coordinates (see Figure 3).\n      Figure 3: Component placed at origin (0,0)     How do you determine the current coordinates of a component?   Choose Display \u0026gt; Element (see Figure 4) and click on the component you would like to examine. The Show Element dialog box will appear and show the current coordinates of the component (see Figure 5).\n      Figure 4: Display \u0026amp;gt; Element menu option         Figure 5: Coordinates of a placed component     How do you measure the distance between two components?   Choose Display \u0026gt; Measure (see Figure 6). The command line will ask you to \u0026ldquo;Make two picks for the distance calculator\u0026rdquo; (see Figure 7).\n      Figure 6: Display \u0026amp;gt; Measure menu option         Figure 7: Command line message for Measure tool     Click parts of two components (e.g., a pin of a resistor and a pin of a capacitor). The Measure dialog box will appear and show the distance between the selected points (see Figure 8).\n      Figure 8: Measured distance between resistor and capacitor pins     How do you move an existing component to a specific X-Y coordinate?   Right-click on the component and select \u0026ldquo;Move\u0026rdquo;\n  Use the command line to enter a specific coordinate in the x (x x-coordinate) or y (y y-coordinate) direction.\n  Examples:\nA component is at (25,75).\nCommand \u0026gt; x 200 will move the component to (200,75) (see Figure 9)\nCommand \u0026gt; y 200 will move the component to (25, 200) (see Figure 10)\n      Figure 9: Moving a component to an absolute x coordinate         Figure 10: Moving a component to an absolute Y coordinate   How do you move a component relative to its current position?   Right-click on the component and select \u0026ldquo;Move\u0026rdquo;\n  Use the command line to enter a relative movement in one of the following formats:\n  ix x-units\niy y-units\nix x-units y-units\nExamples A component is at (1000,2000).\nCommand \u0026gt; ix 200 will move the component to (1200, 2000)\nCommand \u0026gt; iy 200 will move the component to (1000, 2200)\nCommand \u0026gt; ix 200 -500 will move the component to (1200,1500) (see Figure 11)\n      Figure 11: Results of relative movement   Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/placing-and-moving-components-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Placing and moving components in Cadence PCB Editor"},{"categories":null,"contents":"What are the components of a basic power supply subsystem?  Source of power - battery, AC adapter, solar Input electronic noise filtering circuit Voltage regulator to provide a constant supply voltage Output electronic noise filtering circuit  What are the design considerations for a battery-operated circuit? How many Amp-Hours of capacity are needed?\n Create a power budget to determine  What type of batteries?\n See Battery University for more information  Are the batteries rechargeable?\n NiCd, NiMH, LIB, LiPoly? Different tradeoffs of cost, memory, lifetime, weight Need a charging circuit. See Maxim Integrated Circuits  Discharge Rate\n Batteries can only discharge up to a certain limit to remain safe. Different chemistries have different limitations.  What are the design considerations for an AC-powered circuit? The language \u0026ldquo;AC adapter\u0026rdquo; and \u0026ldquo;AC power supply\u0026rdquo; is used inconsistently. Sometimes it refers to regulated power supplies with a fixed voltage output, and sometimes it refers to unregulated power supplies with a promised voltage output that is inaccurate when measured with a DMM. More information on AC power adapters is available here: http://www.dxing.info/equipment/wall_warts_bryant.dx\nLinear Power Supplies Linear power supplies are made up of a transformer, diodes, and sometimes a filter capacitor. They provide clean power, but waste lots of energy in the form of heat. See http://www.allaboutcircuits.com/textbook/semiconductors/chpt-3/rectifier-circuits/ for more information on how a linear power supply works.\nSwitching Power Supplies Switching power supplies are most commonly used in PCs and other digital applications. They have a \u0026ldquo;noisy\u0026rdquo; power output because of the switching frequency, and are not ideal for inductive loads. They also tend to be more expensive, but are much more energy-efficient and generate less heat.\nHow do I choose a voltage regulator? There are three major types of voltage regulators that you will encounter in this program:\nLinear voltage regulator - burns off extra power in the form of heat\n Advantage: High current capacity Advantage: Low cost Disadvantage: Low precision Disadvantage: High dropout voltage (the voltage difference between the input and output)  Low dropout voltage regulator - burns off extra power in the form of heat, but continues to regulate even when the input voltage is near the output voltage\n Advantage: Excellent for battery-powered applications Advantage: Higher precision Disadvantage: Lower current capacity Disadvantage: Higher cost  Switching voltage regulator - generates as much power as is needed by the circuit, up to the maximum allowed by the regulator. Similar to Switching Power Supplies above\n Advantage: Highly energy efficient Disadvantage: High cost Disadvantage: External components (some difficult to find) may be necessary Disadvantage: Printed circuit board layout can be difficult  A highly detailed guide to linear and switching regulators is available here: http://www.ti.com/lit/an/snva558/snva558.pdf\nWhat capacitor values should I use for input and output noise filtering? First, check the data sheet for the voltage regulator and see if it specifies values for the input and output filtering capacitors. If it does not, the rule of thumb is to use 0.33 ÂµF ceramic non-polarized capacitors for input filtering and 0.1 ÂµF ceramic non-polarized capacitors for output filtering.\nWhat capacitor values should I use for bypass filtering near each integrated circuit? Digital integrated circuits (ICs) need \u0026ldquo;bypass capacitors\u0026rdquo; to both filter the power going into the IC and provide a nearby reservoir of energy that the IC can draw from instantaneously. The rule of thumb is to put one 0.1 ÂµF ceramic non-polarized capacitor between each power pin on an integrated circuit and ground. This means a microcontroller might have 2 - 8 or more capacitors, one for each power pin on the IC.\nWhere can I find additional information about power supplies?  Wikipedia  Where can I find companies that manufacture power supply components?  Sources for Electrical and Electromechanical Components  ","permalink":"https://embedded-systems-design.github.io/power-supplies-101/","tags":["circuits","noise","power supply"],"title":"Power Supplies 101"},{"categories":null,"contents":"Note: This tutorial shows how to print a PCB design on paper. Please see the ASU PCB Fabrication Process for instructions on how to manufacture / \u0026ldquo;print\u0026rdquo; a PCB design in copper.\nWhy would you want to print a PCB design on paper? Before sending a PCB to be manufactured, it is imperative to separate the layers and print it at 1:1 (100%) scale on paper to physically verify that your parts will fit through the holes and that pad spacing is correct.\nNote: You can also Print a PCB Layout in Cadence PCB Editor.\nHow do you print a PCB design on paper?   Run a Design for Manufacturing Check in DFM Now\n  In the Layer Display window, right-click on a layer and choose All Layers Off.\n  Pick a layer and click the light bulb icon next to the layer name to enable it.\n  Highlight the enabled layer in the workspace. Right-click on the enabled layer and choose Move from the contextual menu. Left-click anywhere in the workspace and then move the layer somewhere off to the side so that it won\u0026rsquo;t overlap with the other layers. Left click again. Right click anywhere in the workspace to exit the \u0026ldquo;Move\u0026rdquo; mode.\n  Repeat steps 3 - 5 for the remaining layers in your design (see example, Figure 1)\n      Figure     Choose File \u0026gt; Print\u0026hellip; and select Plot Scale : User Scale of 1.0. Click Next and PLOT! to print your design.\n  Based on a tutorial by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/printing-a-pcb-design-in-dfm-now/","tags":["cadence","pcb"],"title":"Printing a PCB Design in DFM Now"},{"categories":null,"contents":"Note: This tutorial shows how to print a PCB design on paper. Please see the ASU PCB Fabrication Process for instructions on how to manufacture / \u0026ldquo;print\u0026rdquo; a PCB design in copper.\nWhy would you want to print a PCB design on paper? Before sending a PCB to be manufactured, it is imperative to separate the layers and print it at 1:1 (100%) scale on paper to physically verify that your parts will fit through the holes and that pad spacing is correct.\nNote: \u0026ldquo;Plot\u0026rdquo; in Cadence is synonymous with \u0026ldquo;Print\u0026rdquo; in other Windows programs\nNote: You can also Print a PCB Layout in DFM Now.\nHow do you print a PCB design on paper?   In PCB Editor, open your design and choose File \u0026gt; Plot Setup\u0026hellip; (see Figure 1). The \u0026ldquo;Plot Setup\u0026rdquo; dialog box will appear (see Figure 2).\n      Figure 1: Plot Setup menu option     In the \u0026ldquo;Plot Setup\u0026rdquo; dialog box, choose a \u0026ldquo;Scaling factor\u0026rdquo; of 1.00, \u0026ldquo;Auto center\u0026rdquo; checked and \u0026ldquo;Plot method\u0026rdquo; matching your printer\u0026rsquo;s capabilities (color or black and white), and click OK (see Figure 2).\n      Figure 2: Plot Setup dialog box     On the right side of the screen, select the Options tab. Set the \u0026ldquo;Active Class and Subclass\u0026rdquo; to Etch and the Subclass to Bottom (See Figure 3). This will show the most important details in the printout.\n      Figure 3: Options tab     Choose File \u0026gt; Plot\u0026hellip; (see Figure 4). The \u0026ldquo;Print\u0026rdquo; dialog box will appear (see Figure 5).\n      Figure 4: Plot menu option     In the \u0026ldquo;Print\u0026rdquo; dialog box, click \u0026ldquo;Setup\u0026hellip;\u0026rdquo; (see Figure 5) and select the printer, paper size, and orientation in the \u0026ldquo;Print Setup\u0026rdquo; dialog box (see Figure 6).\n      Figure 5: Print dialog box         Figure 6: Print Setup dialog box     Click OK in the \u0026ldquo;Print Setup\u0026rdquo; dialog box, and OK in the Print dialog box to print the design (see Figure 7).\n      Figure 7: Print dialog box     Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/printing-a-pcb-layout-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Printing a PCB Layout in Cadence PCB Editor"},{"categories":null,"contents":"There are several Cypress Programmable System on a Chip (PSoC®) hardware development kits available for use in designs. The list below describes strengths of each kit and provides links to documentation.\n PSoC® 4 Bluetooth® Low Energy (BLE) Pioneer Kit (CY8CKIT-042-BLE-A)  Strength: Easy-to-use Bluetooth that can be connected to other devices\nDocumentation\n Bluetooth® Low Energy (BLE) Pioneer Kit Guide from Cypress. PSoC® 4 BLE Module (includes information on connecting external power up to 5V) PSoC® 4200 Family Datasheet  Example Projects: 100 Projects in 100 Days with PSoC® 4 BLE from Cypress\nAvailability: Check out in PRLTA 109 or buy from Newark.\nPSoC® 4 Pioneer Kit (CY8CKIT-042)\nStrength: Compatible with Arduino shields\nDocumentation\n Pioneer Kit Guide from Cypress. Includes information on power connections. Pioneer Kit Dimensions PSoC® 4200 Family Datasheet  Example Projects: 100 Projects in 100 Days with PSoC® 4 Pioneer Kit from element14\nAvailability: Check out in PRLTA 109 or buy from Newark.\nPSoC® 4 Prototyping Kit (CY8CKIT-049)\nStrength: Small size\nDocumentation\n Prototyping Kit Guide from Cypress. Includes information on power connections.  Availability: Check out in PRLTA 109 or buy from Newark.\nPSoC® 5LP Development Kit (CY8CKIT-050)\nStrengths: More processing power and I/O pins than the PSoC® 4, LCD display\nDocumentation\n Development Kit Guide from Cypress. Includes information on power connections.  Availability: Check out from Dr. Jordan or buy from Newark.\nHow many PSoC® chips does the PSoC® 4 Pioneer Kit have? As shown in the block diagram in Figure 1 (below), the PSoC® 4 Pioneer Kit has two PSoC® chips on it: a PSoC® 4 (where you download and run your code on) and a PSoC® 5LP (which is used to program the PSoC® 4). Your computer connects to the USB Mini B port, which communicates with the PSoC® 5LP, which programs the PSoC® 4. For more information on the Pioneer Kit architecture, see the Theory of Operation section in the PSoC® 4 Pioneer Kit Guide.\n      Figure 1: Pioneer Kit Block Diagram   ","permalink":"https://embedded-systems-design.github.io/psoc-hardware-development-kits/","tags":["bluetooth","cypress","hardware","microcontroller","example project","documentation","development kit"],"title":"PSoC 4 Hardware Development Kits"},{"categories":null,"contents":"Why would I need to back annotate a design? If you make changes to your design while in PCB Editor (for example, swapping a footprint), you must back annotate (meaning, push changes) from the PCB design back into your original schematic. By doing this update, future changes to the schematic can be forward annotated (meaning, pushed forward) to your PCB design without having to start over from scratch.\nHow do I back annotate a design from PCB Editor to Design Entry CIS?   In PCB Editor, choose Setup \u0026gt; User Preferences\u0026hellip; and click on the Logic folder. The User Preferences Editor window will appear (see Figure 1).\n      Figure 1: User Preferences Editor window with Logic folder selected     Under the Logic folder, set schematic_editor to capture (see Figure 1, above). Close the User Preferences Editor.\n  Choose File \u0026gt; Export \u0026gt; Logic\u0026hellip;. The Export Logic dialog box will appear. (see Figure 2).\n      Figure 2: Export Logic dialog box     In the Export Logic dialog box, select the Cadence tab and choose the Design entry CIS option under \u0026ldquo;Logic type\u0026rdquo; (see Figure 2, above). If the path under \u0026ldquo;Export to directory\u0026rdquo; does not point back to the directory your design is stored in, click the \u0026ldquo;\u0026hellip;\u0026rdquo; button and change it.\n  In the Export Logic dialog box, click the \u0026ldquo;Export Cadence\u0026rdquo; button (see Figure 3). You are now finished exporting the design from PCB Editor, but still need to import the design changes into Design Entry CIS.\n      Figure 3: Export Cadence button in the Export Logic dialog box     Open your project in Design Entry CIS.\n  In Design Entry CIS, go to the \u0026ldquo;Project Manager\u0026rdquo; window and select the project icon. Choose Tools \u0026gt; Back Annotate\u0026hellip; (see Figure 4). The Backannotate dialog box will open (see Figure 5). If you want to make any changes to what is imported, click the \u0026ldquo;Setup\u0026hellip;\u0026rdquo; button and edit the allegro.cfg file (not recommended for most users) (see Figure 5).\n      Figure 4: Project Manager and Back Annotate\u0026amp;hellip;         Figure 5: Backannotate dialog box and setting up the path8. Click \u0026amp;ldquo;OK\u0026amp;rdquo; to complete the back annotation.     Based on a tutorial written by Seana O\u0026rsquo;Reilly and updated by Griffin Puggie\n","permalink":"https://embedded-systems-design.github.io/pushing-pcb-changes-back-to-a-schematic-in-cadence/","tags":["cadence","pcb"],"title":"Pushing PCB changes back to a schematic in Cadence"},{"categories":null,"contents":"Recreating a simple round padstack This tutorial takes you through recreating a basic round thru-hole padstack.\n1. Open the new Padstack editor in Cadence:\n      Figure 1    2. Select Thru-pin and circle on the start tab\n      Figure 2   3. Enter the drill diameter\n      Figure 3   4. Define the symbol that will be used to represent the drill hole:\n      Figure 4   5. Define the Top and bottom layer inner, outer, and thermal geometry. Since Peralta uses two-layer boards, geometry other than begin and end layers will be ignored.\n      Figure 5   6. Define the soldermask geometry for the top and bottom layers\n      Figure 6   7. Look through the summary page to ensure everything was entered correctly:\n      Figure 7   8. Save to the custom symbols folder you created and included in your padpath.\n","permalink":"https://embedded-systems-design.github.io/recreating-a-simple-round-padstack/","tags":["ecad","cadence"],"title":"Recreating a simple round padstack"},{"categories":null,"contents":"Introduction When drawing a circuit, you will often move and delete components as part of the process, meaning that the reference designators (e.g., R1, C1, U1) may be out of order or scattered throughout your design. This tutorial walks through how to reset the reference designators so they are sequential.\nWARNING: Do not reset the reference designators after you have moved a design to PCB Editor, or it may break links between the schematic and PCB layout.\nHow do you reset the reference designators in Cadence Design Entry CIS?   Open your schematic in Design Entry CIS\n  In Design Entry CIS, select the root folder for your schematic and click the Annotate button in the toolbar (see Figure 1). The Annotate window will appear (see Figure 2).\n      Figure 1: Annotate tool         Figure 2: Annotate Window     In the Annotate window (see Figure 2), choose Action \u0026gt; Reset part references to \u0026ldquo;?\u0026rdquo;. Click OK.\n  Click the Annotate button again, and this time choose Action \u0026gt; Incremental reference update. Click OK. Your reference designators are now renumbered!\n  Based on a tutorial written by Robert Goby and updated by Ryan Sparks\n","permalink":"https://embedded-systems-design.github.io/resetting-reference-designators-in-cadence-design-entry-cis/","tags":["cadence"],"title":"Resetting Reference Designators in Cadence Design Entry CIS"},{"categories":null,"contents":"See this video\n","permalink":"https://embedded-systems-design.github.io/routing-traces/","tags":null,"title":"Routing Traces"},{"categories":null,"contents":"Introduction Designs created in an ECAD program may be electrically correct on the screen, but are ultimately constrained by the capabilities of your fabrication equipment. This tutorial walks through how to use the program DFM Now to verify that a design is able to be manufactured by the LPKF ProtoMat S63 in PRLTA 109.\nThis tutorial requires that you have already exported Gerber files of your design from Cadence.\nThe following video shows the process described in this tutorial from start to finish.\n Step 1: Install and Configure DFM Now  Download and install DFM Now Download the Peralta Mill Specs.drf configuration file and save it to a known location. This file contains customized settings that will allow you to use DFM   Step 2: Run DFM Now on the Gerber Files   In Windows, launch DFM Now!\n  Choose Import \u0026gt; AutoLoad (Gerber/Drill)\u0026hellip;, select the folder that contains the Gerber and drill files for your project, and click Next (see Figures 1 and 2).\n      Figure 1: AutoLoad import menu         Figure 2: Select Folder to Load window     In the File Description: window (see Figure 3), choose the correct layer type for each layer. Common layer types include:\n Top Art = Top Bottom Art = Bottom Outline = Border (this is typically a graphic and may be the only one that you need to change) Soldermask Top = Mask Top Soldermask Bottom = Mask Bottom Drill = Drill ThruHole        Figure 3: File Description window     Click Next and Finish.\n  Review your design and make sure all of the layers were loaded properly.\n  Choose DFM \u0026gt; DFM Rules Management\u0026hellip; (see Figure 4). The DFM Check Settings window will appear (see Figure 5).\n      Figure 4: DFM Rules Management menu selection         Figure 5: Default DFM Check Settings window     In the DFM Rules Settings window under Rules File Management, click Open\u0026hellip; and choose the Peralta Mill Spec.drf file that is saved to your hard drive. Under Rules File Management, click Save As\u0026hellip; and save the rules so they are available next time you open the program. New DFM settings will appear in the Signal tab (see Figure 6). Click Finish.\n      Figure 6: Custom Peralta Mill Spec DFM Rules Settings     Choose DFM \u0026gt; DFM Check\u0026hellip;. The General Settings window will appear (see Figure 7). Make sure that the DFM Rule Set is set to Peralta Mill Specs.drf and click Next to begin the design for manufacturing process.\n      Figure 7: General Settings window     Depending on the complexity of your board, the DFM check will take several seconds to several minutes to run. If it uncovers any errors, you will need to find and correct them within PCB Editor, re-export your Gerber files, and re-run the DFM Check on the new Gerber files.\n  Once you have corrected all of the errors, you will receive a green checkmark. Success! (see Figure 8)\n      Figure 8: Example errors and success     Bring your computer to a TA or professor during office hours and show them the results of your DFM check to receive approval for submitting your PCB design to Peralta for milling.\n  Based on a video and tutorial created by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/running-a-design-for-manufacturing-check-in-dfm-now/","tags":["asu","cadence","pcb"],"title":"Running a Design for Manufacturing Check in DFM Now"},{"categories":null,"contents":"What is a Design Rules Check? Design Rules Check (DRC) is a tool that looks for a limited set of errors in PCB designs, and generates error messages to help you identify and fix the problem(s). A design that passes a DRC is not necessarily error-free, but rather has passed the limited set of tests that DRC conducts. You can (and should) run a DRC in both Design Entry CIS and PCB Editor, and they will look for different types of errors.\nHow do you run a Design Rules Check in PCB Editor?   In PCB Editor, choose Tools \u0026gt; Update DRC (see Figure 1).\n      Figure 1: Update DRC menu option     If no DRC errors are detected, then the command window at the bottom of the screen will look similar to Figure 2. If errors appear in the command window, it is recommended that you correct them prior to continuing with your design.\n      Figure 2: Error-free command window after a DRC operation     How do you check for unconnected pins in PCB Editor?   In PCB Editor, choose Tools \u0026gt; Reports\u0026hellip; (see Figure 3). The \u0026ldquo;Reports\u0026rdquo; dialog box will appear (see Figure 4).\n      Figure 3: Reports menu option     In the \u0026ldquo;Reports\u0026rdquo; dialog box under \u0026ldquo;Available Reports, select\u0026quot;Unconnected Pins Report\u0026quot;and click\u0026quot;Generate Reports\u0026rdquo; (see Figure 4).\n      Figure 4: Reports dialog box     If no unconnected pin errors are detected, then the Unconnected Pins Report will look similar to Figure 5. If errors appear in the report, it is recommended that you correct them prior to continuing with your design.\n      Figure 5: Unconnected Pins Report     ","permalink":"https://embedded-systems-design.github.io/running-design-rules-check-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Running Design Rules Check in Cadence PCB Editor"},{"categories":null,"contents":"Before exporting your schematic to create a PCB, you must verify the design and fix errors in the schematic first. It is significantly more difficult to fix errors later (either during the PCB layout stage or after manufacturing) than to spend the time double-checking the schematic first.\nDesign for Function and Performance  Check symbol pinouts against the data sheet, paying special attention to the part package (e.g., chips often come in multiple physical packages with different pin numbers) Check connector pinouts and orientation (top or bottom of board, inversion of pins) Check the data sheet for each part to ensure all support circuitry (e.g., external resistors for configuration) is present If an external oscillator or crystal is used, check that all support circuitry is present (e.g., low-ESR X7R capacitors) Check that crossing wires that should be connected have a dot at the intersection, and those that should not be connected do not have a dot For ICs, check that all power and ground pins are connected Run the schematic design rules check and resolve all errors  Design for Reliability  When using an analog to digital converter, it\u0026rsquo;s a good idea to filter the signal in hardware first with a band pass filter. This helps eliminate spurious noise that can corrupt your readings De-bounce all mechanical switches in hardware Check that all resistors have a wattage listed, and that wattage has at least a 50% margin Check that all capacitors have a working voltage listed, and that working voltage has at least a 25% margin Add a fuse to each power rail to help protect the circuit against accidental damage (e.g., shorting power and ground). Buy extra fuses. Power supply has a 25% current safety margin over the maximum calculated operating current  For ICs, make sure:  Bypass/decoupling capacitors are present for each chip. (0.1 uF ceramic for every power pin AND 1 uF, 10 uF, or 100 uF tantalum for every 10 to 20 ICs) (see Bypass Capacitor Basics page) Pull up or pull down resistors are used, rather than hardwiring signal pins to power planes Pull up or pull down resistors are used on all unused IC inputs. One exception is microcontrollers, which should have unused I/O pins tied to test points  Design for Testing  Critical signals are connected to headers and/or test points to facilitate easy testing and debugging Test points are attached to key signals or unused pins that may be useful in the future (e.g., extra microcontroller I/O pins) Zero-ohm resistors are used in series on critical nets (e.g., power nets) to allow easy troubleshooting of circuit subsystems  Design for Manufacturability/Service/Accessibility/Assembly  Group components into labeled modules matching with the labels on the block diagram There is a way to connect power to each board (e.g., a connector) Connectors are used for off-board connections. Always include at least one ground wire/signal return path in connections between boards Check that in-system programming headers exist and include any required support circuitry (e.g., pull-up resistors). This information can be found in the microcontroller data sheet. Check that all components have a real part number (meaning you could copy and paste the part number into a distributor\u0026rsquo;s search engine and return one part). Resistors, capacitors, and inductors can be labeled with their values (e.g., 0.1uF) instead of the full part number. Add a surface-mount LED and current-limiting resistor to each power rail to provide a visual indication that the power supplies are on  ","permalink":"https://embedded-systems-design.github.io/schematic-checklist/","tags":null,"title":"Schematic checklist"},{"categories":null,"contents":"What is a finite state machine? A finite state machine (FSM) is a way of modeling a system such that there are a limited number of finite \u0026ldquo;states\u0026rdquo; that a system can be in, and that it can only be in one of those states at a time. Events (e.g., pushing a button) cause the system to change from one state to the next. Unexpected events do not cause the system to change states, which is useful for ignoring spurious inputs. Rather than coding for every possible input, you can instead code only for inputs that matter at the given time. The following resources provide a solid conceptual framing and implementation examples:\n Understanding State Machines, Part 1: What are they? from Mathworks Understanding State Machines, Part 2: Why Use Them? from Mathworks Understanding State Machines, Part 3: Mealy and Moore Machines from Mathworks Understanding State Machines, Part 4: Harel State Machines from Mathworks Implementing FSMs in Embedded Systems  What is Unified Modeling Languageâ„¢ (UML®)? UML is an industry-standard specification for representing software designs. It is equivalent to schematics for hardware designs. More information on UML can be found at uml.org. Official documentation on UML is available at:\n 25 UML Diagrams Official UML Examples UML Diagram Types Guide: Learn About All Types of UML Diagrams with Examples from creately All You Need to Know About UML Diagrams: Types and 5+ Examples from Tallyfy State Machine Diagram vs. Activity Diagram from Visual Paradigm What is the difference between an activity and a state chart diagram? from Quora Difference between StateChart and Activity Diagram from stackoverflow  Common UML diagrams that you may use include:\nActivity Diagram. An Activity Diagram (similar to a flowchart) captures the overall behavior of a program from start to finish.\n Official Documentation on Activity Diagrams Activity Diagram in UML: Symbol, Components, \u0026amp; Example UML - Activity Diagrams from tutorialspoint What is an Activity Diagram from Visual Paradigm UML 2 Activity Diagrams: An Agile Introduction tutorial Example: Activity diagram for online shopping  Statechart Diagram. A Statechart Diagram is a UML representation for a finite state machine. A finite state machine (also called a state machine) is a type of software design where your program is only in a single state at a time. The program changes state when a particular event happens, and remains in the same state if no event (or an unknown event) happens. This makes your program less likely to have unpredictable behavior, and is commonly used for copy machines, stoplight controllers, etc.\n Official Documentation on State Machine Diagrams Statechart UML Tutorial with Example UML - Statechart Diagrams from tutorialspoint What is a State Machine Diagram? from Visual Paradigm UML Tutorial: Finite State Machines UML 2 State Machine Diagrams: An Agile Introduction tutorial State Machine Constructs tutorial from EE Times Finite State Machines for the Texas Instruments MSP430 microcontroller application note  Sequence Diagram\n Official Documentation on Sequence Diagrams Interaction, Collaboration, and Sequence Diagrams with Examples What is a Sequence Diagram? from Visual Paradigm Difference between Sequence Diagram and Activity Diagram from GeeksforGeeks  What software do I use to create a UML diagram?  ArgoUML is an excellent free open-source software engineering tool that supports the creation of a wide variety of UML diagrams. It runs on Windows, Mac OS X, and Linux. StarUML is another excellent freely-available program that supports the creation of a wide variety of UML diagrams. it runs on Windows, Mac OS X, and Linux.  Draw.Io - Recommended. Add-on to google drive documents, free - http://draw.io LucidChart - cloud-based collaborative diagramming app ASU has a site license if you use your ASU google account. Or get an Education Account. Add as a addin via google drive.  What is pseudocode? Pseudocode is a near-English representation of a program that allows you to represent the functionality of a program without worrying about the syntax. It is useful when planning how software will work. Pseudocode can be created in any text editor or word processing program. An example of pseudocode for the game Monopoly is available here.\nMany links above suggested by Cecilia La Place\n","permalink":"https://embedded-systems-design.github.io/software-design/","tags":["tutorial","programming","design","software","software design"],"title":"Software design"},{"categories":null,"contents":"Video Walkthrough  How do I turn on the soldering irons in PRLTA 103?  How do I solder through-hole components by hand?  Soldering through-hole components video from EEVblog How to solder - through hole soldering tutorial from sparkfun  How do I solder surface mount components by hand? Capacitors, diodes, inductors, resistors  How to solder SMT 0805 components video from ItsInOurKernel Surface Mount Soldering 101 video from CuriousInventor  DPAK-style components (MOSFETs, voltage regulators)  Soldering DPACK components video from EEVblog  Integrated circuits (ICs)  Soldering large ICs video from EEVblog Surface Mount Soldering 101 video from CuriousInventor Soldering QFN and QFP package video from Nick Leijenhorst  How do I solder surface mount components using a reflow oven? This method involves applying solder paste to the pads on the PCB, manually placing your surface mount components into the solder paste, and baking the board in a special oven to solder the entire PCB at once. This method is not really easier than hand soldering for one-off PCBs; you are trading one set of challenges for a different set. If you are interested in using solder paste and the reflow oven to solder your components, please contact Osama Jameel in PRLTA 109.\nHow do I desolder components?  How to desolder components using solder wick video from w2aew How to desolder components using a solder sucker video Desoldering a SMD IC with basic tools video Desoldering a SMD IC with a hot air station video  How can I practice soldering without damaging my project? A great way to practice is to find an old PCB at Goodwill (inside a printer, scanner, camera, floppy drive, etc.) and practice desoldering and soldering components on the board. You can also find old circuit boards in the cabinets in the front of PRLTA 103.\n","permalink":"https://embedded-systems-design.github.io/soldering-and-desoldering-tips-and-tricks/","tags":["tutorial","soldering","assembly","video"],"title":"Soldering and Desoldering Tips and Tricks"},{"categories":null,"contents":"Professional Distributors These distributors are often used by professionals in industry, and provide the most complete selection of different parts.\n Arrow Electronics Digi-Key Electronics Jameco Electronics Mouser Electronics Newark  Hobbyist and Surplus Distributors These suppliers generally offer lower prices for components, but may not have data sheets for everything they sell. Do not buy parts without a data sheet.\nAdafruit\nAll Electronics\nAlltronics\nAmerican Science and Surplus\nAndyMark\nBG MicroElectronics\nElectronic Goldmine\nHobby King\nHSC Electronic Supply\nMarlin P. Jones \u0026amp; Associates\nMCM Electronics\nParts Express\nPololu Robotics \u0026amp; Electronics\nRadio Shack\nRobotShop\nSparkfun\nSunFounder\nTower Hobbies\nCircuit Specialists - 819 W. Fairmont Dr., Ste. 2, Tempe, AZ 85282. (480) 464-2485. Hours.\nFry\u0026rsquo;s Electronics\n Phoenix Store - 3035 W. Thunderbird Rd., Phoenix, AZ 85053. (602) 445-8800 Tempe Store - 2300 W. Baseline Rd., Tempe, AZ 85283. (602) 445-5100  MHZ Electronics - 2801 E Washington St, Phoenix, AZ 85034. (602) 681-3850\nTri-Tek Electronics - 40 W. Baseline Rd., Ste. 101, Mesa, AZ 85210. (480) 268-9259. Hours.\nComponent Manufacturers  Here\u0026rsquo;s a list of popular manufacturers and the types of components that they manufacture. Most of these companies offer free samples of parts to students working on design projects. Even if you\u0026rsquo;re not sure you will use one of their parts, it\u0026rsquo;s better to order samples anyway so that you have options if other plans do not work. Instructables also has a larger list of companies that offer free samples.\n Analog Devices - analog switch ICs, data converters, amplifiers and linear, RF ICs, power management, MEMS and sensors, processors and DSP. Samples.  Cypress - automotive, clocks and buffers, interfacing, lighting and power control, memory, programmable system-on-a-chip, touch sensing, USB, wireless. Samples.  Maxim Integrated - amplifiers and comparators, analog switches and multiplexers, audio, automotive, clock, data converters, digital potentiometers, energy measurement and metering, filters, interfacing, LED and LCD lighting and displays, memory, micro controllers, optoelectronics, power and battery management, power line networking, protection and isolation, real-time clocks, security, sensors, storage, voltage supervisors, thermal management, video, voltage references, wireless. Samples.  Microchip - microcontrollers, analog, interfacing, wireless, memory. Samples.  NXP Semiconductors - microcontrollers, discrete and logic, near-field communication, interface and connectivity, media and audio processing, power management, radio frequency (RF), sensors, automotive. Samples.  On Semiconductor - discrete, power management, logic, signal management  Texas Instruments - amplifiers and linear, audio, automotive, clocks and timers, data converters, interfacing, logic, power management, digital signal processing (DSP), micro controllers, analog switches and multiplexers, temperature sensors, wireless. Samples.   Connectors   Molex - Samples.  AMP  Encoders  https://ams.com/angle-position-on-axis  Hobbyist Development Platforms  Arduino BeagleBoard Raspberry Pi  Motors \u0026amp; Motor Drivers   Allied Motion Cypress PSoC® 4 Motor Control Evaluation Kit Elmo Motion Control FaulHaber HobbyKing Electric Motors Marlin P. Jones \u0026amp; Associates Motors MicroMo Schneider Electric Intelligent Motion Systems USAutomation  Brushless Motors  DirectIndustry Brushless Gear Motors Koford Engineering RobotShop Brushless DC Motors  Servo Motors  Futaba Hitec ServoCity  Sensors Force-Sensitive Resistors   Trossen Robotics  Inclinometers   Rieker Inc.  Load Cells  Futek  ","permalink":"https://embedded-systems-design.github.io/sources-for-electrical-and-electromechanical-components/","tags":["components","materials","sources","local","actuators","distributors","ordering","parts","sensors","manufacturers","purchasing","suppliers"],"title":"Sources for Electrical and Electromechanical Components"},{"categories":null,"contents":"Adhesives \u0026amp; Tape  Adhesives for Paper from ConservationWiki Electronic Grade Self-Leveling Silicone from American Sealants, Inc. Flex Copper Clad PI Sheets from HB Professional Material TrueTape, LLC  Casting Materials  Reynolds Advanced Materials - 1727 E. Weber Dr., Tempe, AZ. (480) 967-7727 Quantum Silicones Smooth-On  Composites  ACP Composites  Fabric   Seattle Fabrics Mesa Sales \u0026amp; Supply - 2233 E. Main St., Mesa, AZ. (480) 833-7025 Tempe Sales Company - 412 W. Broadway Rd., Tempe, AZ. (480) 967-4811 SAS Fabrics - 1700 E. Apache Blvd., Tempe, AZ. (480) 966-7557 SAS Fabrics - 1111 E. Indian School Rd., Phoenix, AZ. (602) 279-2171 SAS Fabrics Superstore - 9840 N. 19th Ave., Phoenix, AZ. (602) 943-7777  General Parts, Supplies, and Materials  ACE Hardware - 2758 S. Crimson Rd., Mesa, AZ 85209. (480) 419-0199 Grainger - 775 E. Baseline Rd., Gilbert, AZ 85233. (480) 308-7980 Hobby Lobby - 4095 S. Gilbert Rd., Ste. 106, Gilbert, AZ 85297. (480) 855-5109 The Home Depot - 7401 S. Power Rd., Queen Creek, AZ 85142. (480) 988-6810 Lowe\u0026rsquo;s - 4730 S. Higley Rd., Gilbert, AZ 85297. (480) 840-6280 Michael\u0026rsquo;s - 5020 S. Power Rd., Gilbert, AZ 85212. (480) 840-3211  Leather  Tandy Leather - 2245 W. University Dr. #6, Tempe, AZ. (480) 966-4151  Metal  AZ Metals - 526 E. Juanita Ave. #1, Mesa, AZ. (480) 353-2950 Industrial Metal Supply - 5150 S. 48th St., Phoenix, AZ. (602) 454-1500 (*Ask for the ASU student discount)  Plastic  Port Plastics - 3191 N. Washington St., Ste. #7, Chandler, AZ. (480) 813-0849 Professional Plastics - 4449 S. 38th Pl., Phoenix, AZ. (800) 445-3303 Curbell Plastics 405 North 75th Avenue, Bldg 1 Ste 100 Phoenix, AZ 85043 888-517-7176  Telescoping Tubing  Telescoping Tube and Pipe from Alcobra Metals  Wood  Timber Woodworking - 935 E. Southern Ave., Mesa, AZ. (480) 926-2131 Woodworker\u0026rsquo;s Source - 645 W. Elliot Rd., Tempe, AZ. (480) 355-5090  ","permalink":"https://embedded-systems-design.github.io/sources-for-materials/","tags":["materials","distributors","sources","ordering","parts","local","manufacturers","purchasing","suppliers"],"title":"Sources for Materials"},{"categories":null,"contents":"General  Berg Grainger (* ASU Preferred Supplier) McMaster-Carr Miki Pulley MSC Industrial (* ASU Preferred Supplier) Motor System Parts from Radical RC Stock Drive Products  Bearings  igus - plastic bushings, bearings, linear guides, and cable carriers. Samples. Kaydon Slewing Bearings NSK Motion and Control VXB Ball Bearings  Couplings  ZeroMax Flexible Shaft Couplings  Gears  Didel Pinion Gears from Radical RC RushGears.com  Springs  Smalley Small Coil Spring from TheSprinStore.com  ","permalink":"https://embedded-systems-design.github.io/sources-for-mechanical-components/","tags":["components","distributors","sources","ordering","parts","manufacturers","mechanical","purchasing","suppliers"],"title":"Sources for Mechanical Components"},{"categories":null,"contents":"Serial Communication - SPI \u0026amp; Shift Register Tutorial\nObjectives Getting familiar with the SPI serial communication protocol using MCC under the MPLAB X programming environment to program the PIC16F18446 Curiosity Nano development board and control a shift register to drive 8 LEDs on and off. In this tutorial, you will learn to set up the Serial Peripheral Interface (SPI), Shift Registers, and 3 of the major numeral system (decimal, binary, and hexadecimal).\nResources PIC16F18446 Curiosity Nano Hardware User Guide\nSN74HC595 8-Bit Shift Registers Datasheet\nCuriosity Nano \u0026amp; MPLAB Tutorial\nYouTube Tutorial 1\nYouTube Tutorial 2\nCreate Your First Project   Open the MPLAB X IDE, you can plug the USB mini cable into the Curiosity USB debugging port. Once you plug the USB to your PC, a green LED will light up. This indicates the Curiosity board has been powered up.\n  To create a new project, go to \u0026ldquo;File\u0026rdquo; - \u0026ldquo;New Project\u0026rdquo; - select \u0026ldquo;Standalone Project\u0026rdquo; - and click \u0026ldquo;Next \u0026gt;\u0026rdquo;\n  Select Device as \u0026ldquo;PIC16F18446\u0026rdquo; and click \u0026ldquo;Next \u0026gt;\u0026rdquo;\n  If you have your Curiosity Nano connected to your PC, the serial number of the device will show up.\n  Select the serial number of your Curiosity board and click \u0026ldquo;Next \u0026gt;.\u0026quot;\n Now you will have to select a compiler for the MPLAB X. If you haven\u0026rsquo;t installed Microchip XC8 Compiler, you can install it by clicking the \u0026ldquo;Download Latest.\u0026quot;\n  Once the XC8 compiler has been installed, select the \u0026ldquo;XC8\u0026rdquo; as the compiler for this project.\n  The last step is to give a name to your first project as well as the location where you want to put your project.\n  Once you create a new project, you can open the MCC Code Configurator by clicking \u0026ldquo;Tools\u0026rdquo; - \u0026ldquo;Embedded\u0026rdquo;.\n   For more details about these steps, please refer to the following tutorial: Curiosity Nano \u0026amp; MPLAB Tutorial  2. Serial Communication 2.1 Control 8 LEDs using shift registers with SPI function In this section, you will wire 8 external LEDs to the shift register and connect it to the curiosity nano board.\nRequired Hardware: Curiosity Nano, Breadboard, SN74HC595 Shift Registers, 220 Ohm resistors x8, Green LED x8\n2.1.1 Hardware Setup   From SN74HC595 8-Bit Shift Registers Datasheet, we know that the shift register has 8 outputs from QA to QH.\n  Place the Curiosity Nano Board and the shift register onto the breadboard**,** which will take 25 rows of space. (Shown in Figure 1)\n  Use 220 ohms resistors to connect 8 output pins from QA to QH on the shift register to 8 separate rows.\n  Connect the Anode of the LEDs to each resistor. Connect the Cathode to Ground.\n  Connect the SER, RCLK, SRCLK pin to 3 GPIO pins on Curiosity Nano Board. Connect OE to ground, and connect SRCLR to power.\n   For the pin assignment, please refer to the following table and Figure 1.     Shift Register pins Connection Function     QA - QH LED 1 - LED 8 Digital output   SER Nano - SDO1 Serial data output   RCLK Nano - digital out Read \u0026amp; Latch data   SRCLK Nano - SCK SPI Clock signal   OE / SRCLR GND / POWER Enable / Clear all          The Hardware Setup for Lab 2.1 should look like this         Figure 1: Hardware setup for SPI serial communication   2.1.2 Software Configuration\nAs an example and an overview of the SPI function using the oscilloscope, each bit from a byte (8 bit) of the serial data is being sent with the clock signal toggling. (Shown in Figure 2) The goal of this SPI serial communication is to transmit a Byte of data and latch those bits into 8 parallel digital output using the 74HC595 shift register.\n      Figure 2: SPI signal displayed on Keysight Oscilloscope   Double click on an MSSP choice to add an MSSP block to the MCC under Device Resource\nUnder the Pin Manager, you should deselect the SDI input by clicking on the gray lock symbol in the 3rd pin of Port A.\nUnder the Pin Module, uncheck the analog option for all pins, and give a custom name to a GPIO pin for RCLK.\nThe Code Configurator setup for Lab 2.1 should look like this:\n      Figure 3   Setting up the SCK, RCLK, and SDO pin\nClick on the MSSP1 under project resource, go to the Register tab, change the SSPEN of SSPCON1 to enabled, leave everything else as default settings.\n      Figure 4   2.1.3 MCC (Microchip Code Configurator) Generated Files and Main.c\nClick the Generate button under the project resource, and now your projects should have all the MCC generated files.\nGo back to Projects, you will see two subfolders called MCC Generated Files under both Header Files and Source Files. These folders contain the generated code, functions, and macros by MCC (Microchip Code Configurator).\nClick the spi1.c file, and Change SSPEN to 1 under the SPI1_Initialize to enable the serial communication.\n      Figure 5   After configuring the software, you can go ahead and write your own functions. We can double click the \u0026ldquo;spi1.h\u0026rdquo; and see all the macros that MCC generated for us.\nSince we are sending 8-bit information to the shift register, go back to the \u0026ldquo;main.c\u0026rdquo; and use the macros inside the main function. You can also add a delay function in order to see the on and off transition of the LED.\nRCLK_SetLow(); // Select/Latch the shift register (Active low) SPI1_WriteByte(255); //Send a Byte to Slave __delay_ms(0.05); //delay for data transition to finish RCLK_SetHigh(); // Deselect/Unlatch the shift register __delay_ms(500); //delay Now your main function should look something like this:\n      Main.c for Lab 2.1   Click the Hammer button (  ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button (  .) 2.1.4 Practise exercise using different numeral systems.\nIn the exercise above, we used the decimal system to represent an 8-bit data, which is more common for humans. Computers, however, only have on and off, called a binary digit (or, bit, for short). A binary number is just a string of zeros and ones: 11011011, which often written after \u0026ldquo;0b\u0026rdquo;. 1 For example, 0b10100101 means 10100101 binary.\nAs computers got bigger, it was more convenient to group bits by four, which can have 16 values (0000 to 1111, or 0 to 15). Hex = 6 and Decimal = 10, so it is called hexadecimal. In computer jargon, four bits make a nibble (sometimes spelled nybble). A nibble is one hexadecimal digit, written using a symbol 0-9 or A-F. Two nibbles make a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.). Hexadecimal makes it easier to write these large binary numbers. 1\nTo avoid confusion with decimal, binary or other numbering systems, hexadecimal numbers are sometimes written after \u0026ldquo;0x\u0026rdquo;. For example, 0x63 means 63 hexadecimal. 1\nTable 1: Numeral systems conversion 1\n   Hexadecimal 0 1 2 3 4 5 6 7     Binary 0 1 10 11 100 101 110 111   Decimal 0 1 2 3 4 5 6 7       Hexadecimal 8 9 A B C D E F     Binary 1000 1001 1010 1011 1100 1101 1110 1111   Decimal 8 9 10 11 12 13 14 15    Reference: 1 \u0026ldquo;Hexadecimal,\u0026rdquo; Wikipedia, The Free Encyclopedia, Available: https://simple.wikipedia.org/w/index.php?title=Hexadecimal\u0026amp;oldid=6838913, Accessed March 7, 2020.\nNow, can you write your functions using the hexadecimal system and binary system to control the LEDs with various patterns with SPI serial communication functions?\nGo back to the Main.c file and modify the code to add up and display the hexadecimal number from 0x00 to 0xFF on the 8 LEDs.\nTry following code in your Main.c program:\nfor (data = 0; data\u0026lt;0xFF; data++) // display 8 LEDs to show value adding up { RCLK_SetLow(); // Select/Latch the shift register (Active low)  SPI1_WriteByte(data); //Send a Byte to Slave  __delay_ms(0.05); //delay for data transition to finish  RCLK_SetHigh(); // Deselect/Unlatch the shift register  __delay_ms(500); //delay } Click the Hammer button (  ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button (  .)\nNow your main function should look something like this:\n      Figure   What about using the binary system to control the pattern of 8 LEDs?\nGo back to the Main.c file and modify the code to display the 8 LEDs with some pattern by writing each bit on/off using SPI in the binary system.\nTry following code in your Main.c program:\nfor (int i = 0; i\u0026lt;9; i++) // switch to different case to generate a pattern { switch(i) { case 8: data = 0b00000000; break; // ALL LED OFF  case 7: data = 0b00000001; break; // 1 LED ON  case 6: data = 0b00000011; break; // 2 LED ON  case 5: data = 0b00000111; break; // 3 LED ON  case 4: data = 0b00001111; break; // 4 LED ON  case 3: data = 0b00011111; break; // 5 LED ON  case 2: data = 0b00111111; break; // 6 LED ON  case 1: data = 0b01111111; break; // 7 LED ON  case 0: data = 0b11111111; break; // ALL LED ON  } RCLK_SetLow(); // Select/Latch the shift register (Active low)  SPI1_WriteByte(data); //Send a Byte to Slave  __delay_ms(0.05); //delay for data transition to finish  RCLK_SetHigh(); // Deselect/Unlatch the shift register  __delay_ms(500); //delay  } for (int i = 0; i\u0026lt;9; i++) // increase duty cycle to 100%  { switch(i) { case 0: data = 0b00000000; break; case 1: data = 0b00000001; break; case 2: data = 0b00000011; break; case 3: data = 0b00000111; break; case 4: data = 0b00001111; break; case 5: data = 0b00011111; break; case 6: data = 0b00111111; break; case 7: data = 0b01111111; break; case 8: data = 0b11111111; break; } RCLK_SetLow(); // Select/Latch the shift register (Active low)  SPI1_WriteByte(data); //Send a Byte to Slave  __delay_ms(0.05); //delay for data transition to finish  RCLK_SetHigh(); // Deselect/Unlatch the shift register  __delay_ms(500); //delay  } } Click the Hammer button (  ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button (  .)\nTips:\nDo you notice any difference between using decimal, hexadecimal, and binary systems?\nWhat advantages of different numeral systems and using SPI serial communication protocol did you notice from the above 3 exercises?\nCan those be implemented in your current and future projects?\nTutorial written by Qinchen (Sam) Zha\n ","permalink":"https://embedded-systems-design.github.io/spi-shift-register-tutorial/","tags":["spi"],"title":"SPI \u0026 Shift Register Tutorial"},{"categories":null,"contents":" Why use 0 ohm Resistors in a design? 0 ohm resistors act as a through hole jumper wire on manufactured PCBs. Also known as \u0026ldquo;jumper chips'' or\u0026quot;jumper leads\u0026rdquo;, 0 ohm resistors can be substituted for vias to cross over line traces. This is useful for PCBs that have many vias already and PCBs that want to avoid vias altogether. In the PCB industry, using 0 ohm resistors over jumper wires in the design process allows one less specialized tool when assembling the PCB. It is cheaper and more practical to install a jump lead using readily available resistor placing machines over having a separate machine for just placing jumper wires. Should you use this when manufacturing PCBs?  Using 0 ohm resistors is practical in the course due to milling limitations of Peralta labs and use in some complex designs. Peralta labs ( the lab that prints PCB\u0026rsquo;s for EGR 304 and 314) has specific instructions and limitations when it comes to manufacturing a PCB. A complex PCBs made in peralta with many vias and line traces has a higher chance of having a manufacturing error. Also, when many vias are already in place, a new trace might have multiple vias to reach its destination on the board. Depending on the design it could be more beneficial to use a 0 ohm resistor to avoid high line trace areas.\n Note: Through hole components may not fit EGR 314\u0026rsquo;s project requirements. Please check with teaching team if 0 ohm jumper resistor is applicable for EGR 314.  Based on a post written by Zachary Conley\n","permalink":"https://embedded-systems-design.github.io/strategies-for-using-0-ohm-resistors/","tags":["components","circuits"],"title":"Strategies for using 0 Ohm Resistors"},{"categories":null,"contents":"What microcontrollers does Texas Instruments specialize in? Texas Instruments (TI) specializes in low-power, performance, and wireless microcontrollers.\nHow do I choose a TI microcontroller?  TI Parametric Selection Tool from TI  What software do I need to install to program a TI microcontroller? Code Composer Studio (CCS) Integrated Development Environment (IDE) from TI\n Code Composer Forum from TI  What hardware do I need to program a TI microcontroller? Check the manufacturer\u0026rsquo;s web page for the specific microcontroller you are using for specific information on the hardware you need to program it.\nWhat do I need to consider when designing a printed circuit board (PCB) that includes a TI microcontroller? See the microcontroller data sheet for information on PCB layout and external component considerations.\nHow do I use Code Composer Studio?  Code Composer Studio v6 Quick Tips from Code Composer  What online forums focus on TI microcontrollers?  MSP Low-Power Microcontroller Forum from TI  Where do I find code examples for TI microcontrollers?  TI website  ","permalink":"https://embedded-systems-design.github.io/texas-instruments-microcontrollers/","tags":["microcontroller","texas instruments"],"title":"Texas Instruments Microcontrollers"},{"categories":null,"contents":"Check this link\n","permalink":"https://embedded-systems-design.github.io/trace-width-calculator/","tags":null,"title":"Trace Width Calculator"},{"categories":null,"contents":"Introduction In order to create a PCB, you must first prepare the schematic and check for errors, export a netlist of the schematic, import the netlist into PCB editor, and design the PCB. A netlist is a file that describes interconnections among components in a circuit. This tutorial describes the process of transferring a schematic to PCB Editor. It is assumed that you have a completed schematic (see example, Figure 1) before trying to migrate to PCB Editor.\n      Figure 1: Example schematic ready for transfer to PCB Editor   Video Walkthrough  Create Custom Footprints All schematic symbols need a footprint. If you created any custom schematic symbols, you likely need to create a custom footprint for each one. For most ICs, you can use the Package Designer application to make custom footprints. For all other components, you can make custom footprints manually.\nOpen Project and Set Root Design   In Windows, open your project in the Design Entry CIS program.\n  For complex designs (see example, Figure 2), you may have multiple folders with multiple schematic sheets in each folder in the project explorer. Right-click on the folder you want to prepare for transfer to PCB Editor and choose \u0026ldquo;Make Root\u0026rdquo;. This will set Cadence to generate a netlist only for the schematics inside the root folder (which will have a / through the folder symbol). This feature can be useful when your team is working on multiple break-out boards simultaneously before integrating them into one full design.\n      Figure 2: Example folder hierarchy for complex schematic     Assign Footprints to Components   Open the schematic and select all components on the page by choosing \u0026ldquo;Edit \u0026gt; Select All\u0026rdquo;. Right-click and choose \u0026ldquo;Edit Properties\u0026hellip;\u0026rdquo; (see Figure 3) to batch-edit the footprint information. The batch component property editing window will appear (see Figure 4). Click the Parts tab to show the parts in the schematic. Click the \u0026ldquo;Pivot\u0026rdquo; button to see the part information vertically instead of horizontally.\n      Figure 3: \u0026amp;ldquo;Edit Properties\u0026amp;hellip;\u0026amp;rdquo; menu option         Figure 4: Batch component property editing window     Enter footprint names (built-in or custom) for each component. For more information on finding the names of built-in footprints, see Finding Existing PCB Footprints for Cadence PCB Editor. Repeat until all components have footprints.\n  Run Design Rules Check   In the project explorer window, left-click on your schematic (see Figure 7) and choose \u0026ldquo;PCB menu \u0026gt; Design Rules Check\u0026rdquo; (see Figure 8). *(If the Design Rules Check option is dimmed, then you have selected the wrong icon in the project explorer window). *Figure 8 shows the Design Rules Check window. Leave the default options selected and click OK to continue.\n      Figure 7: Schematic icon selected         Figure 8: Design Rules Check\u0026amp;hellip; menu         Figure 9: Design Rules Check window     From there, you will be prompted with the DRC main screen in Figure 9. Keep everything as it is on the main screen and be sure to checkmark all of the boxes in the \u0026ldquo;Rules Setup\u0026rdquo; and \u0026ldquo;Report Setup\u0026rdquo; (see Figures 10 and 11). Doing this will ensure the DRC will check for many possible errors on the schematic. Once you have checked all of the boxes, click \u0026ldquo;Run\u0026rdquo;.\n      Figure 10: Design Rules Check \u0026amp;gt; Rules Setup pane         Figure 11: Design Rules Check \u0026amp;gt; Report Setup pane     After you press \u0026ldquo;Run\u0026rdquo;, several alerts will appear. The first will be to notify you that once you proceed with the DRC, all actions already made cannot be undone (see Figure 12). Click \u0026ldquo;Yes\u0026rdquo;. The second will ask to save all the changes made since the last save (see Figure 13). Click \u0026ldquo;OK\u0026rdquo;.\n      Figure 12: Undo Warning alert         Figure 13: Save changes alert     In the command window, you will see a list of warnings or errors that the DRC has found. If the \u0026ldquo;DRCs\u0026rdquo; window is blank, you are ready to move on and create your PCB design. If not and an error is listed (see example, Figure 14), go back to your schematic and fix the errors. If you see warnings, read each one and consider making the recommended changes before continuing. DO NOT SKIP THIS STEP. Fix any errors identified by the Design Rules Check and repeat steps (f) - (i) until all errors are gone (or determined not to be real problems).\n      Figure 14: DRCs error listing     Create a Netlist   In the project explorer window, left-click on your schematic and choose \u0026ldquo;Tools \u0026gt; Create Netlist\u0026hellip;\u0026rdquo; (see Figure 15). *(If the Create Netlist option is dimmed, then you have selected the wrong icon in the project explorer window). *Figure 16 shows the Create Netlist window. Set the checkboxes as shown below (file names and paths will be specific to your design) and click OK to generate a netlist as shown in Figure 16. The setlist will appear in the folder you save it to. You do not need to open the file after creating it.\n      Figure 15: Tools \u0026amp;gt; Create Netlist\u0026amp;hellip; menu         Figure 16: Create Netlist dialog box     Create/Update a Printed Circuit Board (PCB)  In the Project Explorer window, left-click on your schematic and choose \u0026ldquo;PCB menu \u0026gt; New Layout\u0026rdquo;. (If the New Layout option is dimmed, then you have selected the wrong icon in the Project Explorer window). Figure 17 shows the New Layout window. Select the folder path where you would like yo create your new PCB design next to the \u0026ldquo;Board\u0026rdquo; path and click OK (see Figure 18). To update a PCB design you have already made, select the path where your current board is saved for \u0026ldquo;Input Board File\u0026rdquo; as well as for \u0026ldquo;Board\u0026rdquo;, and click OK (see Figure 19). Once you have clicked OK, the Allegro PCB Editor will automatically open. See the Cadence PCB Tutorials page for more information on creating a PCB.        Figure 17: PCB \u0026amp;gt; New Layout menu         Figure 18: New Layout window configured to create a new PCB design         Figure 19: New Layout window configured to update an existing PCB design   Common Errors Schematic Updated after PCB is Routed It\u0026rsquo;s not uncommon for an error to be discovered in the schematic after the PCB has already been routed. Rework of routing can be fixed as follows:\n Fix the errors in the schematic In the project explorer window, left-click on your schematic (see Figure 7) and choose \u0026ldquo;Tools \u0026gt; Create Netlist\u0026hellip;\u0026quot;. *(If the Create Netlist option is dimmed, then you have selected the wrong icon in the project explorer window). *Figure 9 shows the Create Netlist window. Set the checkboxes as shown above (file names and paths will be specific to your design), but this time set \u0026ldquo;Input Board File\u0026rdquo; to be your current routed PCB file and \u0026ldquo;Output Board File\u0026rdquo; to be a different name for the updated file. Click OK to generate a netlist and push the changes forward to PCB Editor.  Duplicate Reference Designators Sometimes, making significant edits to a schematic can result in multiple components with the same reference designators (e.g., U1, U2, R1, R2). This can be fixed by renumbering all of the reference designators in a schematic.\n Open the project in Design Entry CIS and select the *.dsn file in the project explorer. Choose \u0026ldquo;Tools \u0026gt; Annotate\u0026rdquo;, select \u0026ldquo;Reset part references to\u0026rdquo;?\u0026quot;\u0026rdquo;, and click OK (see Figure 10). Your schematic will now have ? marks for all reference designator numbers (e.g., U?, J?). Choose \u0026ldquo;Tools \u0026gt; Annotate\u0026rdquo; again, select \u0026ldquo;Incremental reference update\u0026rdquo;, and click OK (see Figure 10). This will replace all ? marks with numbers to create unique reference designators.        Figure 10: Annotate window   Additional Common Errors  You changed your \u0026ldquo;nets\u0026rdquo; name but missed a trace somewhere You changed your \u0026ldquo;nets\u0026rdquo; name and connected two different nets together accidentally (e.g., Ground_Plane and Ground) Cadence couldn\u0026rsquo;t find your footprint, or no footprint was specified Missing a *.psm file for the *.dra file, or vice-versa Unconnected traces You used multiple ground symbols and connected them together incorrectly Forgetting to define your paths correctly for footprints to be findable Defining the footprint names for all parts.  Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/transferring-a-cadence-schematic-to-pcb-editor/","tags":["cadence","pcb"],"title":"Transferring a Cadence schematic to PCB Editor"},{"categories":null,"contents":"What is a transistor? A transistor is a type of semiconductor device that can be used as both an amplifier or as an electronic switch.\nReference Practical Electronics for Inventors\nWhat are the different types of transistors? Bipolar Junction Transistor (BJT) come in both NPN and PNP forms\n Insulated Gate Bipolar Transistor  MOSFETs come in many flavors, and all have both N-channel and P-channel forms\n UniJunction Transistors (UJT) Junction Field Effect Transistors (JFET) Depletion Mode MOSFET Enhancement Mode MOSFET Power MOSFET (HEXFET)  What common situations might I need a transistor? How do I choose a transistor from the thousands of options? ","permalink":"https://embedded-systems-design.github.io/transistors/","tags":null,"title":"Transistors"},{"categories":null,"contents":"UART PIC to Argon Tutorial Objectives Getting familiar with UART on both PIC and Particle platforms. In this tutorial, you will set up the PIC as a black box that will respond to various inputs from the Argon. Utilizing the USB serial bus on the Argon, we can verify the project at the end.\nResources Argon Serial Reference\nCuriosity Nano Product Page\nPuTTY\nProcedure   Configure the PIC Device\nFirst you need to create a new project and set it up for your device and how you plan on programming it. For the Curiosity Nano, it will be a PIC16f18446 programmed with the XC8 compiler and the curiosity nano hardware tool.\nHopefully MCC opens automatically and brings you to the System Module page by default. If not, click the MCC button (  ) at the top to initialize it.\n      Figure   On the left side of the screen, find the Device Resources and select EUSART1 to add it to the project.\n      MCC View   For most applications, default settings should be fine. For convenience, I will move the RX and TX pins to RB6 and RB4 respectively.\n      Figure   Click Generate at the top left by Project Resources.\n      Figure   Open up the EUSART1.h header file under the project files. This will have all of the MCC generated functions that can be called to do whatever is needed.\n      Figure   You will want to make sure to call the initialize function first. As a general rule of thumb, you will want to check if RX is ready before you read data and check if TX is ready before you send data. For this tutorial, I will say that if the PIC receives the character â€˜a', it will respond with a 1. If the PIC receives a â€˜b', it will respond with a 2. For all other inputs, it will not respond. Take this as an opportunity to try to read some of the provided documentation and see if you can figure out a solution before continuing on.\nThis is the code that I created for this project:\n      Figure   Click the Hammer button (  ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button (  .)\n  Configure the Particle Device\nConfigure your Particle device to connect it to WIFI and connect to it through build.particle.io\nParticle follows the same language reference as arduino with one small difference. The Serial only applies to the usb port. Serial1 will do the same thing, but only applies to the RX and TX pins.\nThe particle device should be programmed to send out a character and see what response is received, printing both to a usb serial interface. Repeat this process to verify all parts of the PIC code.\nHere is the code that I created: It\u0026rsquo;s not great but it achieves the needed goals. Generally, delays should be avoided as they lock up the processor from doing other things for the duration.\n      Figure   This code can then be flashed to the Particle device using the Flash (  ) button.\n  Connecting the Devices.\nPower should be connected to both the PIC and the Particle devices.\nRX and TX can be connected between the devices making sure to cross the connection. RX goes to TX and TX goes to RX. The transmit of one device will be received by the other.\nThe Particle device should be connected to a computer via USB.\nOpen a PuTTY terminal to the Serial port of the Particle device. You could also use the Serial Monitor of the Arduino IDE as both will do the same thing. Here you should be able to see the characters being printed by the Argon. After each â€˜a', a 1 is received and after each â€˜b', a 2 is received. This shows the devices are communicating properly.\n      Figure     Tutorial written by Mykol Reklaitis, March 2020\n","permalink":"https://embedded-systems-design.github.io/uart-pic-to-argon-tutorial/","tags":["uart"],"title":"UART PIC to Argon Tutorial"},{"categories":null,"contents":"Updating a Part in your Library       Figure: Typical Schematic   Sometimes its necessary to make small changes to your parts as you learn more about them or need to define them better in order to identify more design mistakes during the design process. But it\u0026rsquo;s difficult to know how to propagate these changes to a given schematic. Let\u0026rsquo;s say you have made a part but forgot to add a part outline, but you already connected it up in your schematic.\nSteps   Go into the project explorer and navigate to the library in which your custom part is, and open it up.\n      Figure 1     Make the necessary changes to your part and save using \u0026ldquo;ctrl+s\u0026rdquo; or by right clicking on the active tab and selecting \u0026ldquo;save\u0026rdquo;.\n      Figure 2     Now you need to propagate your changes to your schematic. In the project explorer, go up to the affected schematic, expand until you find the design cache, identify the changed part, right click, and select \u0026ldquo;update cache\u0026rdquo;. Select yes to all the dialog boxes and go back to your schematic.\n      Figure 3     Your schematic is now updated. Make sure you fix any connection problems if you updated pin names or numbers.\n      Figure 4     ","permalink":"https://embedded-systems-design.github.io/updating-a-part-in-your-library/","tags":["ecad","cadence"],"title":"Updating a Part in your Library"},{"categories":null,"contents":"What are bitwise operators? Bitwise operators allow access to individual bits in a variable or register. A typical register or variable is at least 1 byte (8 bits) in size.\nWhat bitwise operators are available in C? \u0026amp;, |, ^, ~, \u0026laquo;, and \u0026raquo;\nWhere can I learn more about bitwise operators? See the Writing C Code for Microcontrollers with Bitwise Operators presentation from Dr. Jordan.\n","permalink":"https://embedded-systems-design.github.io/using-bitwise-operators-in-c/","tags":["programming"],"title":"Using Bitwise Operators in C"},{"categories":null,"contents":"You can use VCC (power) and GND (ground) symbols to connect power and ground instead of manually routing wires across your schematic. This is a common technique used by professional engineers to improve the readability of schematics.\n  With a schematic open Design Entry CIS, click on the Vxx or GND buttons in the toolbar at the top or right side of the screen (see Figure 1)\n      Figure 1: Place power and ground symbol buttons in the toolbar     Select the symbol you would like to use for your design and place it in your design (see Figure 2). You can rename power and ground symbols to assign them to a particular electrical net (e.g., +5V or +12V).\n      Figure 2: \u0026#43;5V and GND symbols connected to a connector     In order to connect multiple components to the same power rail, place the same power or ground symbol with the same net name on your schematic (see Figure 3). Symbols that have different net names will not be connected.\n      Figure 3: Example of \u0026#43;5V and GND symbols connected to multiple components. In this example, pin 1 of J1 is electrically connected to Pin 6 of U2, and Pin 2 of CON2 is electrically connected to pin 21 of U2.     Based on a tutorial written by Robert Goby and updated by Ryan Sparks (2020)\n","permalink":"https://embedded-systems-design.github.io/using-vcc-and-gnd-symbols/","tags":["cadence"],"title":"Using VCC and GND Symbols"},{"categories":null,"contents":"A Gantt Chart is a common project management tool that helps teams understand the phases of a project, deadlines, critical paths, and interdependencies between tasks. It is important to gain experience predicting how long tasks take in order to calibrate your time management.\n Time Management and Project Planning presentation by Drs. Grondin and Bekki  What does a Gantt chart look like?  Example 1 from prior semester Example 2 from prior semester  What software can I use to make a Gantt Chart? Gantt Charts can be made with a variety of software programs. Here are several free options:\n Microsoft Project - Available on MyApps (via Microsoft Imagine). This is the industry-standard project management tool (Windows) ProjectLibre is an open-source alternative to Microsoft Project (Windows, Mac OS X, Linux) RationalPlan Project Viewer is a Microsoft Project file viewer (Windows, Mac OS X, Linux) Gantt charts can also be made in Microsoft Excel, but will not meet the dependency requirements in Dr. Jordan\u0026rsquo;s assignment requirements. Gantter is a cloud-based collaborative Gantt chart tool Microsoft Visio is a general purpose graphical chart generation program with a nice Gantt chart template. It is available on myapps.asu.edu through Microsoft Imagine  ","permalink":"https://embedded-systems-design.github.io/what-is-a-gantt-chart/","tags":["asu","software","project management"],"title":"What is a Gantt Chart?"},{"categories":null,"contents":"A printed circuit board (PCB) is a board made of both conducive and non-conductive materials onto which components can be soldered to create a circuit. The circuit connections are made via copper traces on the board. An example PCB is shown in Figure 1.\n      Figure 1: Printed circuit board    Dr. Jordan has created a Printed Circuit Board Overview describing the anatomy and fabrication of PCBs. Concepts and Terminology used in Printed Circuit Boards page from Electrosoft Engineering  Anatomy of a PCB A PCB is made up of layers. Each layer represents a part of the manufacturing process (e.g., top and bottom copper layers, soldermask layer, silkscreen layer).\nOn the copper routing layers, components are soldered to copper footprints. A footprint is the physical layout on a PCB to which a component is soldered.\nEach footprint has individual pads to which parts of the component (e.g., pins) are soldered.\nHow are PCBs manufactured? In an industrial setting, PCBs are most commonly sent out to manufacturing houses that etch and return PCBs quickly but at very high cost. The following sites describe the PCB manufacturing process:\n Building a Printed Circuit Board from Advanced Circuits Manufacturing of Basic Printed Circuit Boards from Chapter 1.5 of Printed Circuit Boards by R. S. Khandpur.  How do we manufacture PCBs at ASU? See the ASU PCB Fabrication Process blog entry.\n","permalink":"https://embedded-systems-design.github.io/what-is-a-printed-circuit-board/","tags":["pcb"],"title":"What is a printed circuit board?"},{"categories":null,"contents":"Cadence is an electronic computer-aided drafting (ECAD) program commonly used in industry for the design and simulation of electronic circuits and printed circuit boards. The following video by Casey Petersen describes the basics of Cadence:\n What are all of the different Cadence file extensions used for?  Cadence Allegro file extensions and what they contain from Tharanthi  What is the Cadence design and manufacturing process? The Cadence design flow (process) by which a PCB is created with Cadence is described fully in the Introduction to the PCB Design Flow by Example - Chapter 2 in Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner. It is summarized in 4 steps:\n Schematic capture Design simulation (optional in the junior project classes) Printed circuit board layout Printed circuit board manufacturing   ","permalink":"https://embedded-systems-design.github.io/what-is-cadence/","tags":["software","cadence","pcb"],"title":"What is Cadence?"},{"categories":null,"contents":"The Cypress Programmable System on a Chip (PSoC®) is a mixed-signal electronic hardware platform that integrates a microcontroller core, programmable analog signal processing blocks, programmable digital hardware blocks, and capacitive touch sensing. The following is a list of helpful resources for getting started with the PSoC®:\n What is PSoC? video from element14 Training on Demand videos from Cypress Cypress Developer Community Video Library (scroll to the bottom of the page and select the particular PSoC you are using to filter the videos) PSoC Developer forums (very useful when trying to solve problems)  ","permalink":"https://embedded-systems-design.github.io/what-is-psoc/","tags":["cypress","microcontroller","example project","documentation","video"],"title":"What is PSoC?"},{"categories":null,"contents":"Working with Libraries - THIS IS A DUPLICATE TUTORIAL This tutorial details how to add and save a custom library.\n  Open an existing project or create a new project if you are starting from scratch\n  Go to \u0026ldquo;file\u0026ndash;\u0026gt;new\u0026ndash;\u0026gt;library\u0026rdquo;. A new library will be created and added to your project.\n        Figure 1   In the project explorer window, navigate to the newly created library, and right click on it to \u0026ldquo;save asâ€¦\u0026rdquo;        Figure 2    Select the location you would like to save your parts library. This library can be used over and over in multiple projects, so the best place to store it is in one of your top level cadence folders.\n  Create a new part in the library by right clicking on it and selecting \u0026ldquo;new part\u0026rdquo;. A dialog will open that will allow you to define a new part and start designing it.\n        Figure 3   ","permalink":"https://embedded-systems-design.github.io/working-with-libraries/","tags":null,"title":"Working with Libraries"}]