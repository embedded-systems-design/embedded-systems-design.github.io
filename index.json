[{"categories":null,"contents":"Introduction The following is the approach you can use to quickly get software installed\nChocolatey Chocolatey is a windows-based package manager that automates downloading and installing a ton of software for windows. We\u0026rsquo;ll use it where we can.\nopen up powershell (start\u0026ndash;\u0026gt;\u0026ldquo;Windows Powershell\u0026rdquo;) in administrative mode (click on the arrow to the right of \u0026ldquo;Windows Powershell\u0026rdquo; text in the start menu and \u0026ldquo;run as administrator\u0026rdquo;)\npaste in the following line to install chocolatey\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://community.chocolatey.org/install.ps1\u0026#39;)) close the powershell window and open a new powershell window (also in administrator mode). Paste in the following line:\nchoco install -y putty.install kicad vcredist2013 Paste in the following line for some optional but really useful tools:\nchoco install -y adobereader notepadplusplus 7zip grepwin kdiff3 VB 3.5 go to start\u0026ndash;\u0026gt;control panel\u0026ndash;\u0026gt;programs on the left side bar, select \u0026ldquo;turn windows features on or off\u0026rdquo; select \u0026ldquo;.net framework 3.5\u0026rdquo; Visual C++ Redistributable if you did not follow the chocolatey install instructions above you can download it here:\nhttp://updates.cypress.com/updates/prerequisite/vcredist_x86_2013.exe\nDiscrete Installers PSoC Creator Create an account with Infineon Download and install PSoC Creator Choose Typical Installation Once the install completes, select run updater (help\u0026ndash;\u0026gt;update manager) from PSoC Creator and update all packages Cadence (optional for EGR304, required for EGR314) Follow the instructions here to install cadence. Follow the instructions here to configure cadence. PSoC Programmer (optional) PSoC Programmer is included with PSoC Creator install as a plugin, so no need to reinstall.\nCySmart Bluetooth Tool The CySmart Bluetooth Tool\nCySmart Phone App The CySmart Phone App can be installed on your phone to communicate with the bluetooth device directly. (Android / iOS)\n","permalink":"https://embedded-systems-design.github.io/fall-2022-software/","tags":null,"title":"Fall 2022 Software Install"},{"categories":null,"contents":"Introduction A number of basic Cadence tutorial videos are available on YouTube.\nGetting Started In Windows, find and open the application Capture CIS (see Cadence Schematic Tutorials)\nCreate and name a new project and add existing part libraries (see Creating a New Project in Cadence)\nAdd parts to your schematic. First, check to see if the parts you need already exist in a library. For example, schematic symbols for header pins (which are useful for connecting to components external to your custom printed circuit board, like batteries, PSoC® boards, and sensors, see Figure 1) can be found by searching for \u0026ldquo;Header\u0026rdquo; in the Place Part dialog box (see Figure 2)\nFigure 1: Header Figure 2: Place Part dialog box Create a custom library to store custom schematic symbols for your design that are not included in the built-in libraries (very common), and add it to your project (see Creating a Custom Library in Cadence)\nCreate and save custom schematic symbols in your custom library. If you later need to edit a custom schematic symbol, make sure to replace the edited symbol in the cache (see Creating a Custom Schematic Symbol in Cadence)\nCreate printed circuit board footprints for all components on your printed circuit board\nFor electronic devices with DIP/SOIC/PLCC/QFP/PGA/SIP/ZIP packages (which are typically integrated circuits and plug-in modules with evenly-spaced pins), it is easiest to use the \u0026ldquo;Package Symbol Wizard\u0026rdquo; (See Creating a Custom PCB Footprint using Package Designer in Cadence)\nFor all other components, create custom footprints manually (see Creating a Custom PCB Footprint Manually in Cadence)\nCreate custom padstacks for the pads of each custom footprint (See Creating a Custom Padstack in Cadence)\nLink all footprints to schematic symbols in Design Entry CIS by updating the library search path (see Changing the Library Search Path in Cadence Design Entry CIS)\nLink all footprints to schematic symbols in PCB Editor by updating the library search path (see Changing the Library Search Path in Cadence PCB Editor)\nTransfer the schematic to PCB Editor for the PCB layout and design (see Transferring a Cadence Schematic to PCB Editor)\nPrepare and submit your PCB Layout for fabrication\nBased on a tutorial by Cody Van Cleve\n","permalink":"https://embedded-systems-design.github.io/getting-started-with-cadence/","tags":["tutorial","cadence"],"title":"Getting Started with Cadence"},{"categories":null,"contents":"Installation System Requirements PC: Windows 10 (64-bit) Professional, Windows Server 2012 and 2012 R2, Windows Server 2016, or greater (Hardware and Software Requirements). Note that Cadence does not support Windows 10 Starter nor Home Basic. Mac: Windows 7, 8, 8.1, 10 or greater running on Boot Camp or Parallels Before Installing Cadence has been known to change environment variables used by other software. One of those is the HOME variable. If left unset, it will add this variable and define it as C:\\Cadence\\SPB_Data-Silent\\\nIt is therefore recommended to set that variable so that your other software remains working\nOpen up the file explorer (win+e)\nNavigate to \u0026ldquo;This PC\u0026rdquo;, right click and select properties.\nIn the \u0026ldquo;Related Settings\u0026rdquo; section, select \u0026ldquo;advanced system settings\u0026ndash;\u0026gt;environment variables\u0026rdquo;\nIn the top window (User Variables for \u0026lt;yourusername\u0026gt;), look for the HOME environment variable. If it exists, you leave it as is\nIf it doesn\u0026rsquo;t exist, select \u0026ldquo;new\u0026rdquo; In variable name, type HOME (all caps) In the value field, enter the path to your user directory C:\\Users\\MYUSERNAME. You can browse to the right directory Save your changes.\nInstructions Go to myapps.asu.edu to download Cadence 17.4 Double-click the Cadence2020.zip file to decompress the installer. You can delete the ZIP file after it is decompressed. Open the Cadence2020 folder and double-click InstallTPSCadence.vbs to initiate the installation. There is no status bar or completion message during the installation process, which may take up to an hour. You will know it is complete when the installer icon disappears from the task bar. You can delete the installation folder after it has finished installation. Follow the Configuring Cadence instructions to configure and optimize Cadence for the ASU Polytechnic engineering programs. Using Cadence On Campus Cadence is available in the following computer labs at ASU: PRLTA 103, PRLTA 109, and PRLTA 117. You can also use Cadence on campus when connected to the ASU wifi network. Using Cadence in On Campus Housing or Off Campus In order to use Cadence on your computer either in on-campus housing or off campus, you must have two-factor authentication enabled on your account (instructions) and connect to the ASU VPN prior to launching Cadence. This allows Cadence to connect to the ASU license server.\nMost Common Errors Q: What if I don\u0026rsquo;t have enough hard drive space to install Cadence on my computer?\nA:\nFree space on your hard drive Use an external hard drive on your computer to move other files off of C:\\ to make space for Cadence. Cadence will only run properly off of C:\\. Use Cadence on the computers in PRLTA 103/109/117 Q: During installation, I get an error about a potential Trojan horse. What should I do?\nA: Right click on the installer and click \u0026ldquo;Run as administrator\u0026rdquo;.\nQ: During installation, the installer fails because it cannot find a file. What should I do?\nA: Make sure to unzip the Cadence17.4.zip file to a folder before running Install_Cadence17.4.exe. Also make sure that there are no spaces in the folder path that in which the installer is located.\nQ: What is the right license server for Cadence 17.4?\n**A: ** 5280@enlicense3.fulton.asu.edu\n","permalink":"https://embedded-systems-design.github.io/installing-cadence/","tags":["asu","software","cadence","pcb"],"title":"Installing Cadence"},{"categories":null,"contents":" Take a look at the datasheet for the TO-220 package the regulator comes in. variable \u0026ldquo;b\u0026rdquo; indicates pin width, with a minimum width of .61mm and a maximum width of .88mm. The maximum thickness of the pin is .70mm Let\u0026rsquo;s make sure our hole is big enough.\ndimensions if the maximum width $w$ is .88mm and the maximum thickness $t$ is .70mm, then the maximum possible hypotenuse $h$ is $h=\\sqrt{w^2+t^2}$, or 1.12mm. Setting the drill size to that maximum possible value will ensure all parts fit, though there may be some slop in standard parts.\nEnter the rest of the values that matter. In the case of this package, we care about the pin pitch (2.4mm) and the pad width and height.\nPads that are too large will get too close to their neighbor and risk a short, especially during soldering. Pads that are too small may not be manufacturable with some processes, and are more likely to be stripped off during soldering. Try to split the difference between these two extremes. The DFM check (upcoming tutorial) will also help you understand your limits.\nCreate a new footprint library for your project.\nIt\u0026rsquo;s probably a good idea at this early stage in your PCB design career to associate your footprint library with your project. You may make different decisions later.\nSave the footprint in the new footprint library\nFigure Figure Figure Figure Figure Figure Figure Figure Figure Figure Figure ","permalink":"https://embedded-systems-design.github.io/kicad/transferring-kicad-schematics-to-pcb/kicad-footprint-wizard/","tags":null,"title":"Using the KiCad Footprint Wizard"},{"categories":null,"contents":"Introduction Prior to transferring a schematic to a PCB design, it is necessary to assign footprints to each symbol in your schematic\nOpen your schematic Right-click on a symbol and select \u0026ldquo;Edit Footprint\u0026rdquo; (or, with your mouse over a symbol, type \u0026ldquo;f\u0026rdquo;) A dialog will open. If unassigned, the \u0026ldquo;footprint\u0026rdquo; field will be empty Click on the library icon next to the \u0026ldquo;footprint\u0026rdquo; field to open up KiCad\u0026rsquo;s footprint libraries The list of libraries is visible in the left navigation pane, and the list of footprints is available in the list to its immediate right. In the right view window, a preview of the selected footprint loads upon selection. Find the correct footprint and select the \u0026ldquo;insert footprint on board\u0026rdquo; icon. Repeat the above steps for every part in your schematic. Figure Figure Figure ","permalink":"https://embedded-systems-design.github.io/kicad/transferring-kicad-schematics-to-pcb/assigning-footprints/","tags":null,"title":"Assigning Footprints"},{"categories":null,"contents":"Resources KiCad.org KiCad Documentation Installation Full instructions can be found on the Fall 2022 Sofware page.\nSetup Select the default setup option when you first load KiCad\nSelect Default Settings ","permalink":"https://embedded-systems-design.github.io/kicad/kicad-installation-and-setup/","tags":null,"title":"KiCad Installation and Initial Setup"},{"categories":null,"contents":"TL/DR RX0 / TX0 are used by the onboard silabs USB/serial chip and shouldn't be used for UART in your project Pinouts / Schematics from https://randomnerdtutorials.com/getting-started-with-esp32/ Espressif ESP32-WROOM-32 Datasheet ESP32-Devkit-C Page Devkit Technical Documents External Pinout Resources https://johnmu.com/picking-esp32-dev-board/ https://www.etechnophiles.com/esp32-dev-board-pinout-specifications-datasheet-and-schematic/ https://www.studiopieters.nl/esp32-pinout/ MicroPython MicroPython for ESP32 firmware download page ESP32 Micropython Documentation quickref Asynchronous micropython-based MQTT repository Python IDE ESP32 Installation and Setup Working With Thonny ","permalink":"https://embedded-systems-design.github.io/overview-of-the-esp32-devkit-doit-v1/","tags":["esp32","python","micropython"],"title":"Overview of the ESP32 DevKit DOIT V1"},{"categories":null,"contents":"Introduction Resources LM3178 (On Digikey | datasheet) KiCad.org KiCad Documentation Common Pin Types and their Meanings Steps Open up KiCad (start \u0026ndash;\u0026gt; KiCad) and select the Symbol Editor\nOpen Symbol Editor If this is the first time running the symbol editor, you will be asked to configure the global symbol library table. Select the default option.\nConfigure Global Symbol Library Table Select File\u0026ndash;\u0026gt;New Library\nStep 2 Give the library a name unique to yourself\nName your library In the main editor, create a new symbol\nCreate new symbol Fill in Symbol information\nFill in Symbol Info Create a rectangle\nCreate a Rectangle Place the rectangle in the working area. It doesn\u0026rsquo;t have to be precise yet.\nPlace Rectangle Create a Pin to go along the bottom of the part (similar to its package)\nCreate a Pin Fill in Pin information, including pin name, number, type, and orientation. Refer to the datasheet.\nFor example, pin one should be an \u0026ldquo;input\u0026rdquo; pin\nPin 1 Pin 2 is a voltage out pin type\nPin 2 Pin 3 is a voltage input type\nPin 3 Finally, adjust pins and boxes to get the final look and feel of the device. Select the parts you wish to move, right click and select \u0026ldquo;move\u0026rdquo; (or type \u0026ldquo;m\u0026rdquo;)\nAdjust Pins and Box Save and Close.\n","permalink":"https://embedded-systems-design.github.io/kicad/kicad-schematic-design/kicad-symbol-creation/","tags":null,"title":"Symbol Creation"},{"categories":null,"contents":"Introduction In the last tutorial you created a schematic. But is it any good? The electrical rules check, or ERC, is a useful way to debug your circuit. This example tutorial takes you through the process of finding and eliminating circuit design errors.\nResources Steps Open up the adjustable voltage regulator circuit from the previous tutorial.\nPrior Schematic Go to inspect \u0026ndash;\u0026gt; \u0026ldquo;electrical rules checker\u0026rdquo; in the menu.\nOpen ERC Select run and inspect the results. There should be two errors.\nTwo Errors These errors indicate that the 12V and ground power connections are not connected to a source. Which is true! We forgot to add an external power connector to the board design, as in power from the wall or from an off-board battery!\nThese errors can be resolved by adding a power connector. Select add part\nAdd Part Search for \u0026ldquo;screw terminal\u0026rdquo; and select the 1x2 version (one row, two positions).\nSelect a screw terminal Place the screw terminal and wire it up\nPlace part Wire it Because the 12v and ground symbols are \u0026ldquo;power ports\u0026rdquo;, you can use as many of them as you want in your schematic, because they all signify the same thing, rather than a copy. So for the purposes of ERC, place a separate ground symbol (the same symbol as you used before) near the second pin of the screw terminal and wire it up.\nAdd GND Wire GND Run Annotations (assign reference designators)\nRun Annotations Run ERC again\nOpen ERC Run ERC See Errors Why are there still errors? The screw terminal pins are \u0026ldquo;passive\u0026rdquo; pins; they don\u0026rsquo;t indicate a power connection. To solve this you must explicitly state that pins 1 and 2 of the screw terminal are power outputs.\nDouble click on the screw terminal\nOpen Symbol Properties Click Edit Symbol\nEditing a symbol of a built-in library directly from within a schematic will only impact that schematic; it will not be propagated back to the library.\nChange pin 1 and 2 to \u0026ldquo;power output\u0026rdquo; types\nSelect Power Output Save and close the symbol editor window.\nSave Symbol Re-run ERC one last time\nOne Warning The one remaining warning indicates that you have locally edited a symbol within the schematic. This was intentional in our case, and can be ignored.\nDelete Markers You can delete the markers (little arrows in your schematic) generated by ERC by opening up the ERC tool and selecting the \u0026ldquo;delete markers\u0026rdquo; button\nDelete Markers ","permalink":"https://embedded-systems-design.github.io/kicad/transferring-kicad-schematics-to-pcb/kicad-electrical-rules-check/","tags":null,"title":"Electrical Rules Check (ERC)"},{"categories":null,"contents":"Install Miniconda and packages You need to use Python on your PC to program the ESP32.\ninstall miniconda (win64 quick link). Follow this tutorial for detailed instructions.\nInstalling Thonny and other Packages: Open up powershell (win+x, i) and\ntype conda install -c conda-forge wrapt\ntype pip install esptool thonny\nNote: on Mac, open up terminal or xterm and type pip3 install esptool thonny\nInstall Device Drivers The device drivers will help your computer recognize the ESP32 as a USB Device\nInstall Silabs cp210x driver (windows download)\nThis step is required if the device is not recognized as a virtual COM port.\nOpen Device Manager and Select Update Driver Browse specific directories Select the directory Let it Install Done Flashing the ESP32 Firmware for MicroPython download firmware (I don\u0026rsquo;t recommend v1.18, use the nightly build as it contains several more recent fixes to PWM)\nopen cmd and type thonny\nStart Thonny open up tools\u0026ndash;\u0026gt;options, select the \u0026ldquo;interpreter\u0026rdquo; tab and ensure that \u0026ldquo;Micropython (ESP32)\u0026rdquo; is selected. Select the \u0026ldquo;Silicon Labs CP210X USB to UART Bridge Com(XY)\u0026rdquo; down below.\nOpen Tools\u0026amp;ndash;\u0026amp;gt;Options Select Interpreter Tab, then the ESP32 Interpreter Select the Port Selection Made Before selecting ok, in the bottom right hand corner select \u0026ldquo;install or update firmware\u0026rdquo;. select the right port corresponding to the \u0026ldquo;Silicon Labs CP210X USB to UART Bridge Com(XY)\u0026rdquo;\nInstall or Update Firmware select the firmware you downloaded, (e.g. \u0026ldquo;esp32-20220117-v1.18.bin\u0026rdquo;) and hit \u0026ldquo;install\u0026rdquo;.\nSelect Firmware File Hit install wait for the install to finish\nDone Look at the interpreter window. You should see:\nMicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \u0026#34;help()\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; Blank type print('hello, world!') into the shell and that\u0026rsquo;s it! You should have a working python interpreter loaded on your ESP32!\nHello World! Mac Specific Suggestions: use terminal or xterm if you have it as Macs do not have powershell\nuse pip3 install ... instead of pip install ... with the most recent flavors of MacOS\nmake sure pip or pip3(Mac) is updated to avoid installation errors\npython3 -m pip install --upgrade pip Mac doesn\u0026rsquo;t do COM, but can list USB devices. In your terminal, type:\nls -al /dev/tty. then unplug your ESP32 and run the previous command again to see which name for the device is the ESP32\nwhen selecting the port, there may be two Silicon Labs CP210X USB to UART Bridge (ESP device name here) devices. Watch the messages in the terminal to determine the correct selection (obviously, don\u0026rsquo;t use the one that says error/cannot find/etc.)\nwhen running the program you may need to press ctrl + c twice within thonny\nIssues If you install on a computer where you don\u0026rsquo;t have administrative access, it is still possible to install but you have to remember a couple things:\nAfter instlling anaconda, you must add it to your path every time you want to run it.\nStart \u0026ndash;\u0026gt; \u0026ldquo;cmd\u0026rdquo;\nset PATH=C:\\Users\\\u0026lt;MYUSERNAME\u0026gt;\\Miniconda3;C:\\Users\\\u0026lt;MYUSERNAME\u0026gt;\\Miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\\u0026lt;MYUSERNAME\u0026gt;\\Miniconda3\\Library\\usr\\bin;C:\\Users\\\u0026lt;MYUSERNAME\u0026gt;\\Miniconda3\\Library\\bin;C:\\Users\\daukes\\Miniconda3\\Scripts;%PATH%\nReplace with your username; confirm the path exists. This step is required every time you load thonny if you installed \u0026ldquo;just for me\u0026rdquo; or are on an administratively locked pc. ","permalink":"https://embedded-systems-design.github.io/esp32-installation-and-setup/","tags":["esp32","python","micropython","thonny"],"title":"ESP32 Installation and Setup"},{"categories":null,"contents":"Introduction Resources LM3178 (On Digikey | datasheet) Symbol Creation Tutorial KiCad.org KiCad Documentation Steps Open KiCad\nCreate a new project (File\u0026ndash;\u0026gt;New Project)\nCreate a New Project Give the project a unique name with date or version number\nAssign a Name to the Project Select the schematic and double click it to open\nOpen the Schematic Add a Part\nAdd a Part If this is the first time running the symbol editor, you will be asked to configure the global symbol library table. Select the default option.\nConfigure the Library Table Select the library and part you created in the \u0026ldquo;Symbol Creation\u0026rdquo; tutorial.\nYou can move the symbol around the screen. Left click to place it\nOpen the datasheet for reference. What is the acceptable range of input voltage?\nAdd a power port for 12V. Select \u0026ldquo;Add power port\u0026rdquo; from the right side tools\nSearch or browse for \u0026ldquo;12V\u0026rdquo;. Select it, select okay.\nSelect 12V Drag the symbol around\nRepeat the last step, this time adding \u0026ldquo;GND\u0026rdquo;\nSelect Ground Look at the \u0026ldquo;basic\u0026rdquo; example in the datasheet (Figure 6). You will need to add resistor(s).\nAdd a part and search for \u0026ldquo;resistor us\u0026rdquo;. Select the \u0026ldquo;R_US\u0026rdquo; part that comes up\n_KiCad\u0026rsquo;s default resistor follows a different standard than the US standard resistor. Whenever possible select the \u0026ldquo;US\u0026rdquo; version of parts.\nSearch for \u0026amp;ldquo;Resistor US\u0026amp;rdquo; Select the R_US text in the part that you place. Replace the text with the value of the resistor in Ohms. You can use \u0026ldquo;10k\u0026rdquo; or \u0026ldquo;10kOhm\u0026rdquo; to denote kilo-Ohms, just be consistent. (Note, this value is just a dummy value, you will need to select your own resistance)\nSelect R_US Assign a Value The value is displayed Repeat the last two steps, this time adding \u0026ldquo;Resistor_Variable_US\u0026rdquo;. Select the \u0026ldquo;R_Variable_US\u0026rdquo; part that comes up and replace the text with the value of the resistor in Ohms. You can use \u0026ldquo;10k\u0026rdquo; or \u0026ldquo;10kOhm\u0026rdquo; to denote kilo-Ohms, just be consistent. (Note, this value is just a dummy value, you will need to select your own resistance)\nSelect \u0026amp;ldquo;Resistor_Variable_US\u0026amp;rdquo; Update the Value The updated value is displayed Arrange your parts on the page using the move command.\nPlacing your cursor over a part, you can simply type \u0026ldquo;M\u0026rdquo; on your keyboard, or right click and select \u0026ldquo;Move\u0026rdquo; Move your cursor to where you\u0026rsquo;d like to place the part and left click to accept. Repeat as needed. Wire your parts together\nplacing your cursor over one of the circular \u0026ldquo;ports\u0026rdquo; by each symbol, type \u0026ldquo;W\u0026rdquo;\nor you can also select the wire tool from the right side of the page\nor you can left click any unwired port to activate the wire tool.\nNumber your parts\nReference designators are the text fields by each symbol that uniquely identify the individual part on the schematic (Initially they may say R?, U?, etc). Each part must have a unique reference designator. If you are aiming to maintain consistency with an existing schematic, attempting to use the same reference designators as a reference circuit diagram, etc, it may make sense for you to manually number your parts.\nTo manually number your parts, simply click the desired reference designator and assign it a unique ID, typically a capital letter followed by a number\nresistors typically look like \u0026ldquo;R1\u0026rdquo;, \u0026ldquo;R2\u0026rdquo;, etc. capacitors typically look like \u0026ldquo;C1\u0026rdquo;, \u0026ldquo;C2\u0026rdquo;, etc. other devicds often look like \u0026ldquo;U1\u0026rdquo;, \u0026ldquo;U2\u0026rdquo;, etc. \u0026hellip;for more information search for reference designator conventions in the KiCad documentation or on Google. To automatically number your parts, go to Tools \u0026ndash;\u0026gt; annotate schematic in the menu\nAnnotation Tool when the window opens, it will give you a number of options.\nYou can choose whether to number top-to-bottom first or left-to-right first. You can also choose whether to keep existing annotations (reference designators) and only assign unassigned parts, or to renumber everything. You can also choose to annotate a selection, a current sheet, or the entire project \u0026hellip;there are other options that you can read more about in KiCad\u0026rsquo;s documentation. Accept the options you have selected, and you should see that the chosen parts now have a unique reference designator assigned to them.\nSave your schematic.\n","permalink":"https://embedded-systems-design.github.io/kicad/kicad-schematic-design/kicad-schematic-capture/","tags":null,"title":"Schematic Capture"},{"categories":null,"contents":"Modified from here\nPin Type Description Input A pin which is exclusively an input. Output A pin which is exclusively an output. Bidirectional A pin that can be either an input or an output, such as a microcontroller data bus pin. Tri-state A three state output pin (high, low, or high impedance) Passive A passive symbol pin: resistors, connectors, etc. Free A pin that can be freely connected to any other pin without electrical concerns. Unspecified A pin for which the ERC check does not matter. Power input A symbol’s power pin. As a special case, power input pins that are marked invisible are automatically connected to the net with the same name. See the Power Ports section for more information. Power output A pin that provides power to other pins, such as a regulator output. Open collector An open collector logic output. Open emitter An open emitter logic output. Unconnected A pin that should not be connected to anything. ","permalink":"https://embedded-systems-design.github.io/kicad/kicad-schematic-design/kicad-common-pin-types/","tags":null,"title":"Common Pin Types and their Meanings"},{"categories":null,"contents":"Coming Soon\u0026hellip;\n","permalink":"https://embedded-systems-design.github.io/kicad/kicad-pcb-design/kicad-design-for-manufacturability/","tags":null,"title":"DFM -- Design for Manufacturability"},{"categories":null,"contents":"Coming Soon\u0026hellip;\n","permalink":"https://embedded-systems-design.github.io/kicad/kicad-pcb-design/generating-kicad-artwork/","tags":null,"title":"Generating Artwork"},{"categories":null,"contents":"Generating Schematic PDFs Add Title Block Information Open your project and then your schematic.\nFigure Click in the title block region. A popup menu will appear, which allows you to enter a variety of information into the title block region\nFigure Click the \u0026ldquo;\u0026laquo;\u0026rdquo; button next to the \u0026ldquo;issue date\u0026rdquo; field to copy today\u0026rsquo;s date in, or manually type the correct date of the revision.\nIndicate the revision number\nIn the \u0026ldquo;Title\u0026rdquo; field, describe the schematic shown with as much detail as possible\nExample: \u0026ldquo;Automatic Sunglasses Windshield Wiper Motor Driver\u0026rdquo;\nIn the Company Field, add your team number and name.\nExample: \u0026ldquo;Team 100: Automatic Sunglass Windshield Wipers\u0026rdquo;\nClick ok. The information will automatically populate in the correct spot.\nFigure Plot Click the \u0026ldquo;plot\u0026rdquo; button (next to the \u0026ldquo;print\u0026rdquo; button but different.)\nSelect PDF as the output format\nKeep other selections default.\nSelect \u0026ldquo;Plot All Pages\u0026rdquo; to generate\nFigure Generating PCB PDFs Zipping Project Files From the (main) KiCad project window, select file \u0026ndash;\u0026gt; \u0026ldquo;archive project\u0026rdquo; Select the file location and select \u0026ldquo;ok\u0026rdquo;. Warning: Zipping the project files will not zip any external symbol or footprint libraries. These must either be included within the project (you can define \u0026ldquo;global\u0026rdquo; or \u0026ldquo;project\u0026rdquo;-based footprint libraries when you create a new library for the first time) or zipped up separately.\n","permalink":"https://embedded-systems-design.github.io/kicad/packaging-kicad-files-for-submission/","tags":null,"title":"Packaging KiCad Files for Submission"},{"categories":null,"contents":"Printed Circuit Board Submission Process **NOTICE: Starting 2/14/2018 the Peralta Engineering Studios can only produce boards that are tied to a class. ** **Each board must be submitted as a separate ticket to avoid confusion in manufacturing. **\nVerify that your PCB design fits within our fabrication capabilities.\nExport Gerber files from your preferred PCB editor.\nRun a Design for Manufacturing checking with DFM Now and fix any errors identified.\nPrint a 100% sized copy of your PCB design and physically place all components on the printout to confirm that the footprints are correct. This is particularly important for ICs, connectors, and daughterboards. Show your successful DFM check results to a TA or professor so they can document approval of your PCB design for fabrication.\nPlease go to fultonapps.asu.edu/polylab submit files. Include the following information in the request details:\nProfessor and class Quantity of boards (only 1 allowed per design; exceptions allowed with professor approval) Solder mask needed? (only allowed for final board designs) Rub out area needed? If yes, specify location Copper thickness (default is 0.5 oz) Zip all files together in one zip folder with your Lastname.Firstname.zip\nTop.art Bottom.art Outline.art Drill.drl SolderMaskTop.art SolderMaskBottom.art Once the job has been accepted you will receive an email with the status changed on your ticket.\nYou will receive an email from Poly Lab Request Notification System within 3 \u0026ndash; 4 days when your PCB is ready to be picked up. If you are interested in learning about and being a part of the fabrication process with the LPKF mill, please take a look at this video.\nAfter receiving your PCB, make sure to do a continuity test on all traces and vias before adding parts and soldering.\n*If you have any questions, please contact *Peralta.Labs@asu.edu.\n","permalink":"https://embedded-systems-design.github.io/printed-circuit-board-process/","tags":null,"title":""},{"categories":null,"contents":"Objectives Getting familiar with the MPLAB X programming environment to program the PIC16F18446 Curiosity Nano development board. In this tutorial, you will learn to set up the general-purpose input/output pins (GPIO), external interrupts (ISR), pulse-width modulation (PWM), as well as the timer module for the PWM.\nResources PIC16F18446 Curiosity Nano Hardware User Guide PIC16F18446 Datasheet Using GPIO in MPLAB® X with MCC What is an Interrupt? Implementing Interrupts using MPLAB® Code Configurator 1. Create Your First Project After finish installing the MPLAB X IDE, you can plug the USB mini cable into the Curiosity USB debugging port. Once you plug the USB to your PC, a green LED will light up. This indicates the Curiosity board has been powered up.\nTo create a new project, go to \u0026ldquo;File\u0026rdquo; - \u0026ldquo;New Project\u0026rdquo; - select \u0026ldquo;Standalone Project\u0026rdquo; - and click \u0026ldquo;**Next \\ **\u0026rdquo;\nSelect Device as \u0026ldquo;PIC16F18446\u0026rdquo; and click \u0026ldquo;**Next \\ **\u0026rdquo;\nIf you have your Curiosity Nano connected to your PC, the serial number of the device will show up.\nSelect the serial number of your Curiosity board and click \u0026ldquo;Next \\ .\u0026rdquo;\nNow you will have to select a compiler for the MPLAB X. If you haven\u0026rsquo;t installed Microchip XC8 Compiler, you can install it by clicking the \u0026ldquo;Download Latest.\u0026rdquo;\nOnce the XC8 compiler has been installed, select the \u0026ldquo;XC8\u0026rdquo; as the compiler for this project.\nThe last step is to give a name to your first project as well as the location where you want to put your project.\n2. Install MPLAB Code Configurator Once you have all MPLAB X IDE installed, you can install the MPLAB Code Configurator\nSelect \u0026ldquo;Plugins\u0026rdquo; under \u0026ldquo;Tools\u0026rdquo; Select the second tab (\u0026ldquo;Available Plugins\u0026rdquo;) and check the \u0026ldquo;MPLAB Code Configurator.\u0026rdquo;\nClick \u0026ldquo;Install\u0026rdquo; to install this plugin.\nOnce the Code Configurator has been installed, you can open it by clicking \u0026ldquo;Tools\u0026rdquo; - \u0026ldquo;Embedded\u0026rdquo;.\n3. Getting Familiar with Code Configurator The screenshot above is the layout of the main page of the Code Configurator Pin Manager (Blue Area)\nConfigure the direction (Input/Output), external interrupt, and PWM of GPIO pins in this area.\nAvailable Device Resources (Red Area)\nPeripherals (UART, PWM, I2C, SPI, etc) that available to the microcontroller.\nUsed Resources (Yellow Area)\nThe peripherals have been added/used in the microcontroller.\nResources Setups/ Register Setup (Blue Area)\nThe detailed register set up for the selected peripheral.\nCode Generate Button (Pink Button)\n4. Lab Tutorials 4.1 Make an onboard LED blink In this lab, you will turn on and off the onboard LED (LED0) by using a GPIO pin on the Curiosity.\nRequired Hardware: Curiosity Nano\n4.1.1 Code Configurator Setup From Curiosity Nano Hardware User Guide, we know that the onboard LED has been routed to pin RA2.\nDouble Click Pin Module under Project Resources.\nLock the Port A - Pin 2 to GPIO - Output.\nClick the Generate button to generate code for the GPIO module.\nThe Code Configurator setup for Lab 4.1 should look like this:\nSetting up the RA2 as GPIO output pin 4.1.2 MCC (Microchip Code Configurator) Generated Files and Main.c Go back to Projects, you will see two subfolders called MCC Generated Files under both Header Files and Source Files. These folders contain the generated code, functions, and macros by MCC (Microchip Code Configurator).\nThe list of MCC generated functions or macro could be found at the header files. (A header file is a file with extension .h which contains C function declarations and macro definitions to be shared between several source files.)\nSince we only use GPIO as our peripheral, we can double click the \u0026ldquo;pin_manager.h\u0026rdquo; and see all the macros that MCC generated for us.\nTo enable the onboard LED, we can use the following macros (also highlighted at the screenshot below):\nMacros Purpose of the Macro IO_RA2_SetHigh() Set pin RA2 as logic High IO_RA2_SetLow() Set pin RA2 as logic Low IO_RA2_Toggle() Set pin RA2 opposite to the previous logic state Go back to the \u0026ldquo;main.c\u0026rdquo; and use the macros inside the main function.\nYou can also add a delay function in order to see the on and off transition of the LED.\nIO_RA2_SetHigh(); //Set RA2 (LED0) to logic high, turn on __delay_ms(1000); //delay IO_RA2_SetLow(); //Set RA2 (LED0) to logic low, turn off Now your main function should look something like this:\nMain.c for Lab 4.1 Click the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .)\n4.2 Make More LEDs Blink In this lab, we will learn how to blink the external LEDs using pin RC1 and RC3 from the Curiosity Nano.\nRequired Hardware: Curiosity Nano, Breadboard, 220 Ohm resistors x2, Green LED x2\n4.2.1 Hardware Setup Place headers on all ground (GND) pins of the Curiosity Nano. Connect the GND pin to the negative rail on the breadboard using a jumper cable.\nPlace header on both pin RC1 and RC3.\nPlace the first 220 Ohm resistors to RC1 and then place the second 220 Ohm resistor to RC3. (What is a current limiting resistor?)\nConnect the Anode of the LED to the resistor. Connect the Cathode to Ground.\nA simplified schematic for the Hardware Setup for this Lab.\nThe Hardware Setup for Lab 4.2 should look like this:\nLab 4.2 Hardware Setup\n4.2.2 Code Configurator Setup Open Pin Manager: Grid View, lock both Port C - Pin 1 and Port C - Pin 3 to GPIO - Output. Click the Generate button to generate code for GPIO module. 4.2.3 GPIO Setup Go back to Project, open \u0026ldquo;pin_manager.h\u0026rdquo;. You can see macros for IO_RC1 and IO_RC3 has been generated and ready for use.\n4.2.4 Lab Activity Can you write a program in \u0026ldquo;Main.c\u0026rdquo; and make the external LEDs blink in sequence?\n4.3 Setting Up PWM (Pulse-Width Modulation) In this lab, we will set up PWM (Pulse-Width Modulation) on the Curiosity board and create a breathing LED effect.\nRequired Hardware: Curiosity Nano\n4.3.1 Code Configurator Setup Under Device Resources, add PWM6 module to Project Resources.\nPWM Setup Page\nUnder the Notification [MCC], the warning tells us to configure Timer2 for the PWM6 module.\nFind **TMR2 (**Timer 2) under the Device Resources and add TMR2 as peripherals.\nChange the Clock Source to FOSC/4. Keep the Prescaler and Postscaler as 1:1.\nSetting the TMR2 (Timer 2) Clock Source as \u0026ldquo;FOSC/4\u0026rdquo;\nGo back to Pin Manager: Grid View. Now you will see two extra rows. One of them is the PWM6 module, and the other one is the TMR2 (Timer 2) module. Lock the Port A - Pin 2 to PWM6 row.\nSetting the PWM6 to Port A - Pin 2 Click Generate button to generate code for both PWM and Timer module.\n4.3.2 PWM Duty Cycle Setup Go back to Project, you should be able to see pwm6.h, tmr2.h, pwm6.c, and tmr2.c have been generated. Open \u0026ldquo;pwm6.h\u0026rdquo;, scroll down and you can find there\u0026rsquo;s a custom function named PWM6_LoadDutyValue.\nPWM6_LoadDutyValue allows you to change the PWM duty cycle.\nThe Custom Function \u0026amp;ldquo;PWM6_LoadDutyValue\u0026amp;rdquo; at \u0026amp;ldquo;pwm6.h\u0026amp;rdquo; According to the datasheet of the PIC16F18446, we know that the resolution of the PWM can go up to 10-bit resolution. Therefore, the total number of PWM steps can be calculated as follows:\n${2^{10}\\ = \\ 1024}^{}\\text{steps}$\nIn this case, we can calculate and get the PWM module outputting at 50% duty cycle.\n${50%\\ Duty\\ Cycle\\ = \\ 1024\\ \\times 50% = \\ 512}^{}$\nFrom the coding standpoint, we can use the following code to achieve a 50% PWM duty cycle to RA2 pin:\nPWM6_LoadDutyValue(512); // 50% duty cycle for PWM 4.3.3 Make an LED Breathe The idea of making LED breathing is to dim the LED with different PWM duty cycle.\nTry following code in your Main.c program:\nfor (int i = 0; i\u0026lt;1024; i++) // increase duty cycle to 100% { PWM6_LoadDutyValue(i); __delay_ms(1); } for (int i = 1023; i\u0026gt;= 0; i--)// decrease duty cycle to 0% { PWM6_LoadDutyValue(i); __delay_ms(1); } Click the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .)\n4.4 Button Controlled LED In this lab, we will learn about the ISR (Interrupt Service Routine) and use ISR to light up the onboard LED.\nRequired Hardware: Curiosity Nano x1\n4.4.1 Code Configurator Setup Under Device Resources, find Ext_Interrupt under Device Resources.\nAdd EXT_INT module to Project Resources.\nFrom Curiosity Nano Hardware User Guide, we know that the onboard mechanical switch (SW0) has been routed to pin RC2. When the mechanical switch (SW0) is pressed, it will drive the RC2 to the ground (GND).\nUnder Project Resources, open Pin Module and Pin Manager: Grid View\nLock Port C - Pin 2 to GPIO - Input and EXT_INT.\nCheck the WPU box for Pin RC2. This will configure a Weak Pull-up (WPU) to Pin RC2. The WPU will keep the Pin RC2 as logic High.\nA simplified schematic for WPU configuration with RC2 and SW0.\nYou can also rename the IO_RC2 to SW under the Custom Name column.\nGiving a custom name (SW) to pin RC2\nNow double click the EXT_INT under the Project Resources.\nSince the SW0 will drive the Pin RC2 to logic low (GND) when it\u0026rsquo;s being pressed, we will need to Change Edge Detection to falling edge. In this case, an external interrupt will generate when the SW0 is pressed.\nSetting the Edge Detection to Falling Edge Click the Generate button to generate code for the External Interrupt module.\n4.4.2 Push Button Interrupt Setup Go back to Project, you should be able to see ext_int.h, interrupt_manager.h, ext_int.c, and interrupt_manager.c have been generated.\nOpen \u0026ldquo;pin_manager.h\u0026rdquo;, scroll down and you can find the macros for SW (Pin RC2). The macro SW_GetValues() is the one that can get the input state (either logic High or logic Low). We will use this macro to get whether the button is pressed or not.\nSW_GetValues() // Macro for knowing the input state of SW0 (Pin RC2) Open \u0026ldquo;ext_int.c\u0026rdquo;. You can find a couple of predefined functions that related to interrupts that Inside the \u0026ldquo;ext_int.c.\u0026rdquo;\nInclude the \u0026ldquo;mcc.h\u0026rdquo; at the beginning of the \u0026ldquo;ext_int.c.\u0026rdquo; In this case, we can utilize the Breathing LED code.\n#include \u0026#34;mcc.h\u0026#34; //include “mcc.h” to “ext_int.c” Include header file \u0026ldquo;mcc.h\u0026rdquo; to \u0026ldquo;ext_int.c\u0026rdquo;\nScroll down the \u0026ldquo;ext_int.c\u0026rdquo;, and you can find there\u0026rsquo;s a custom function named INT_DefaultInterruptHandler.\nYou can write the code for your interrupt inside this function.\nNow, we want to know the push button (SW0) whether it is being pressed or not. Once the SW0 is being pressed, the MCU will detect the input of the RC2 has been driven to logic Low. This will create an interrupt and will run the code inside the INT_DefaultInterruptHandler.\nCopy the following code and paste them inside the INT_DefaultInterruptHandler.\n// check the SW0 is being pressed or not if (SW_GetValue() == 0) // if the SW0 is in logic Low (pull to GND) { //Now Blink the LED for (int i = 0; i\u0026lt;1024; i++) // increase duty cycle to 100% { PWM6_LoadDutyValue(i); __delay_ms(1); } for (int i = 1023; i\u0026gt;= 0; i--) // decrease duty cycle to 0% { PWM6_LoadDutyValue(i); __delay_ms(1); } } ISR code for INT_DefaultInterruptHandler function.\n4.4.3 Enable Interrupt Services The last step is to enable the interrupt services for the microcontroller.\nGo back to Main.c, uncomment following code that inside the main function:\n//Enable the Global Interrupts INTERRUPT_GlobalInterruptEnable(); //Uncommented // Enable the Peripheral Interrupts INTERRUPT_PeripheralInterruptEnable(); //Uncommented Enable Interrupt Service at Main.c\nClick the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .)\n","permalink":"https://embedded-systems-design.github.io/curiosity-nano-mplab-tutorial-and-lab/","tags":null,"title":"**Curiosity Nano \u0026 MPLAB Tutorial**"},{"categories":null,"contents":"What is Bluetooth Low Energy? Intro to Bluetooth Low Energy video from Cypress Bluetooth Low Energy datasheets from Cypress Developing Bluetooth Smart Applications for Android tutorial from NewCircle Training provides a high-level explanation of how Bluetooth Low Energy works. Where can I find examples of PSoC 4 BLE projects? 100 Projects in 100 Days with PSoC® 4 BLE from Cypress Project #020: UART to BLE Bridge from Cypress Configuring a Find Me Profile with BLE video from Cypress Finishing the Find Me Application with Firmware video from Cypress Adding Battery Level Service and Testing with CySmart video from Cypress Using CapSense with Bluetooth Low Energy video from Cypress Extending Battery Life with PSoC Low Energy Modes video from Cypress Forum posts on Cypress.com How to send data from the PSoC BLE module to the CySmart app How do I create a custom BLE profile? Creating a BLE Custom Profile app note from Cypress How do I create an Android app that is BLE-enabled? Developing Bluetooth Smart Applications for Android tutorial from NewCircle Training provides a high-level explanation of how Bluetooth Low Energy works. BLE App Development in JavaScript Explained - Bluetooth Low Energy in Action article from EVO Things provides an example that is similar to the CySmart app Developing Bluetooth Smart Applications for Android Tutorial video from NewCircle Training Bluetooth Low Energy API guide from Google Forum posts on Cypress.com Developing an Android app for PSoC BLE Create Android app and interface it with PSoC 4 BLE Where can I find examples of custom Android apps that are BLE-enabled? Project #028: BLE Proximity Profile from Cypress Project #031: BLE Pressure Sensor (BMP180) from Cypress Project #037: BLE Billboard from Cypress android-BluetoothLEGatt example code from Google CySmart App example from Cypress How do I create an iOS app that is BLE-enabled? Beginner\u0026rsquo;s Guide to iOS Development from HONGKIAT\nThe Interface - Part I Building Your First App - Part II Where can I find examples of custom iOS apps that are BLE-enabled? Project #022: Apple Notification Center Service (ANCS) Profile from Cypress CySmart App example from Cypress How do I communicate from PSoC® 4 BLE to PSoC® 4 BLE? 1-way and 2-way PSoC® BLE communication examples from Harsha Kadekar Video of 2-way communication PSoC® BLE Custom Server example from Jon Isaiah BLE Peripheral Server, which updates an example array of 2 floats and responds to read requests from the client BLE Central Client, which reads data from the server and prints it to the serial port BLE Button Demo from Jonathan Bush If you find additional resources that are helpful, please send them to Dr. Jordan\n","permalink":"https://embedded-systems-design.github.io/about-bluetooth-communication-abc/","tags":["bluetooth","cypress","microcontroller"],"title":"About Bluetooth Communication (ABC)"},{"categories":null,"contents":"Introduction Text is important on PCB layouts to identify the designers, project, version, components, etc. Typically, text can be placed on a silkscreen layer that sits on top of the copper. However, our manufacturing process in PRLTA 109 only supports text that is milled on the TOP COPPER or BOTTOM COPPER layers.\nNote: It is required that all PCB designs have your name, course, and team number so that the Peralta Engineering Studios staff can distinguish your board from others.\nHow do you create millable text in Cadence PCB Editor? Open your design in PCB Editor\nChoose Setup \u0026gt; Design Parameters\u0026hellip; and click the Text tab. Click the \u0026hellip; button next to Setup text sizes (see Figure 1). The Text Setup window will open (see Figure 2).\nFigure 1: Design Parameter Editor Text tab Figure 2: Text Setup window In the Text Setup window, change the Photo Width for Text Blk 4 to 10.00 (see Figure 2). The 4th text value is big enough to read but not overly large. Click OK and OK to return to your design.\nClick the abc+ button in the toolbar (see Figure 3) and click on the Options tab on the right hand of the screen (see Figure 4).\nFigure 3: Add Text button Figure 4: Options tab configured for the 4th text block Configure the options to make sure the Top or Bottom layer is selected, and that the Text block is set to 4 (or whichever one that you changed in step 2) (see Figure 4).\nClick anywhere on the board and type the text that you wish to add (see example, Figure 5).\nFigure 5: Example text on a layout Based on a tutorial by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/adding-text-to-a-layout-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Adding Text to a Layout in Cadence PCB Editor"},{"categories":null,"contents":"What is an escape room? An escape room is a real-life adventure game where you pay to be locked in a room filled with puzzles and given a limited time (usually 60 minutes) to solve the puzzles with your team in order to escape the room. There are also virtual video game escape rooms.\nReal-life room escape on Wikipedia Locked In: Behind the Scenes of the Escape Room Craze from Make Magazine \u0026lsquo;Escape Rooms\u0026rsquo; Challenge Players To Solve Puzzles To Get Out story from NPR In Escape Rooms, Video Games Meet Real Life article from the New York Times Who designs escape rooms? Blacklight Attractions Game Masters Live Escape Rooms The Ha Ha Shop (lots of great ideas for puzzle items) Escape Game Design Race to Escape TV show on the Science Channel What are best practices for designing escape rooms? How to Design an Escape Room article from Fast Company Being a Room Escape Puzzle Master for a Night from the Room Escape Artist blog Tips and trends in making escape games from Adam Clare Designing a real-life Escape the Room experience from Gamasutra What are any puzzle ideas for real escape rooms? from Quora Where can I find escape rooms? Epic Escape Game (Phoenix) Escape Adventure AZ (Mesa) Escape the Room AZ (Scottsdale) Key Quest Escape Room (Phoenix) PanIQ Escape Room (Phoenix) Phoenix Escape Room (North Phoenix, Gilbert) Trapped in a Room With a Zombie (Phoenix) Escape Room Directory (Worldwide) Escape Games from Addicting Games ","permalink":"https://embedded-systems-design.github.io/all-about-escape-rooms/","tags":["technology"],"title":"All About Escape Rooms"},{"categories":null,"contents":"What are serial protocols? I2C, SPI, and UART are three of the most common protocols for serial data transmission. An overview of these protocols can be found here:\nUART - I2C - SPI - Serial communications #001 video from Electronoobs Introduction to Interfaces video from element14 I2C Communication TI\u0026rsquo;s I2C Resistor Sizing Guide Online Resistor Calculator I2C Communication, part 1: Introduction video I2C Communication, part 2: Microchip Code Configurator video MPLAB XC8 for Beginners Tutorial 38: Interfacing the TC74 I2C Temperature Sensor video (TC74 Datasheet) SPI Communication SPI Communication, part 1: Introduction video SPI Communication, part 2: Configuration with Microchip Code Configurator video SPI and Shift Register Tutorial using the Microchip Curiosity board by Qinchen Zha UART Communication MPLAB XC8 for Beginners Tutorial 19: EUSART with MPLAB Code Configurator video UART PIC to Argon tutorial by Mykol Reklaitis ","permalink":"https://embedded-systems-design.github.io/all-about-serial/","tags":["tutorial","uart","microcontroller","interfacing"],"title":"All About Serial"},{"categories":null,"contents":"What is a smart home? A smart home links together home comfort, entertainment, appliances, thermostats, lighting, and other electronic devices in a home together such that they can be controlled by voice, gesture, computer, or phone. Apple, Amazon, and other companies are trying to bring myriad smart home products from different manufacturers together through the Echo and HomeKit, respectively.\nWhat is a smart home? from Smart Home USA How Smart Homes Work from HowStuffWorks.com How your home will know what you need before you do from CES 2016 The Smartest Connected Home Products at CES 2016 from PC Magazine Where can I find databases of smart home devices? Smart Home Database from smarthomedb.com Connected Home devices cataloged by Postscapes OpenHomeAutomation.net Smart Irrigation Controllers on the market from Postscapes Ari jay comet home automation blog Where can I find manufacturers of smart home devices? Green Bean Maker Module for GE Appliances Harmony TV Remotes from Logitech Nest - makes thermostats, smoke + CO2 alarms, and wifi security cameras Products that work with Nest OpenSprinkler - open-source, web-based sprinkler controller Phillips Hue lighting products Samsung SmartThings appliances ","permalink":"https://embedded-systems-design.github.io/all-about-smart-homes/","tags":null,"title":"All About Smart Homes"},{"categories":null,"contents":"Altering Trace Widths\nFigure 1 Sometimes you need to globally change trace widths in your board after designing it. Instead of deleting them all and starting from scratch, you can select all the traces at once using the following steps:\nMake sure you are in general edit mode by clicking on the icon highlighted in the top row of icons: Figure 2 Right click in the design workspace, selecting \u0026ldquo;super filter \u0026ndash;\u0026gt; Connect Line\u0026rdquo; Figure 3 Drag a box around your entire design, selecting all connect lines Figure 4 4. Right click in the workspace and select \u0026ldquo;change width\u0026rdquo; in the resulting menu.\nFigure 5 Figure 6 Hit enter and see the result: Figure 7 Turn your super filter back off: Figure 8 ","permalink":"https://embedded-systems-design.github.io/altering-trace-widths/","tags":["ecad","cadence"],"title":"Altering Trace Widths"},{"categories":null,"contents":"How are PCBs fabricated at ASU? The following video shows our PCB manufacturing process.\nVideo by Peralta Engineering Studios\nHow do you prepare and submit Cadence PCB design for fabrication? Label the PCB design with your name, course, and team number (required for manufacturing)\nRun a Design Rules Check in Cadence PCB Editor and fix any errors identified\nExport Gerber files from Cadence PCB Editor\nExport solder mask layers from Cadence PCB Editor (optional, final design only)\nRun a Design for Manufacturing check and fix any errors identified\nPrint a 1:1 (100%)-sized copy of your PCB design and physically place all components on the printout to confirm that the footprints are correct. This is particularly important for ICs, connectors, and daughterboards.\nShow your successful DFM check results to a TA or professor so that they can document approval of your PCB design for fabrication. You must receive approval from a TA or the professor before your PCB will be fabricated.\nZip all of your PCB files together in one ZIP folder with filename YourName###.zip, where ### is your team number.\nTop.art Bottom.art Outline.art Drill.drl SolderMaskTop.art SolderMaskBottom.art Submit your files at fultonapps.asu.edu/polylab. Include the following information in the request details:\nProfessor and class Quantity of boards (only 1 allowed per design; exceptions allowed with professor approval) Solder mask needed? (only allowed for final board designs) Rub out area needed? If yes, specify location. (Pro tip: Rub out copper underneath antennas) Copper thickness (0.5, 1, or 2 oz/ft^2) You must also attach the following files to your request:\nZIP of your Gerber files created above PDF of the results of the Design for Manufacturing check You will receive an emails from the Poly Lab Request Notification System indicating the acceptance of the job and when your PCB is ready to be picked up. If you are interested in learning about and being a part of the fabrication process with the LPKF mill, please see one of the staff members in PRLTA 109. If you have any questions, please contact Peralta.Labs@asu.edu\nAfter receiving your PCB, make sure to do a continuity test on all traces and vias before adding parts and soldering.\n","permalink":"https://embedded-systems-design.github.io/asu-pcb-fabrication-process/","tags":["asu","cadence","pcb"],"title":"ASU PCB Fabrication Process"},{"categories":null,"contents":"Please see this link\n","permalink":"https://embedded-systems-design.github.io/asu-pcb-mill-specs/","tags":null,"title":"ASU PCB Mill Specs"},{"categories":null,"contents":"Q: I have tried to connect the Cypress CySmart software to the USB dongle but it does not work. Help!\nA: Try the troubleshooting steps on the Fixing Connection Issues between the Cypress CySmart Software and the CY5670 USB Dongle page.\nQ: After clicking on Build BLE Lab 2, I get the errors in the picture. I have replaced the parts with new ones and still getting the same error. Please advise. Lab 2 errors A: Right click your active project, choose Update Components from the contextual menu and follow the prompts (see below).\nUpdate Components Q: Every time I try to build and program Lab 3, it gives me the following errors:\nErrors A: You can fix this error by renaming both the ADC and the opamp in the top design. Name them what they are called in the lab 3 module.\n","permalink":"https://embedded-systems-design.github.io/psoc-bluetooth-connection-issues/","tags":["psoc","bluetooth"],"title":"Bluetooth Connection Issues"},{"categories":null,"contents":"A bypass capacitor (aka \u0026ldquo;filter cap\u0026rdquo;) is a small capacitor that dampens electrical noise moving toward an IC. Electrical noise can cause circuit malfunctions. Unless otherwise specified in the data sheet of an IC, a 0.1 µF non-polarized ceramic capacitor usually makes a good bypass capacitor.\nhttp://www.learningaboutelectronics.com/Articles/What-is-a-bypass-capacitor.html https://en.wikipedia.org/wiki/Decoupling_capacitor https://www.microcontrollertips.com/why-so-many-bypass-capacitors-faq/ (dead)The Seattle Robotics Society posted an excellent article describing bypass capacitors in more detail. ","permalink":"https://embedded-systems-design.github.io/bypass-capacitor-basics/","tags":["components","filter","noise","capacitors","circuit-design"],"title":"Bypass capacitor basics"},{"categories":null,"contents":"Cadence Forward Annotation Tutorial After having started working on a PCB layout, sooner or later you will likely find changes need to be made to your original schematic. Fortunately, you do not need to start the PCB design over as a result! Forward annotation allows you to essentially export changes made in your schematic into an existing layout, and here is how to do this in Cadence.\nCreate a schematic in Capture CIS. For this tutorial, two intentional connection errors have been made in the example schematic shown below. Diagram, schematic Description automatically generated Transfer your schematic to a PCB layout using PCB \u0026gt; New Layout. When placing your parts, pay attention to whether the net connections illustrated by the blue lines between pins make sense. For example, connectivity between both leads of a two-pin component, as is the case for R1 and D1 shown below, often indicates an error in your schematic. In this case, power and ground are shorted together, resulting in no GND net on the PCB. Also, there is a wire shorting together the leads of R1, as shown in the schematic by the line running through the symbol with pink dots on either end.\nModify your schematic as needed in Capture. Here we delete the two unneeded wires, resulting in the following schematic: Diagram, schematic Description automatically generated Update your PCB layout. There are two ways to do this:\na. Old method: Save and close your PCB design, then use PCB \u0026gt; New Layout, with your current board file as the input, to import your updated netlist into the existing layout.\nb. New method: Go to PCB \u0026gt; Design Sync. This feature allows you to update the netlist in your PCB without closing Allegro. You can review the list of changes to be made, then press Sync to transfer them over to your PCB.\nA screenshot of a computer Description automatically generated with low confidence We now see separate 3.3V and GND nets and a path for the current in this circuit to travel. Forward annotation has been achieved!\n","permalink":"https://embedded-systems-design.github.io/forward-annotation/","tags":["cadence"],"title":"Cadence Forward Annotation Tutorial"},{"categories":null,"contents":"Capture CIS Manuals OrCAD Capture Quick Reference OrCAD Capture User\u0026rsquo;s Guide OrCAD Capture Reference Guide ","permalink":"https://embedded-systems-design.github.io/cadence-manuals/","tags":["ecad","cadence"],"title":"Cadence Manuals"},{"categories":null,"contents":"Cadence Mounting Hole/Post Tutorial Some components have, in addition to their electrical pins, mechanical supports that must be accounted for in the PCB footprint. Otherwise, without mounting holes for these pins to go into, the component will not fit onto the board. This tutorial will demonstrate how to add the mounting holes to the footprint for a THB001P joystick.\nOpen the product drawing. Look at the \u0026ldquo;PCB Installation Holes\u0026rdquo; figure. Note that this only shows the drill hole diameters and does not recommend pad sizes. Also, the units are in mm and will need to be converted to mils.\nOpen PCB Editor and create a new package symbol.\nAdd the electrical pins as shown in the drawing; the four un-numbered holes are the mounting ones. This is not the focus of the tutorial, but here are a couple hints:\na. You may need to create two new padstacks, one for the two axes and one for the pushbutton\nb. For both padstacks, use the drill diameter specified in the drawing and select a pad size which will result in sufficient annular ring.\nNote the drill diameter of the four mounting holes given in the drawing.\nUse Padstack Editor to create an appropriately sized padstack. As with the electrical pins, this will need to have the drill diameter specified in the drawing along with a pad resulting in sufficient annular ring. Many mounting posts, despite not being electrically connected, will still need to be soldered to the board for mechanical stability.\nPrepare to place the four mounting pads. Set the type as \u0026ldquo;Mechanical\u0026rdquo; instead of \u0026ldquo;Connect\u0026rdquo; A screenshot of a computer Description automatically generated with medium confidence Note: Placing electrical pins and then deleting the pin number will also result in the pins being considered mechanical. However, this action might not be reversible, and setting them as mechanical in the first place is easier when creating a new symbol.\nUse the dimensions on the drawing to determine where to place the four pins. Since they are arranged in a rectangle, by setting X and Y quantities of 2 and the spacing values as specified in the drawing, you can place all of them at once. Background pattern Description automatically generated You now have a PCB footprint with mounting holes! Don\u0026rsquo;t forget to add a reference designator before saving the file. ","permalink":"https://embedded-systems-design.github.io/mounting-holes/","tags":["cadence"],"title":"Cadence Mounting Hole/Post Tutorial"},{"categories":null,"contents":"There are a number of tutorials available for creating schematics in Cadence. The best tutorials are in videos, as the manuals and online help are poor.\nWhat is a schematic? A schematic is an electronic CAD diagram that shows the components used in a circuit and the interconnections among the components. A schematic includes a symbology described in the table of Electrical Symbols \u0026amp; Electronic Symbols. An example schematic created by Dr. Jordan is available here.\nWhat is Cadence Schematic Capture? Cadence Schematic Capture is an electronic CAD (ECAD) program that captures the components that go into a circuit and the interconnections between the component. This information will later be passed to the PCB Editor by way of a netlist in order to create a PCB. Read the short Cadence Schematic Capture Datasheet for an overview of the software and its features.\nHow do I launch Cadence to create a schematic? In Windows, launch \u0026ldquo;Design Entry CIS\u0026rdquo;.\nThis program is also called \u0026ldquo;Allegro Design Entry CIS\u0026rdquo; and \u0026ldquo;OrCAD Capture CIS\u0026rdquo;. These programs are all equivalent.\nHow do I create a schematic? ** WARNING:** Do NOT use spaces in naming your projects. Spaces will prevent Cadence from working correctly.\nQuick Guide: Creating a New Project in Cadence Cadence Schematics Settings and Setup video from Casey Petersen Starting a Schematic video from Andrew Crouch Part 1: Getting Started video from iEngineered OrCAD Basic Tutorial video from Lauren Spradlin If you plan to import any schematic symbols from the web (see below) or create custom schematic symbols (see below), you must create a custom symbol library in which to store them.\nQuick Guide: Creating a Custom Library in Cadence Part 7: Working with Part Libraries video from iEngineered. How do I place parts on a schematic? Placing parts, editing schematics, editing parts, and connecting parts video from Casey Petersen Part 2: Drawing Schematics video from iEngineered How do I edit parts and annotations on a schematic? Part 3: Editing the Schematic Design video from iEngineered Part 4: Editing Text and Graphics video from iEngineered Where do I find parts? The first place to look for parts is in the built-in libraries, which have hundreds of thousands of parts but will likely not have every part that you need.\nSearching the built-in Cadence libraries video from parsysEDA You can also search for parts that others have made using the ActiveParts Internet Component Assistant tool. Any parts that you add using ActiveParts will need to be stored in a custom parts library (see How do I create a schematic? above).\nUsing the ActiveParts Internet Component Assistant tutorial from Cadence How do I create a custom part (schematic symbol)? If a part is not available through one of the sources above, then you must create both a custom schematic symbol and a custom PCB footprint (the physical layout of copper on a printed circuit board to which the component is soldered). Creating a custom PCB footprint is covered in another blog entry on creating PCB layouts.\nQuick Guide: Creating a Custom Schematic Symbol Creating new parts and preparing for footprints video from Casey Petersen Creating a custom schematic symbol video from Andrew Crouch Creating custom schematic symbols video from parsysEDA Making and Editing Capture Parts - Chapter 7 in the Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner How do I show the power and ground pins on a schematic component? Cadence sometimes hides the power and ground pins on components (particularly ICs and custom components). Components don\u0026rsquo;t automatically have power and ground connected to them. In order to show the power and ground pins, do the following:\nOpen your project in Allegro Design Entry CIS Open the schematic page Right-click on the component and choose \u0026ldquo;Edit Properties\u0026hellip;\u0026rdquo; Make sure the \u0026ldquo;Power Pins Visible\u0026rdquo; property checkbox is checked Repeat for each component that has power and ground pins How do I prepare my schematic for transfer to a PCB layout? STEP 1: Assign footprints to all components.\nQuick Guide: Transferring a Schematic to PCB Editor OrCAD Tutorial - Section 8.3 (older version of software) STEP 2: Check the schematic for errors. Schematic capture programs have a design rules check (DRC) option that checks for inconsistencies in schematics. DRCs will not find all errors (for instance, choosing the wrong part or function).\nQuick Guide: Transferring a Schematic to PCB Editor Design Rules Check example video by Andrew Crouch OrCAD Tutorial - Section 2.4 (older version of software) Part 10: Design Validation and Processing video from iEngineered STEP 3: Convert the schematic into a netlist (a file that lists all of the interconnections in a schematic) that will then be loaded into the PCB layout program. Loading a netlist into a PCB layout program is covered on the Transferring a Schematic to PCB Editor page.\nPart 11: Intercommunication tools, Netlist Creation and Back Annotation video from iEngineered OrCAD Tutorial - Section 2.6 (older version of software) How do I configure Capture to find my custom footprints? A common error message is that Cadence cannot find your custom footprints. The footprint search path must be updated in order to correct this error.\nChanging the Library Search Path in Cadence Design Entry CIS tutorial How do I configure project and program settings? Part 5: Using Project Manager video from iEngineered Part 6: Setting Preferences and Backup video from iEngineered How do I organize a large design? Cadence supports two major ways to organize large designs: splitting them over multiple pages and using hierarchical blocks. Either method is appropriate for use in projects, and often companies will specify the way that official schematics should be organized.\nA design can span over multiple pages as long as the necessary signal nets are connected. Nets can be connected across pages using off-page connectors with the same name on each page.\nPart 8: Off-Page Connectors and Net Connectivity from iEngineered Designs can also be organized to use hierarchical blocks, which are similar to blocks on a block diagram. Descending into a hierarchical block will open a sub-schematic with the circuitry that is part of the block (e.g., the power supply).\nPart 9: Creating Hierarchical Blocks from iEngineered Working With Part Libraries How to create and add a new custom library to your project: \u0026lt;working-with-libraries.html\u0026gt; How to update your design cache if you update a part in your library: \u0026lt;updating-part-in-your-library.html\u0026gt; ","permalink":"https://embedded-systems-design.github.io/cadence-schematic-tutorials/","tags":["cadence"],"title":"Cadence schematic tutorials"},{"categories":null,"contents":"This page lists tutorials for doing circuit simulations in Cadence.\nGetting Started Cadence Circuit Simulations (the basics) video from Casey Petersen iEngineered Series Part 12: Altering Schematic for Simulation Purpose video from iEngineered Part 13: PSpice Biaspoint Analysis video from iEngineered Part 14: PSpice Transient Analysis video from iEngineered Part 15: Basic DC Sweep video from iEngineered Part 16: Basic AC Sweep video from iEngineered Part 17: Param Tool video from iEngineered Part 18: Charged Capacitor \u0026amp; Inductor video from iEngineered Examples Cadence Linear Voltage Regulator Simulation video from Casey Petersen Cadence Simulation of (2) Low-Pass Filters video from Casey Petersen ","permalink":"https://embedded-systems-design.github.io/cadence-simulation-tutorials/","tags":["simulation","cadence"],"title":"Cadence simulation tutorials"},{"categories":null,"contents":"Introduction This Cadence walkthrough goes through the process of creating a PSoC® 4 BLE module schematic symbol and PCB footprint.\nStep 1: Find part information in datasheets Download the PSoC® 4 BLE module data sheet from the Cypress website. You will need the pin names in Step 2. Download the PSoC® 4 BLE module mechanical drawing. You will need the dimensions in Step 3. Step 2: Create the custom schematic symbol In Windows, open \u0026ldquo;Capture CIS\u0026rdquo;\nCreate a custom library\nRight-click on your custom library and choose \u0026ldquo;New Part\u0026rdquo; (see Figure 1). The New Part Properties window will appear (see Figure 2).\nFigure 1: Creating a new part in your custom library Figure 2: New Part Properties window In the New Part Properties window (see Figure 2), name the part and click OK. The new part creation window will appear (see Figure 3).\nFigure 3: New part creation window Click the \u0026ldquo;Place pin array\u0026rdquo; button in the toolbar (see Figure 4). The \u0026ldquo;Place Pin Array\u0026rdquo; configuration window will appear (see Figure 5). Figure 4: Place pin array tool Figure 5: Place Pin Array configuration window Complete the configuration as shown in Figure 5 and click OK. Pro Tip: Instead of configuring Place Pin Array as shown in Figure 5, repeat this step twice: Once for the first 20 pins, and a second time for the remaining 24 pins. This will eliminate the need to move pins from one side of the symbol to the other.\nPlace the pins on the symbol. You may need to adjust the size of the dotted rectangle in.\nClick the \u0026ldquo;Place rectangle\u0026rdquo; button in the toolbar (See Figure 6) and add a rectangle box along the dotted lines inside the pins (see Figure 7).\nFigure 6: Place rectangle tool Figure 7: Schematic symbol with pins and rectangle Double-click on each pin individually to show the Pin Properties window (see Figure 8). Configure each pin according to the pin names in the PSoC® 4 BLE module datasheet. Table 1 shows the basic pin types for each of the pins on the PSoC® 4 BLE module. Figure 8: Pin Properties window Pin Name Pin Type All GPIO pins Bidirectional VDDD, VDDA, VDDR, and all GNDs Power XRES Input VREF Output Table 1: Pin types for the PSoC® 4 BLE module\nThe final custom schematic symbol is shown in Figure 9 Figure 9: Final custom schematic symbol for the PSoC® 4 BLE module Save the symbol to your library by right-clicking on the symbol editor tab and choose \u0026ldquo;Save\u0026rdquo; (see Figure 10). Figure 10: Saving the schematic symbol You have successfully created a custom schematic symbol for the PSoC® 4 BLE module that you can now use in your schematic. You can continue creating the remainder of your schematic now and make the PCB footprint later, or continue with this tutorial to create the footprint now. Step 3: Create the custom PCB padstack The custom PCB padstack definition includes mechanical dimensions for the copper pads and the hole to be drilled in the board for each pin in the custom PCB footprint that you will design in Step 4.\nIn Windows, open \u0026ldquo;Padstack Editor\u0026rdquo;\nChoose File \u0026gt; New\u0026hellip; The New Padstack window appears (see Figure 11).\nFigure 11: New Padstack window In the \u0026ldquo;New Padstack\u0026rdquo; window (see Figure 11), click \u0026ldquo;Browse\u0026hellip;\u0026rdquo; and select the location of your custom symbols folder (e.g., Desktop/Cadence/symbols)\nIn the \u0026ldquo;New Padstack\u0026rdquo; window (see Figure 11), enter a pad stack name of pad70cir40d_AB (where AB are your initials) and click OK.\nOn the \u0026ldquo;Start\u0026rdquo; tab, configure the parameters to match Figure 12 below.\nFigure 12: Start tab configuration Click on the \u0026ldquo;Drill\u0026rdquo; tab and configure the parameters to match Figure 13 below. Figure 13: Drill tab configuration Do not change any settings on the \u0026ldquo;Secondary Drill\u0026rdquo; tab. Click on the \u0026ldquo;Drill Symbol\u0026rdquo; tab and configure the parameters to match Figure 14 below. Figure 14: Drill Symbol tab configuration Do not change any settings on the \u0026ldquo;Drill Offset\u0026rdquo; tab. Click on the \u0026ldquo;Design Layers\u0026rdquo; tab and configure the parameters to match Figure 15 below. Figure 15: Design Layers tab configuration Click on the \u0026ldquo;Mask Layers\u0026rdquo; tab and configure the parameters to match Figure 16 below. Figure 16: Mask Layers tab configuration Do not change any settings on the \u0026ldquo;Options\u0026rdquo; tab. Click on the \u0026ldquo;Summary\u0026rdquo; tab and confirm that your padstack matches this example.\nChoose File \u0026gt; Save and close \u0026ldquo;Padstack Editor\u0026rdquo;\nStep 4: Create the custom PCB footprint In Windows, open \u0026ldquo;PCB Editor\u0026rdquo;\nChoose File \u0026gt; New\u0026hellip; The \u0026ldquo;New Drawing\u0026rdquo; window appears (see Figure 17).\nFigure 17: New Drawing window In the \u0026ldquo;New Drawing\u0026rdquo; window (see Figure 17), click \u0026ldquo;Browse\u0026hellip;\u0026rdquo; and select the location of your custom symbols folder (e.g., Desktop/Cadence/symbols). Then, enter a drawing name of your choice. Do not use spaces in the drawing name. Choose a \u0026ldquo;Drawing Type\u0026rdquo; of \u0026ldquo;Package symbol\u0026rdquo; and click OK to return to the empty drawing window.\nNext, you need to create the package geometry for the footprint. The package geometry is a visual representation of the physical dimensions of the part. Click the \u0026ldquo;Shape Add Rect\u0026rdquo; button in the toolbar (see Figure 18) and click on the Options tab on the right hand side of the screen. Configure the settings in the Options tab to match those shown in Figure 19. The dimensions of the rectangle and the rounded corners came from the PSoC® 4 BLE mechanical drawing.\nFigure 18: Shape Add Rect tool Figure 19: Options tab for the Shape Add Rect tool Click in the Command window at the bottom of the screen and enter the coordinates to place the package geometry: x 0 1800. The rounded rectangle package geometry will appear with the lower left corner of the window at (0,0) and the upper right corner at (1100,1800) (see Figure 20). Figure 20: Package geometry and Command window Next, lay out the pads for the left side of the PSoC® module. Choose Layout \u0026gt; Pins and click on the Options tab on the right hand side of the screen. Configure the settings in the Options tab to match those shown in Figure 18. Figure 18: Layout \u0026amp;gt; Pins Options tab configured for the left header Click in the Command window at the bottom of the screen and enter the coordinates to place the left header: x 180 367 (see Figure 19). This will place pin 1 at (180, 367) on the lower right hand corner of the left header, pin 2 on the lower left hand corner of the header, pin 19 in the upper right hand corner of the header, and pin 20 in the upper left hand corner of the header. Figure 19: Left header placed using the command prompt Click the Options tab again and configure it to match the settings shown in Figure 20. Note the updated values for the Y Qty, X and Y Order, and Pin #. Figure 20: Layout \u0026amp;gt; Pins Options tab configured for the right header Click in the Command window at the bottom of the screen and enter the coordinates to place the right header: x 920 1267 (see Figure 21). This will place pin 21 at (920, 1267) in the upper left hand corner of the right header, pin 22 in the upper right hand corner of the header, pin 43 in the lower left hand corner of the header, and pin 44 in the lower right hand corner of the header. Figure 21: Right hand header placed using the command prompt Next, you need to give the footprint a reference designator that matches the reference designator in your custom schematic symbol (typically U). Click the \u0026ldquo;Label Refdes\u0026rdquo; button in the toolbar (see Figure 22) and click on the Options tab on the right hand side of the screen. Configure the settings in the Options tab to match those shown in Figure 23. Figure 22: Label Refdes tool Figure 23: Options tab for the Label Refdes tool Click on or around the part and type U* (see Figure 24). The * will be replaced with the part number assigned in the schematic (e.g., U1). Figure 24: Footprint with reference designator Close PCB Editor and save changes Step 5: Link the Custom PCB Footprint to the Custom Schematic Symbol Open a schematic that uses the custom symbol in Capture CIS.\nIn your schematic, double-click on the placed custom symbol. The Property Editor window will open (see Figure 25).\nFigure 25: Property Editor window for PSoC® 4 BLE module Type the filename for the footprint into the \u0026ldquo;PCB Footprint\u0026rdquo; field and close the Property Editor window.\nTo confirm that the footprint was properly linked to the custom schematic symbol, right-click on the part in the schematic and select \u0026ldquo;Show Footprint\u0026rdquo;. The \u0026ldquo;Footprint Viewer\u0026rdquo; window will open and show the footprint (see Figure 26).\nFigure 26: Footprint successfully linked to the custom schematic symbol If the footprint does not show up, confirm that the name of the footprint in the Property Editor matches the filename of the footprint, and that the symbols folder is configured correctly in Cadence.\nThe following video shows the process described in this tutorial from start to finish. Note that the Cadence interface has changed for padstack editing since the time the video was created.\nBased on a video and tutorial created by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/cadence-walkthrough-psoc-4-ble-module/","tags":["cypress","cadence","pcb"],"title":"Cadence Walkthrough: PSoC 4 BLE Module"},{"categories":null,"contents":"When calculating the resistance value for your current limiting resistor there are a few variables to consider. First, what is the supply voltage that will be applied to the LED? Second, what is the forward voltage of the LED you chose? Third, what is the amount of current you want to flow through your LED? By answering these questions, you will be able to calculate the value for the resistor. To begin the process, you must know what supply voltage you will be giving the LED. Whether its 12V, 5V, or 3.3V this value is important to the calculation of the resistance. The next piece of information that is needed is the forward voltage for the particular LED that is being used. To find this information you must reference the datasheet for the part. The forward voltage can be found in the Electrical Characteristics section of the datasheet. Shown below is an image of the forward voltage for an Osram LED:\nFigure As we can see from the image, the maximum forward voltage for the LED is 3.2V. The next piece of information that is needed is the current that needs to flow through the LED. To find this information, the datasheet must once again be referenced. Typically, this information is shown in the form of a graph depicting forward current vs. luminous intensity. Shown below is an example of a pair of graphs from the same Osram LED as the before:\nFigure These graphs show useful information that is needed to calculate our resistor value. The graph on the right shows the relative luminous flux vs. forward current. The first step is to choose the brightness you want for your application. For this example, we will use 1.0 for our value. From the graph, we can gather that at 1.0 relative intensity, a 350mA forward current is needed. Now the information from the graph on the left must be referenced. From the graph, we can see that for a forward current of 350mA, the LED will have a forward voltage of 2.8V. After finding that, we have all the information that is needed to calculate the value for the current limiting resistor. The equation is shown below:\n$$R_$$\nWhere $R_$ is the forward current in Amps. For the example that was chosen, the equation would look like this:\n$$R_$$\nFrom this equation, we can calculate the resistance as 6.28Ω (assuming a supply voltage of 5V). While most LEDs will not require this amount of current in order to operate (most datasheets say 20mA) it is still able to show how to find and use the information in the datasheet to find the current limiting resistor value.\n","permalink":"https://embedded-systems-design.github.io/calculating-current-limiting-resistor-value-for-leds/","tags":null,"title":"Calculating Current Limiting Resistor Value for LEDs"},{"categories":null,"contents":" Capacitive Sensing for Dummies Capacitive Sensing with Op-Amps Capacitive Sensing for Human Interfaces to Electronics Frequency to Voltage Circuits Circuits and Techniques for Implementing Capacitive Touch Sensing Analog Devices Capacitance Sensors Capacitance-to-Digital Converter Facilitates Level Sensing in Diagnostic Systems ","permalink":"https://embedded-systems-design.github.io/capacitive-sensing/","tags":["capacitors","circuit-design","AC-circuits"],"title":"Capacitive Sensing Links"},{"categories":null,"contents":"Why would you need to change the hole diameter? The default diameter of holes in Cadence is 0.3 mm. This is too small for most components to fit through, as well as too small for proper through-plating of vias. According to the Peralta PCB Mill specifications, hole diameters should be at least 0.5 mm (19.7 mil). Therefore, the following settings are recommended:\nDrill diameter \u0026gt; 20 mil Pad diameter = drill diameter + (at least) 30 mil Soldermask diameter = pad diameter + 20 mil Example: If the drill diameter = 31.5 mil, the pad diameter = 61.5 mil and the solder mask = 81.5 mil.\nHow do you change the hole diameter in PCB Editor? In PCB Editor, open your design and right-click on a via or hole and choose \u0026ldquo;Replace padstack\u0026rdquo;. If you want to only change the selected via or hole, choose \u0026ldquo;Selected instance(s)\u0026rdquo;. If you want to change all vias or holes on your board, choose \u0026ldquo;All instances\u0026rdquo; (see Figure 1). The \u0026ldquo;Select a padstack\u0026rdquo; dialog box appears (see Figure 2). Figure 1: Replace pad stack contextual menu In the \u0026ldquo;Select a padstack\u0026rdquo; dialog box, select Pad62cir32d (which has a 62 mil pad and a 32 mil hole) or another pad with a hole size of at least 20 mil and click OK (see Figure 2). While the hole size is reasonable for many components, the pad size is still too small. Figure 2: Select a padstack dialog box Or you can modify the existing Padstack in your design. Right-click again on a via or hole and choose \u0026ldquo;Modify design padstack\u0026rdquo;. If you want to only change the selected via or hole, choose \u0026ldquo;Selected instance(s)\u0026rdquo;. If you want to change all vias or holes on your board, choose \u0026ldquo;All instances\u0026rdquo; (see Figure 3). The \u0026ldquo;Padstack Editor\u0026rdquo; dialog box appears (see Figure 4). Figure 3: Modify design pad stack contextual menu In the \u0026ldquo;Padstack Editor\u0026rdquo; dialog box, increase the \u0026ldquo;Regular Pad\u0026rdquo; diameters to 60.0 or greater on the TOP and BOTTOM layers (see Figure 4), and change the Mask Layers diameters to 80.0 (see Figure 5). Figure 4: Padstack Editor dialog box Figure 5: Padstack Editor dialog box - Mask Layers tab In the \u0026ldquo;Padstack Designer\u0026rdquo; dialog box, choose File \u0026gt; Update to Design and Exit. You have successfully increased the pad size of the via or hole. Based on a tutorial by Seana O\u0026rsquo;Reilly and updated by Qinchen Zha\n","permalink":"https://embedded-systems-design.github.io/changing-a-hole-diameter-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Changing a Hole Diameter in Cadence PCB Editor"},{"categories":null,"contents":"Introduction A via is an electrical interconnection that connects one layer of a PCB to another layer of a PCB. Vias are typically used when two wires need to cross on the same side of a PCB design, but cannot without continuing the trace on a different layer. It is best to minimize the use of vias for boards being manufactured in Peralta to maximize reliability, but sometimes they are necessary in order to complete a design. If you do need a via, the default via padstack in Cadence is too small for the LPKF ProtoMat S63 PCB Mill that we use to manufacture PCBs in PRLTA 109. There are two ways to address this issue:\nPlace all of your vias, and then replace them with the provided asuvia.pad padstack (provided in the Cadence installation instructions you followed earlier in the semester). Change the size of the drill and pad on the Cadence default via.pad padstack. 1.0: Replacing your existing vias with the asuvia.pad padstack 1.1. In Windows, lay out the traces and vias on your board, minimizing the number of vias used.\n1.2. Right-click on one of the vias and select Replace Padstack \u0026gt; All instances (see Figure 1 below)\nFigure 1: Using Replace Padstack to change all instances of a via padstack 1.3. Select the asuvia.pad Padstack from the list of available padstacks (see Figure 2 below) and click OK. Note: This will only work if you have configured Cadence properly according to our provided instructions, and your Cadence/symbols folder contains asuvia.pad\nFigure 2: Selecting the asuvia padstack 2.0: Changing the default via.pad padstack As an alternative to using asuvia.pad, you can instead change the default via.pad padstack. You do not need to do both.\n2.1. In Windows, open Padstack Editor\n2.2. Choose File \u0026gt; Padstack Library Browser\u0026hellip; and choose via.pad from the list (see Figure 3). Click OK.\nFigure 3: Choosing via.pad from the Library Padstack Browser 2.3. In the Drill/Slot hole section, set the Drill diameter to 31.5 and change your \u0026ldquo;Decimal places:\u0026rdquo; to 2 (see Figure 4).\nFigure 4: Drill diameter set to 31.50 2.4. Click the Design Layers tab (see Figure 5) and change the settings for the BEGIN LAYER, DEFAULT INTERNAL, and END LAYER. Click the Mask Layers tab (see Figure 6) and change the settings for SOLDERMASK_TOP and SOLDERMASK_BOTTOM.\nFigure 5: Design Layers tab with layers configured Figure 6: Mask Layers tab with layers configured 2.5. Choose File \u0026gt; Save and overwrite the existing file. You have now successfully changed the default via size to be manufacturable and handle up to 5 amps of current!\nNote: If you are working on the computers in Peralta Studios, you may not be able to change and save the default via because of file permissions. Instead, simply change the padstacks to use the asuvia.pad after you are done designing the board.\nThe following video shows the process described in this tutorial from start to finish in Cadence 16.6 (old version):\nBased on a video and tutorial created by Robert Goby and updated by Qinchen Zha (2/2020) and Ryan Sparks (10/2020).\n","permalink":"https://embedded-systems-design.github.io/changing-the-default-via-padstack-in-cadence-pcb-editor/","tags":["asu","cadence","pcb"],"title":"Changing the Default Via Padstack in Cadence PCB Editor"},{"categories":null,"contents":"Why would I need to change the library search path? When creating a custom PCB footprint for a component, it is stored somewhere on your computer. In order for Design Entry CIS to find where a custom footprint is stored and associate it with a schematic component, the library search path must be changed so that Design Entry CIS knows where to look.\nNote: In order for PCB Editor to find custom PCB footprints and associate them with schematic components, you also need to change the library search path in PCB Editor.\nHow do I change the library search path in Design Entry CIS? Save your custom footprints in the symbols folder on your computer. Depending on how Cadence is installed on your computer, the full path should be similar to:\nC:\\Program Files\\Cadence\\SPB_17.4\\share\\pcb\\pcb_lib\\symbols When creating a new footprint drawing, the New Drawing dialog box will show the default path (see Figure 1 below). If the path in the dialog box is different than the path above, use the dialog box path for the remainder of this tutorial.\nFigure 1: New Drawing dialog box |\nAlso, note the exact name of the footprint. This will be needed later in order to reference it.\nLaunch Design Entry CIS. Note the full path for the Capture.ini file shown on the Start Page (see Figure 2). Depending on how Cadence is installed on your computer, the full path should be similar to: C:\\Cadence\\SPB_Data-Silent\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini or, if you made a custom HOME variable: %HOME%\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini\nFigure 2: Design Entry CIS Start Page Copy (Control-C) the full path of the Capture.ini file. Open the File Explorer in Windows, paste the full path into the path bar (see Figure 3), and press return. Figure 3: Capture.ini file path in the File Explorer. The Capture.ini file will open in Notepad. Under the [Allegro Footprints] section, add the full library search path from step 1 above if it is not already listed (see Figure 4). Note that you must increment the number after Dir for each path added (e.g., Dir0, Dir1, Dir2). Do not delete any existing paths from the list. ** ** Figure 4: Capture.ini file with several library search paths added You have successfully added a library search path to Design Entry CIS. If you are still not able to attach your custom footprints to schematic symbols, re-check the above steps and make sure your custom footprint name is correct. Based on a tutorial written by Seana O\u0026rsquo;Reilly.\n","permalink":"https://embedded-systems-design.github.io/changing-the-library-search-path-in-cadence-design-entry-cis/","tags":["cadence"],"title":"Changing the Library Search Path in Cadence Design Entry CIS"},{"categories":null,"contents":"Why would I need to change the library search path? When creating a custom PCB footprint for a component, it is stored somewhere on your computer. In order for PCB Editor to find where a custom footprint is stored, the library search path must be changed so that PCB Editor knows where to look.\nNote: In order for Design Entry CIS to find custom PCB footprints and associate them with schematic components, you also need to change the library search path in Design Entry CIS.\nHow do I change the library search path in PCB Editor? Save your custom footprints in the symbols folder on your computer. Depending on how Cadence is installed on your computer, the full path should be similar to: C:\\Cadence\\SPB_17.2\\share\\pcb\\pcb_lib\\symbols When creating a new footprint drawing, the New Drawing dialog box will show the default path (see Figure 1 below). If the path in the dialog box is different than the path above, use the dialog box path for the remainder of this tutorial.\nFigure 1: New Drawing dialog box Also, note the exact name of the footprint. This will be needed later in order to reference it.\nIn PCB Editor, choose Setup \u0026gt; User Preferences\u0026hellip; (see Figure 2). This will open the User Preferences Editor (see Figure 3).\nFigure 2: User Preferences Menu Figure 3: User Preferences Editor In the User Preferences Editor (see Figure 3, above), choose the Paths \u0026gt; Library.\nThe padpath and psmpath lists where Cadence will search for padstack (.pad) and package symbol footprint (.psm) files on your computer.\nClick on the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to the padpath preference. A window similar to Figure 4 will appear.\nFigure 4: psmpath Items Dialog Box Make sure the library search path from step 1 above is in the list. If it is not, click the new item button (circled in red in Figure 4) and add the full path to your footprint to the list. Do not delete any existing directories from the list. Click OK when finished.\nRepeat steps 4 and 5 for the padpath, using the same path from step 1. It is recommended that padstacks (.pad) and package symbol footprints (.psm) be stored in the same folder to simplify usage. Click OK when finished to exit the User Preferences Editor.\nFinally, you need to confirm that the path was correctly updated to see your custom footprint. In PCB Editor, choose Place \u0026gt; Manually\u0026hellip; (see Figure 5). This will open the Placement dialog box. Choose the Advanced Settings tab (see Figure 6).\nFigure 5: Place Manually Menu Figure 6: Placement Dialog Box In the Advanced tab of the Placement dialog box (see Figure 6), ensure that the box next to Library is checked.\nIn the Placement dialog box, choose the Placement List tab and select Package symbols from the drop-down menu (see Figure 7).\nFigure 7: Package symbols selected in the Placement dialog box If your custom footprint shows up in the Placement List (see Figure 8), you have successfully updated the library search path. If it does not show up in the Placement List, re-check the above steps.\nFigure 8: Footprints successfully linked to PCB Editor Based on a tutorial written by Seana O\u0026rsquo;Reilly.\n","permalink":"https://embedded-systems-design.github.io/changing-the-library-search-path-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Changing the Library Search Path in Cadence PCB Editor"},{"categories":null,"contents":"Microcontrollers make wonderful \u0026ldquo;brains\u0026rdquo; for embedded systems, but are severely limited in the amount of current they can supply to an external device. In order to determine the amount of current a microcontroller can supply (or sink) with an output pin, open the data sheet and look for the section describing \u0026ldquo;Absolute Maximum Ratings\u0026rdquo;. There, there should be a specification described as the maximum current for a single GPIO pin (see example, Figure 1).\nFigure 1: Example Absolute Maximum Ratings table from a PSoC® 4200 datasheet In the example above, the maximum current that can be sourced/sunk with an I/O pin is 25 mA. Therefore, if you are trying to control an external device that draws 100 mA, the microcontroller can not supply the full amount of current. Or, if your motor requires 12V and the microcontroller only supplies 5V, there is also a mismatch.\nSolution: Add a transistor to interface between the low voltage/low current provided by the microcontroller to the high voltage/high current required by the actuator! Dr. Jordan has put together a detailed presentation on choosing an appropriate transistor for use in high-power digital switching.\n","permalink":"https://embedded-systems-design.github.io/choosing-transistors-for-highpower-digital-switching/","tags":["electrical","interfacing","actuator","transistor","mosfet"],"title":"Choosing transistors for high-power digital switching"},{"categories":null,"contents":"Before using Cadence, configure it for optimal performance by following the instructions below.\nStep 1. Create a Cadence Folder Hierarchy In order for both you and Cadence to find your files easily, download the custom Cadence folder hierarchy ZIP file to your computer and decompress it on the desktop. The resultant folder hierarchy is as follows:\nDesktop\\Cadence\\Backups - All backups saved by Design Entry CIS and PCB Editor will be saved here. Desktop\\Cadence\\Projects - All project files that you generate should be saved here. Inside this folder, create a separate folder for each project or schematic so that the files do not get mixed up when you create a new project. Desktop\\Cadence\\step - All .step files that you download or make to use with the PCB Editor 3-D View function should be stored in this folder. Downloadable .step files can be found at 3D Content Central. Desktop\\Cadence\\symbols - All .pad, .bsm, .psm, and .dra files that you download or make should be stored in this folder. These files contain component footprints and mechanical pins that are used by Cadence. This folder also contains a special ASU via padstack (asuvia.pad) that improves manufacturability on the LPKF PCB mill in PRLTA 109. Step 2. Configure Capture CIS CAPTURE.INI is the primary file in which Cadence stores all of the program settings for schematic editing in Capture CIS. We have created a custom CAPTURE.INI file for the ASU Polytechnic School engineering programs. Follow the instructions below to install and modify the custom CAPTURE.INI file:\nOpen the Capture CIS application, which you will use to design schematics. When the \u0026ldquo;Cadence Product Choices\u0026rdquo; window (see Figure 4) appears, select Allegro PCB Design CIS L and click the checkbox next to Use as default. Click OK to continue. Figure 1: Cadence Product Choices window Quit the \u0026ldquo;Capture CIS 17.4\u0026rdquo; application.\nDownload the ASU Polytechnic School custom Capture.INI file to your computer. This custom file configures Cadence as follows:\nTells Capture CIS to look for PCB footprints in both C:\\Program Files\\Cadence\\SPB_17.4\\share\\pcb\\pcb_lib\\symbols and in C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols.\nTurns on autosave to save your Capture CIS design every 10 minutes.\nTurns on auto backup to back up your Capture CIS design every 10 minutes to C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\Backups.\nAdds two custom help links to the Capture CIS \u0026gt; Help \u0026gt; Web Resources menu\nEmbedded System Design Resources Blog - Cadence Posts Cadence Manuals Edit the custom CAPTURE.INI file to replace the two instances of the text YOURWINDOWSLOGIN with your Windows login (where your home directory is located) on your computer. Examples: DIR1=C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols\nto\nDIR1=C:\\Users\\ssjorda1\\Desktop\\Cadence\\symbols\nBackup Direcory Path=C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\Backups\nto\nBackup Direcory Path=C:\\Users\\ssjorda1\\Desktop\\Cadence\\Backups\nFigure 2 below shows the original custom CAPTURE.INI file, and Figure 3 below shows an edited example.\nCopy your edited custom CAPTURE.INI file to replace the default CAPTURE.INI file at one of the following paths: C:\\ProgramData\\SPB_Data\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini\nor\nC:\\SPB_Data-Silent\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini\nor if you have defined your home directory differently according to the installation instructions, use\n%HOME%\\cdssetup\\OrCAD_Capture\\17.4.0\\Capture.ini where %HOME% is the location you set as your home directory (typcically C:\\Users\\YOURUSERNAME)\nFigure 2: Original custom CAPTURE.INI template Figure 3: Example edited custom CAPTURE.INI template Step 3. Configure PCB Editor Open the PCB Editor application, which you will use to create PCB designs. When the \u0026ldquo;17.4 Allegro PCB Designer Product Choices\u0026rdquo; window (see Figure 4) appears, select \u0026lsquo;Allegro PCB Designer\u0026rsquo; or \u0026lsquo;Allegro PCB Venture\u0026rsquo; and click the checkbox next to Use as default. Click OK to continue.\nAllegro PCB Designer Product Choices window Choose Setup \u0026gt; User Preferences\u0026hellip; (see Figure 5).\nFigure 5: Setup \u0026amp;gt; User Preferences\u0026amp;hellip; menu option Turn on autosave in PCB Editor to automatically back up your design in case of a system crash by selecting the File_management \u0026gt; Autosave category and changing the settings to match the configuration shown in Figure 6 below. Note: By selecting the Favorite check box, PCB Editor will make it easier to access these settings in the future by saving them in the My_favorites folder at the top of the Categories list.\nFigure 6: User Preferences Editor Autosave category configuration Configure the search paths in PCB Editor by selecting the Paths \u0026gt; Library category and selecting the Favorite checkboxes next to padpath, psmpath, and steppath (see Figure 7).\nFigure 7: User Preferences Editor Paths \u0026amp;gt; Library window Click the \u0026hellip; next to padpath and add the path to the symbols folder in the Cadence folder on your desktop (C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols) (see Figure 8). Click the up button to give your library priority over the default location(s). Click OK to save changes.\nFigure 8: Adding to the padpath example Click the \u0026hellip; next to psmpath and add the path to the symbols folder in the Cadence folder on your desktop (C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\symbols) (see Figure 9). Click the up button to give your library priority over the default location(s). Click OK to save changes.\nFigure 9: Adding to the psmpath example Click the \u0026hellip; next to steppath and add the path to the step folder in the Cadence folder on your desktop (C:\\Users\\YOURWINDOWSLOGIN\\Desktop\\Cadence\\step) (see Figure 10). Click the up button to give your library priority over the default location(s). Click OK to save changes.\nFigure 10: Adding to the steppath example Click OK to save changes.\nCongratulations, you have configured Cadence! Next: Get started creating a schematic\nCommon Issues If you can\u0026rsquo;t find your config.ini file, make sure you Also, here is a video documenting an older version of this process:\n","permalink":"https://embedded-systems-design.github.io/configuring-cadence/","tags":["cadence","pcb"],"title":"Configuring Cadence"},{"categories":null,"contents":"What is a UART (Universal Asynchronous Receiver/Transmitter)? UART is one serial protocol used for communicating data between two digital devices (e.g., between the Pioneer Kit and the computer).\nWhen is a UART useful? Some sensors (e.g., GPS and RFID units) have a UART interface. Additionally, it is very helpful for debugging programs by using it to send messages back to the computer indicating the current status of the program.\nHow does a UART work? More information on UARTs is available in the Microcontroller UART Tutorial from Society of Robots.\nHow many PSoC® chips does the PSoC® 4 Pioneer Kit have? See the PSoC® Hardware Development Kits page. This is important to understand the answer to the next question.\nHow do I connect and configure the PSoC® 4 Pioneer Kit to send information to the computer over the UART? On the Pioneer Kit, connect a jumper wire from UART RX (P04) of the PSoC® 4 to J8_10 (P12[7]) of the PSoC® 5LP\nOn the Pioneer Kit, connect a second jumper wire from UART TX (P0[5]) of the PSoC® 4 to J8_9 (P12[6]) of the PSoC® 5LP\nConnect the Pioneer Kit to your computer with a USB cable.\nNext, you will need to determine which COM port the Pioneer Kit is connected to, install a terminal program, and configure it to read data from the serial port on your computer. This will allow you to see the output from your program.\nDetermine which COM port the Pioneer Kit is connected to by opening the Bridge Control Panel application in the Cypress folder in the Start menu, and looking for the COM port listed with the highest number (see Figure 2, below). Write down this port name and close the Bridge Control Panel.\nFigure 2: Bride Control Panel Download, install, and open the terminal program PuTTY\nClick on the Terminal tab and configure it with the settings shown in Figure 3 (below)\nFigure 3: PuTTY terminal configuration tab Click on the Session tab and configure it with the settings shown in Figure 4. Use the COM port for your computer determined earlier in this tutorial. Save the session as PSoC and click \u0026ldquo;Open\u0026rdquo;.\nFigure 4: PuTTY Session configuration tab Finished! Now, you can see text sent between your computer and PSoC® 4 Pioneer Kit via the UART.\n","permalink":"https://embedded-systems-design.github.io/configuring-the-uart-on-psoc/","tags":["cypress","uart","microcontroller","debugging","software"],"title":"Configuring the UART on PSoC"},{"categories":null,"contents":"Q: Help! My computer won\u0026rsquo;t connect properly to the PSoC. (insert one of several error messages here - KitProg version not expected, upgrade the firmware)\nA: Try updating the firmware on the PSoC 4 Pioneer Kit.\nIn Windows, open the PSoC Programmer application Plug the Pioneer Kit into your computer via USB. It should appear on the left hand side of the window under Port Selection. Select the programmer, click the Utilities tab, and click Upgrade Firmware Wait for it to complete and try to use it again. Other ideas: Unplug the device and plug it back in Restart PSoC Creator Restart computer Try a different USB cable. (The cable that came with your kit is a special USB power + data cable. Many phone charger cables only provide power). Try a different computer Q: I get a message saying \u0026ldquo;Debug Target does not match/is not compatible with project's selected device\u0026rdquo;\nUnplug the board Find the onboard toggle switch and flip it (it should not be on BLE) Plug the board back in to see if it is resolved In PSoC Creator, right-click on the project in the workspace explorer and choose \u0026ldquo;Device Selector\u0026rdquo;. Make sure CY8C4147AZI-S475 is selected. (Or, rebuild your project from scratch making sure to choose the correct device at the beginning). Q: How do I fix \u0026ldquo;The selected debug target is not compatible with the projects selected device\u0026rdquo; error (or other errors indicating that the template does not match your PSoC)?\nA: On your projects right click the active (BOLD) project. Choose Device Selector\u0026hellip; from the contextual menu.\nSelect Project Select Device Selector Then, look on the PSoC® BLE module and find the device ID printed in small white characters below the chip. It should look like CY8C424XXXXX-XXXXX, where the XXX\u0026rsquo;s are specific to your PSoC® BLE module. Then, find this device ID in the Device Selector list and select it.\nDevice ID ","permalink":"https://embedded-systems-design.github.io/connecting-to-the-psoc/","tags":["debugging","communication","psoc"],"title":"Connecting to the PSoC"},{"categories":null,"contents":"What is a connector? A connector is an electrical component that links two or more components together. The major types of connectors are:\nWire to wire (e.g., an in-line connector that connects a battery to a wire harness) Wire to board (e.g., a connector that attaches a sensor to a printed circuit board) Board to board (e.g., connectors used to mate a daughterboard with a motherboard) Power connectors, which handle higher currents Modular connectors (e.g., Ethernet plugs) Terminal blocks and barrier strips, which are useful for connecting and disconnecting wires with screw terminals (e.g., a connector used inside a sprinkler or security control box) What companies manufacture connectors? Molex (free samples request) TE Connectivity (free samples instructions) You can also order connectors directly from distributors (e.g., Newark, Digikey, Mouser)\nHow do I choose a connector? ","permalink":"https://embedded-systems-design.github.io/connectors-101/","tags":["connectors","circuit-design"],"title":"Connectors 101"},{"categories":null,"contents":"What is a board outline? A board outline is the outermost boundary of a printed circuit board design. It is used by the PCB manufacturer to cut the printed circuit board to the specified size and shape.\nHow do you create a board outline in Cadence PCB Editor? In PCB Editor, select the rectangle tool in the toolbar (see Figure 1).\nFigure 1: Rectangle tool In the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen, make sure \u0026ldquo;Active Class and Subclass\u0026rdquo; is set to Board Geometry and Design_Outline (see Figure 2).\nFigure 2: Active Class and Subclass options If you would like to change the type of corners on the board, you can change them in the Corners section of the Options tab (see Figure 3). Options include orthogonal (90 degree), chamfer (sloping edge), and round (curved).\nFigure 3: Corners options In the Shape Creation section of the Options tab, choose \u0026ldquo;Place Rectangle\u0026rdquo; and enter the width and height for the board outline in mils (1 mil = 0.001\u0026quot;; 2000 mil = 2\u0026quot;) (see Figure 4).\nFigure 4: Shape Creation options Place the rectangle on the board design (see Figure 5).\nFigure 5: Board Outline Placed Choose Setup \u0026gt; Change Drawing Origin and click in the lower left-most point of the board outline. Your board outline is now complete!\nBased on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/creating-a-board-outline-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Creating a Board Outline in Cadence PCB Editor"},{"categories":null,"contents":"Creating a Custom DC Barrel Jack Schematic Symbol and PCB Footprint in Cadence (Includes Padstack Tutorial)\nFor this tutorial, we will utilize the PRT-10811 breadboard-compatible DC barrel jack adapter sold by Sparkfun, and will be referring to its product drawing found here .\nPart 1: Creating a Barrel Jack Schematic Symbol\nOpen Capture CIS. You can optionally create a new project, design, and/or library, or you can use an existing library.\nRight click your library and select \u0026ldquo;New Part\u0026rdquo;.\nName the part and set the part reference prefix to J, as shown. Leave the PCB Footprint field blank (unless you did part 2 first, then use the name of the footprint).\nFigure Open up the product drawing for the barrel jack adapter. Note the \u0026ldquo;Circuit Diagram\u0026rdquo; section on the left with the pins numbered 1, 3, 2. We will be drawing this symbol by hand in Cadence.\nPlace the three pins spaced out vertically with their numbers, positions, and names according to the drawing.\nGraphical user interface, application, table, Excel Description automatically generated Enlarge the bounding box by clicking on it and then dragging the pink corner handles. Then, space the pins out farther. Since drawn shapes will have their vertices snapped to the grid of dots we can see in the background, we will need some extra space to make this symbol.\nTable, calendar Description automatically generated Calendar Description automatically generated Select the line tool (top of the shapes toolbar). Draw a series of lines representing the tip spring, as shown in the drawing. After drawing one line segment, you can begin another at the endpoint of the previous line.\nGraphical user interface, application, Teams Description automatically generated Chart, line chart Description automatically generated Draw more lines representing the shunt terminal, as pictured. The arrow is imitated with two lines forming an angle pointing downward.\nFigure Start drawing the center terminal with a single, short straight line.\nFigure Select the rectangle tool (second from the top of the shapes toolbar). Draw a rectangle, 1 wide and 4 tall, centered at the left end of this line.\nChart, line chart Description automatically generated Draw two straight horizontal lines, one above the center of the rectangle and one below.\nFigure Figure Select the Arc tool now (second from the bottom of the shape toolbar shown). Click first the left end of the top line, then the space between the lines and one to the left, then the left end of the bottom line. This will cap off the center terminal.\nChart, diagram Description automatically generated Move the pin names so they don\u0026rsquo;t overlap the symbol. If desired or needed, readjust the positions of the lines/shapes slightly.\nFigure You now have a barrel jack schematic symbol. Nice work!\nPart 2: Creating a Barrel Jack PCB Footprint Creating the Padstack\nOpen up Padstack Editor. Select Thru-Pin for padstack usage, Circle for pad geometry.\nFigure Look at the dimensions in the drawing under \u0026ldquo;Recommended P.C.B. Layout\u0026rdquo;. The pins aren\u0026rsquo;t circular, so you\u0026rsquo;ll want the drill hole to be the size of the longest dimension plus tolerances (1.6+0.3=1.9 mm -\u0026gt; 74.8 mils) to ensure it isn\u0026rsquo;t too small. Consult the PCB Mill Specs and round up to the nearest drill size for the drill diameter.\nGraphical user interface Description automatically generated Define a drill symbol with the same radius as your drill hole.\nGraphical user interface, application Description automatically generated Select your regular pad size. You\u0026rsquo;ll want one that guarantees sufficient annular ring and allows adequate clearance between pins. Annular ring can be calculated using the following equation from ProtoExpress.com (read more about annular ring there ).\nAnnular ring width = (Diameter of the pad - Diameter of the finished hole) / 2\nAccording to this equation, a pad diameter of 100 is sufficient for the minimum annular ring of 10 needed to satisfy Peralta\u0026rsquo;s DFM constraints. 128 was chosen for this example as this value results in a larger annular ring yet is still small enough to avoid pin overlap when used in its intended footprint.\nGraphical user interface Description automatically generated Select an anti pad and thermal pad size approximately 20 mils larger than the size of the regular pad.\nGraphical user interface Description automatically generated Add default internal layers identical to the outer layers, so the program doesn\u0026rsquo;t give you an error when saving. As a shortcut, you can actually drag your cursor across a row so the three pads\u0026rsquo; settings are selected together and then copy and paste this row into other layers.\nDefine the soldermask layers with a radius about 20 mils larger than the thermal/anti pads.\nFigure Save the padstack with a memorable enough name to find it in the list later. Make sure to use the Save button in the file menu, not the one on the Summary page (which only saves the summary).\nCreating the Footprint Open PCB Editor, create a new drawing, enter the name you\u0026rsquo;ll use for your PCB footprint, and select \u0026ldquo;Package symbol\u0026rdquo;.\nGraphical user interface Description automatically generated Reset the origin so it\u0026rsquo;s somewhere you can see it. To do this, zoom in really far, then go to Setup -\u0026gt; Change Drawing Origin and click the center of the screen. If no errors about drawing extents appear in the command window and you can see the origin, you\u0026rsquo;re good, if not re-adjust the zoom and try again.\nFigure Click the \u0026ldquo;Place Pin\u0026rdquo; button to start placing your pins. Select the correct padstack, then place pin 1 at the drawing origin. You can do this either by simply clicking the origin, or by typing x 0 0 into the command window to select (0, 0) as the coordinates for this operation.\nA picture containing text, screenshot, monitor, computer Description automatically generated To determine the placement of pin 2, refer to the dimensions given in the drawing. Pin 1 is 13.6 mm to the right of the front of the physical package, while pin 2 is 7.8 mm to the right of the same edge. This means that the distance between them is (13.6 - 7.8) == 5.8 mm. Since pin 2 is to the left of pin 1, we put a negative sign on the number, and we need to convert to mils . Mils = mm *39.37, so 5.8 mm * 39.37 =228.3 mils (to one decimal place).\nSo the coordinates of pin 2 are (-228.3, 0). Use the command x -228.3, 0 to place pin 2 precisely at this point.\nUse the dimensions to place pin 3. The distance of pin 3 to the edge of the barrel jack is 10.6 mm, so to find its x-position relative to pin 1, 10.6 - 13.6 = -3mm = -118.1 mils. The y-distance is stated as 4.8 mm down (negative in our coordinate system) which rounds up to 189 mils.\nThus, use x -118.1 -189 to place pin 3.\nA picture containing text, screenshot, monitor, electronics Description automatically generated Place the reference designator. Click the button shaped like a capital I or a text cursor next to the Place Pin button to enter the correct mode.\nGraphical user interface, application Description automatically generated Click where you want the text, type J* and then hit enter. The reference designator will then appear.\nAdd the package outline. This is a critical step to ensure the barrel jack will be oriented correctly in your PCB layout.\nFigure Click the Add Rectangle tool, two to the right of the Reference Designator button. Using the drop-down menus on the right, make sure Active Class and Subclass are Package Geometry and Assembly_Top, respectively.\nThe dimensions for this rectangle come from the width and length of the barrel jack stated in the drawing. Note that the jack is pointing to the left, so the width of our rectangle will be the length from the drawing (14.5 mm = 570.9 mils), the height of our rectangle will be the width from the drawing (9 mm = 354.3 mils), and it will be placed on the left side.\nFigure From the drawing, the origin of this rectangle would be 13.6 mm to the left of pin 1, and 4.5 mm above. Converting these to mils, the coordinates are (-535.4, 177.2). So type x -535.4 177.2 to place the rectangle at that location.\nA picture containing text, screenshot, monitor, screen Description automatically generated You now have a barrel jack footprint!\nBased on a post written by Joshua Weight\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-dc-barrel-jack-schematic-symbol-and-pcb-footprint-in-cadence/","tags":["custom part","cadence"],"title":"Creating a Custom DC Barrel Jack Schematic Symbol and PCB Footprint in Cadence"},{"categories":null,"contents":"In order to use schematic symbols imported from the web or custom created for your project (very common), you must create a custom symbol library in which to save them. It is good practice to create a custom library for each project that you work on to save your schematic symbols. To create a custom library, do the following:\nWith your project open, choose \u0026ldquo;File \u0026gt; New \u0026gt; Library\u0026rdquo;. This will create a new library with a default name under Design Resources in the project.\nFigure 1 Right-click on the new library and choose \u0026ldquo;Save As\u0026hellip;\u0026rdquo; You will be prompted to enter a name and choose a location for the custom library. Save the custom library in the same folder as your project files.\nFigure 2 Add the custom library to your project by clicking the \u0026ldquo;Place Part\u0026rdquo; tool in the toolbar. Then, click the \u0026ldquo;Add Library\u0026rdquo; button (which looks like a dotted square with a yellow corner) and locate the library file that you saved in the previous step (it will likely be in a different location than the pre-installed libraries). Click \u0026ldquo;Open\u0026rdquo; to add the library to the list of active libraries.\nFigure 3: Toolbar with Add Part button Figure 4: Add Library button (dotted square with yellow corner) To create a new part in the custom library, right-click on the library and choose \u0026ldquo;New Part\u0026rdquo;. More information on creating custom parts can be found on the Creating a Custom Schematic Symbol in Cadence page.\nBased on a tutorial by Cody Van Cleve\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-library-in-cadence/","tags":["tutorial","cadence","custom part"],"title":"Creating a custom library in Cadence"},{"categories":null,"contents":"Introduction A padstack is a design for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered (see example, Figure 1). You may need to create a custom padstack when creating custom parts to ensure that the pad and hole are big enough to be reliable. This tutorial describes the manual creation of custom padstacks using the Pad Designer application.\nFigure 1: Padstack examples for through-hole and surface mount devies The example custom padstacks created in this tutorial will be for TI LM2676 SIMPLE SWITCHER® 8V to 40V, 3A Low Component Count Step-Down Regulator (see Figure 2).\nFigure 2: LM2676 Switching Power Supply IC Search the Datasheet for the Footprint Specifications In order to build a custom padstack, you first need to find the footprint (sometimes called \u0026ldquo;land pattern\u0026rdquo; specifications in the datasheet for the component. Figure 2 shows the land pattern of the IC package from page 34 of the LM2676 datasheet.\nFigure 3: Land pattern from the LM2676 datasheet. Dimensions are in mils, with brackets in mm. By interpreting Figure 3, the following key dimensions were determined:\nPad - Pins\n7 total pins Pad length = 36 mils Pad width = 85 mils Pad spacing = 50 mils (center of one pad to center of the next pad) Mechanical/Thermal Un-Plated Pad* (underneath the body of the chip)*\nLength = 410 mils Width = 425 mils Create a Custom Electrical Padstack 7 pins of the LM2676 will be soldered to (7) 36 mil x 85 mil (L x W) pads spaced 50 mils apart (center to center). Since the 7 pads are all the same, we can create a single padstack and use it for all of the pins.\nIn Windows, open the \u0026ldquo;Pad Designer\u0026rdquo; application. The Pad Designer window shown in Figure 4 will appear and default to editing the parameters for a new unnamed padstack. For a surface mount padstack, the options on the Parameters tab can be left at their defaults. Figure 4: Pad Designer window, Parameters tab The Summary box shows the overall specifications for the currently loaded pad.\nThe Units box shows the units to be used in the creation of the pad, and the number of decimal places that can be used to specify a unit. The mil (1/100th of an inch) is standard for most electronic applications. Higher precision numbers may not improve the overall accuracy due to limitations in manufacturing processes.\nThe Usage options box shows several unused options for padstacks.\nMicrovias (option usually dimmed) are tiny laser-drilled holes used to improve the electrical connection between the layers of a multilayer PCB. \u0026ldquo;Suppress unconnected int. pads; legacy artwork\u0026rdquo; allows for the use of older pads in new designs. Since we are only able to print double-layer (two-sided) PCBs, this option can remain unselected. \u0026ldquo;Mech pins use antipads as Route Keepout; ARK\u0026rdquo; limits routing of traces near mechanical (e.g., thermal or mechanical attachment) pads on the PCB. This option can remain unselected. The Multiple drill box is not used.\nThe *Drill/Slot hole *box shows multiple options for padstack holes. 3 hole types are supported:\n**Circle Drill - most common **(even if the part is surface mount and has no holes) Oval Slot - uncommon. Rectangle slot - used when cutting slots around pads. Uncommon. Plating is a conductive coating that makes a connection through holes in a PCB. 3 plating types are supported:\n**Plated - most common. **A pad will be created and then a hole will be drilled through the pad. Then, the hole will be plated after the PCB mill is finished. Non-plated - uncommon. An area without copper will be milled, and then a hole will be drilled through the PCB. The Thieving tool is more effective for creating mounting holes. Optional - uncommon. This allows the computer to decide. Drill diameter - this is where you will enter the diameter (in the units specified above) of the drill hole. Applies to through-hole designs only.\nTolerance - uncommon (leave 0.0). Acceptable tolerances for drilling that are communicated to the PCB mill. A tolerance of 0.0 means that the hole should be as close to the actual dimensions as possible.\nOffset X and Y - uncommon (leave 0.0). This allows for corrections if the PCB mill is drilling holes in the wrong places. This can be fixed more easily in the PCB mill control software.\nNon-standard drill - uncommon (leave blank). This option allows for methods of drilling that are beyond what we have available.\nThe Drill/Slot symbol box allows for the creation of silkscreen shapes around the pad. Circle and square are most typical.\nThe Top view box shows the padstack under design.\nFigure 5: Pad Designer window, Layers tab The Layers tab is shown in Figure 5.\nThe *Padstack layers *box provides options for editing individual layers or the entire PCB. The \u0026ldquo;Single layer mode\u0026rdquo; allows for simplifying the padstack for a single-sided (single-layer) board. You can click on layers and make changes via the Regular Pad, Thermal Relief, and Anti Pad boxes described below.\nThe default layers for a padstack are:\nBEGIN LAYER - top copper layer of the PCB DEFAULT INTERNAL - inner layers of the PCB (our PCB mill is limited to 2 layers) END LAYER - bottom copper layer of the PCB SOLDERMASK_TOP - top colored soldermask layer of the PCB SOLDERMASK_BOTTOM - bottom colored soldermask layer of the PCB PASTEMASK_TOP - top solder paste layer of the PCB (uncommon in class) PASTEMASK_BOTTOM - bottom solder paste layer of the PCB (uncommon in class) FILMMASK_TOP - top conformal coating layer of the PCB (uncommon in class) FILMMASK_BOTTOM - bottom conformal coating layer of the PCB (uncommon in class) The Views box shows the current padstack under design, either as a horizontal cross-section or a top view. The Regular Pad box allows editing of the size of the pad itself. The Thermal Relief box allows editing for the thermal relief pads necessary for parts that create a lot of heat (e.g., high-power MOSFETs and voltage regulators). The Anti Pad box allows editing of the keep-out area that limits the space that can be milled around the pad. All three types have the following options:\nGeometry - shape of the pad (circle, square, and rectangle most common). Set \u0026ldquo;Thermal Relief\u0026rdquo; and \u0026ldquo;Anti Pad\u0026rdquo; to Null if you do not want to use them. Shape - allows the creation of custom pad shapes. Especially useful for complex SMD devices. Flash - uncommon. Allows the protection of a layer from heat stress. Width and Height- size of the pad on the PCB Offset X and Y - uncommon. This allows for corrections if the PCB mill is not aligned. This can be fixed more easily in the PCB mill control software. In this example, the pad dimensions from the datasheet are entered to create the pad shown in Figure 4.\nFinally, choose \u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and save the padstack to your project folder with a useful name (e.g., \u0026ldquo;SMD85W36L\u0026rdquo; which means a surface mount pad with width of 85 mil and length of 36 mil). Do not use spaces in filenames.\nCreate a Custom Mechanical Padstack In this example, there is also a mechanical pad with dimensions 410 mils x 425 mils (L x W). Follow the instructions above to create the mechanical pad as a \u0026ldquo;Thermal Relief\u0026rdquo; instead of a \u0026ldquo;Regular Pad\u0026rdquo;.\n\u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and save the padstack to your project folder with a useful name (e.g., \u0026ldquo;LM2676mech\u0026rdquo;). Do not use spaces in filenames.\nAdditional Resources Part 19: Designing Pads video from iEngineered Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-padstack-old/","tags":null,"title":"Creating a Custom Padstack (old)"},{"categories":null,"contents":"Introduction A padstack is a design for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered (see example, Figure 1). You may need to create a custom padstack when creating custom parts to ensure that the pad and hole are big enough to be reliable. This tutorial describes the manual creation of custom padstacks using the Pad Designer application.\nFigure 1: Padstack examples for through-hole and surface mount devies The example below is for a simple round pad. You should look up the dimensions for your own parts.\nSearch the Datasheet for the Footprint Specifications In order to build a custom padstack, you first need to find the footprint (sometimes called \u0026ldquo;land pattern\u0026rdquo; specifications in the datasheet for the component. Create a Custom Electrical Padstack 1. Open the new Padstack editor in Cadence:\nFigure 2 2. Select Thru-pin and circle on the start tab\nFigure 3 3. Enter the drill diameter\nFigure 4 4. Define the symbol that will be used to represent the drill hole:\nFigure 5 5. Define the Top and bottom layer inner, outer, and thermal geometry. Since Peralta uses two-layer boards, geometry other than begin and end layers will be ignored.\nFigure 6 The layers tab provides options for editing individual layers or the entire PCB. You can click on layers and make changes via the Regular Pad, Thermal Relief, and Anti Pad boxes described below.\nThe default layers for a padstack are:\nBEGIN LAYER - top copper layer of the PCB DEFAULT INTERNAL - inner layers of the PCB (our PCB mill is limited to 2 layers) END LAYER - bottom copper layer of the PCB SOLDERMASK_TOP - top colored soldermask layer of the PCB SOLDERMASK_BOTTOM - bottom colored soldermask layer of the PCB PASTEMASK_TOP - top solder paste layer of the PCB (uncommon in class) PASTEMASK_BOTTOM - bottom solder paste layer of the PCB (uncommon in class) FILMMASK_TOP - top conformal coating layer of the PCB (uncommon in class) FILMMASK_BOTTOM - bottom conformal coating layer of the PCB (uncommon in class) 6. Define the soldermask geometry for the top and bottom layers\nFigure 7 7. Look through the summary page to ensure everything was entered correctly:\nFigure 8 8. Save to the custom symbols folder you created and included in your padpath.\nAdditional Resources Part 19: Designing Pads video from iEngineered ","permalink":"https://embedded-systems-design.github.io/creating-a-custom-padstack-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom padstack in Cadence"},{"categories":null,"contents":"Introduction A PCB footprint is the physical layout on a PCB to which a component is soldered. Usually, you must create a custom PCB footprint for each custom schematic symbol that you create. Footprints can be made for many standard components (e.g., basic ICs) using the Package Symbol Wizard (see the Creating a PCB footprint using Package Designer in Cadence page), but more complex components (like switching power supply ICs with thermal reliefs) must be created by hand. This tutorial details the manual creation of a custom footprint.\nThe example custom PCB footprint created in this tutorial will be a TI LM2676 SIMPLE SWITCHER® 8V to 40V, 3A Low Component Count Step-Down Regulator (see Figure 1).\nFigure 1: LM2676 Switching Power Supply IC Search the Datasheet for the Footprint Specifications In order to build a custom footprint, you first need to find the footprint (sometimes called \u0026ldquo;land pattern\u0026rdquo; specifications in the datasheet for the component. Figures 2 and 3 show the land pattern and physical dimensions of the IC package from page 34 of the LM2676 datasheet.\nFigure 2: Land pattern from the LM2676 datasheet. Dimensions are in mils, with brackets in mm. Figure 3: Physical package dimensions from the LM2676 datasheet. Dimensions are in mils, with brackets in mm. By interpreting Figures 2 and 3, the following key dimensions were determined:\nPackage geometry (overall)\nLength = 565 mils Width = 410 mils Mechanical/Thermal Un-Plated Pad (underneath the body of the chip)\nLength = 410 mils Width = 425 mils Pad - Pins\n7 total pins Pad length = 36 mils Pad width = 85 mils Pad spacing = 50 mils (center of one pad to center of the next pad) Create Custom Padstack(s) For each different type of pin/pad, you need to create a custom padstack. For more information, see the Creating a custom padstack in Cadence page. For this example, you will need to create two custom padstacks using the dimensions above: one for the mechanical pad and one for the pin pads (which are all the same, so one padstack can be used).\nCreate a New Footprint In Windows, open the PCB Editor application. (You can also use the Package Designer application).\nChoose \u0026ldquo;File \u0026gt; New\u0026hellip;\u0026rdquo;. The New Drawing window shown in Figure 4 will appear.\nFigure 4: New Drawing window Name your drawing, select \u0026ldquo;Package symbol\u0026rdquo; and click OK. A blank package workspace will appear.\nSince the component footprint is a rectangle (common), choose the \u0026ldquo;Shape Add Rect\u0026rdquo; tool (see Figure 5).\nFigure 5: Toolbar Move the cursor over the \u0026ldquo;Options\u0026rdquo; tab (see Figure 6) and enter the package geometry information from the datasheet. Then, place the rectangle on the blank workspace.\nFigure 6: Options tab Choose \u0026ldquo;Layout \u0026gt; Pins\u0026rdquo; to switch to pin mode. Move the cursor over the \u0026ldquo;Options\u0026rdquo; tab (see Figure 7). The options available in the tab are described below.\nFigure 7: Layout \u0026amp;gt; Pins - Options tab The Connect and Mechanical options allow a choice between an electrical pin (Connect) and a mechanical or thermal relief (described in step i below).\nThe Padstack box and the \u0026ldquo;\u0026hellip;\u0026rdquo; button allow entry of the path to the padstack file. These can be the same or different for each pin, depending on the land pattern in the component datasheet.\nThe Copy mode option allows selection of the coordinate system for your pins. Rectangular (default) is most common.\nThe X and Y options allow entry of the quantity, spacing (in mils), and order of pins being placed at once. Note that multiple pins placed this way will all use the same padstack (which in most cases is fine).\nThe Rotation option dictates which way the padstack will be rotated. This is particularly relevant when pins are wrapped around multiple sides of an IC (e.g., for a microcontroller).\nThe Pin # and Inc options allow entry of the starting pin number for the first pin and the number by which to increment pin numbers when multiple pins are placed simultaneously. Make sure that these pin numbers align with the pin numbers in the custom schematic symbol that you created.\nThe Text block and Text name options allow association of a name with the part.\nThe Offset X and Y options allow correction of spacing errors. If you have created your footprint correctly up to this point, you should not need this option.\nClick on the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to Padstack. The \u0026ldquo;Select a padstack:\u0026rdquo; window will appear (see Figure 8). Make sure that both \u0026ldquo;Database\u0026rdquo; and \u0026ldquo;Library\u0026rdquo; are checked, and select the custom padstack that you created for the electrical pad. In this example, the custom padstack is called \u0026ldquo;Smd_85W36h\u0026rdquo;, meaning that it is a surface mount part that is 85 mil wide and 36 mil high. Click OK.\nFigure 8: Select a padstack window for electrical pad Configure the rest of the Options window as shown in Figure 9 and click to place the first pin in the correct position inside the rectangle. The result (top view) should look like Figure 10.\nFigure 9: Options for adding 7 custom pads Figure 10: Pins added to footprint This is a good time to double-check the data sheet connection diagrams to make sure the pin numbering is correct. Figure 11 shows the connection diagram for the IC package from page 2 of the LM2676 datasheet.\nFigure 11: Connection diagram from LM2676 datasheet Careful examination shows that our new symbol has pin 1 at the top of the footprint, whereas the datasheet indicates that pin 1 should be at the bottom of the footprint. This is a critical detail (and common mistake) that must be fixed in order for the board to work properly.\nThere are two ways to fix this problem.\nOPTION 1: Delete and replace. Right-click in the workspace and choose \u0026ldquo;Done\u0026rdquo;. Then, right-click on each pin and choose \u0026ldquo;Delete\u0026rdquo;. Finally, re-place the pins using the corrected options shown in Figure 12.\nFigure 12: Corrected options for adding 7 pads OPTION 2: Manually Edit Text. Click the \u0026ldquo;Text Edit\u0026rdquo; tool in the toolbar (the bottom icon in Figure 13). Edit the number on each pin to correct it.\nFigure 13: Toolbar with Text Edit tool (bottom) The corrected footprint is shown in Figure 16.\nNext, add the mechanical pad. Choose \u0026ldquo;Layout \u0026gt; Pins\u0026rdquo; to switch to pin mode. Move the cursor over the \u0026ldquo;Options\u0026rdquo; tab and click on the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to Padstack. Select the custom padstack that you created for the mechanical pad. In this example, the custom padstack is called \u0026ldquo;Lm2676_Mech\u0026rdquo; (see Figure 14). Click OK and place the pad in the correct position inside of the rectangle.\nFigure 14: Select a padstack window for mechanical pad Finally, you need to add a reference designator (RefDes) for the part number (in this example, LM2676) to the diagram. Click the Label Refdes tool (R1 button, second from the right in Figure 15) and add the part number above the footprint.\nFigure 15: Label Refdes tool (second from right) Finally, choose \u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and save the footprint to your project folder. Do not use spaces in file names. Note that the Package Wizard creates two files: a DRA file (drawing of the package) and a PSM file (package symbol, footprint). The finished PCB footprint is shown in Figure 16. Figure 16: Finished PCB footprint Additional Resources Making and Editing Footprints - Chapter 8 in the Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner How to Create Complex Footprints video from parsysEDA OrCAD Tutorial - Section 8.2 (older version of software) Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-pcb-footprint-manually-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom PCB footprint manually in Cadence"},{"categories":null,"contents":"Introduction A PCB footprint is the physical layout on a PCB to which a component is soldered. Usually, you must create a custom PCB footprint for each custom schematic symbol that you create. This tutorial details the easiest way to make custom footprints using the Package Symbol (Wizard).\nThe example custom PCB footprint created in this tutorial will be a Cypress PSoC® 4 CY8CKIT-049 4xxx Prototyping Kit (see Figure 1).\nFigure 1: PSoC® 4 Prototyping Kit 1. Search the Datasheet for the Footprint Specifications In order to build a custom footprint, you first need to find the footprint specifications in the datasheet for the component. However, sometimes a datasheet does not include a footprint. In this example, Cypress provides the PCB design files for the PSoC® 4 CY8CKIT-049 4xxx Prototyping Kit, where you can get more useful information. Figure 2 shows the PCB layout provided by Cypress. Of note is that while it does show the dimensions of the PCB, it does not show the spacing or position of the pins in relation to the edges of the PCB. In this case, you will need a pair of calipers to measure the pin spacing and position of the pins in relation to the edge. Most standard header pins in embedded systems have a 100 mil (0.1\u0026quot;) spacing between pins, but it is always good to double-check to avoid unnecessary PCB respins later. Additionally, this board can be\u0026quot;snapped\u0026quot; to separate the programmer (left) from the processor (right). This tutorial will assume that the programmer will be snapped off and only the processor module will be used.\nFigure 2: Prototyping Kit PCB layout from Cypress Using this drawing and a pair of calipers to fill in missing information, the final dimensions were determined to be:\nNumber of pins = 44 (22 per side) Lead pitch = 100 mils (0.1\u0026quot;) - spacing from the center of one pin to the center of the next pin in a row Terminal row spacing = 750 mils (0.75\u0026quot;) - spacing from the center of one row of pins to the center of the other row of pins Package width = 950 mils (0.95\u0026quot;) Package length = 2300 mils (2.3\u0026quot;) 2. Create a New Footprint In Windows, open the PCB Editor application. (You can also use the Package Designer application).\nChoose \u0026ldquo;File \u0026gt; New\u0026hellip;\u0026rdquo;. The New Drawing window shown in Figure 3 will appear.\nFigure 3: New Drawing window Name your drawing (do not use spaces in drawing names), select \u0026ldquo;Package symbol (wizard)\u0026rdquo; and click OK. The Package Symbol Wizard window shown in Figure 4 will appear.\nFigure 4: Package Symbol Wizard window Select the Package Type closest to the footprint that you are trying to make and click \u0026ldquo;Next \u0026gt;\u0026rdquo;. The Package Symbol Wizard - Template window shown in Figure 5 will appear. For more information on package types, see the IC Packages tutorial on Sparkfun. In this tutorial, the PSoC® footprint is closest to a Dual In-line Package (DIP), which is a common through-hole package.\nFigure 5: Package Symbol Wizard - Template window In the Package Symbol Wizard - Template window, select \u0026ldquo;Default Cadence supplied template\u0026rdquo; and click \u0026ldquo;Load Template\u0026rdquo;. Click \u0026ldquo;Next\u0026gt;\u0026rdquo; to continue to the \u0026ldquo;General Parameters\u0026rdquo; window (shown in Figure 6). The default template is generally good for most all footprints made using this wizard. Custom templates are required when the grid spacing is different, or if making very small parts (e.g., with QFN packages).\nFigure 6: Package Symbol Wizard - General Parameters window The General Parameters window allows you to set the units that will be used to enter dimensions (typically \u0026ldquo;mils\u0026rdquo; for electronics applications) and the default prefix for the reference designator for this part. A reference designator is the unique ID labeling each part in a schematic (e.g., U1, U2, U3 for ICs). Click \u0026ldquo;Next \u0026gt;\u0026rdquo; to continue to the \u0026ldquo;DIP Parameters\u0026rdquo; window (see Figure 7).\nFigure 7: Package Symbol Wizard - DIP Parameters window The DIP Parameters window allows you to enter the number of pins, spacing, width, and length of the footprint determined from the manufacturer (see step 1, above). Enter the appropriate information and click \u0026ldquo;Next \u0026gt;\u0026rdquo; to continue to the \u0026ldquo;Padstacks\u0026rdquo; window (See Figure 8).\nFigure 8: Package Symbol Wizard - Padstacks window A padstack is a specification for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered. In our example, there are 44 pins that each use the same padstack. Click the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to \u0026ldquo;Default padstack to use for symbol pins\u0026rdquo; to display the padstack browser (see Figure 9).\nFigure 9: Package Symbol Wizard Padstack Browser In the Padstack Browser window, choose a padstack that is appropriate for your component and click \u0026ldquo;Next \u0026gt;\u0026rdquo;. The numbers are typically in mils (e.g., \u0026ldquo;Pad60cir42d\u0026rdquo; is a circular pad with diameter 60 mils and drill diameter of 42 mils). For through-hole components, it\u0026rsquo;s usually better to have larger padstacks to allow for plenty of soldering area. For surface-mount components, the padstack should match the recommendations in the datasheet from the manufacturer. When in doubt, it\u0026rsquo;s sometimes easier to make a custom padstack (see the Creating a Custom Padstack in Cadence page).\nFigure 10: Package Symbol Wizard - Symbol Compilation window The Symbol Compilation window appears (see Figure 10). Leave the default options selected and click \u0026ldquo;Next \u0026gt;\u0026rdquo; to show the Summary window (see Figure 11).\nFigure 11: Package Symbol Wizard - Summary Finally, click \u0026ldquo;Finish\u0026rdquo; to complete the creation of the new symbol. A new window appears with the finished symbol (see Figure 12). Note that the Package Wizard creates two files: a DRA file (drawing of the package) and a PSM file (package symbol, footprint).\nFigure 12: Finished PCB footprint Additional Resources Quick Guide: Creating a Custom PCB Footprint using Package Designer Part 20: Package Symbol Wizard video from iEngineered Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-pcb-footprint-using-package-designer-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom PCB footprint using Package Designer in Cadence"},{"categories":null,"contents":"Introduction In most designs, some components will not be available in built-in libraries. The purpose of this tutorial is to show how to make a custom schematic symbol that can be used in the design of schematics in Cadence.\nThe example custom schematic symbol created in this tutorial will be a Texas Instruments CC2541 Bluetooth-enabled microcontroller.\nLimitations This guide will not cover how to add the custom fields required for PSpice simulations. Unless you are planning to run circuit simulations, PSpice models are not required (and are often not part of the built-in parts).\n1. Search the Datasheet for the Pin Layout In order to build a custom schematic symbol, you need to find the pin layout in the data sheet of the component. Figure 1 shows the pin layout from the CC2541 datasheet.\nFigure 1: Pin layout for the CC2541 microcontroller 2. Create a New Project and Custom Library See the Creating a New Project in Cadence page for instructions.\n3. Create a New Schematic Symbol Right-click on your custom library and choose \u0026ldquo;New Part\u0026rdquo; (see Figure 2). The New Part Properties window will appear (see Figure 3). Note that the file path at the bottom of the window will be the path of your custom library.\nFigure 2: Creating a new part in your custom library Figure 3: New Part Properties window. Name your part with the part number from the component datasheet. If you have not yet created a footprint for your part, you can add it at a later time.\nNext, use the Place Rectangle tool in the toolbar (see Figure 4) to make an outline for your part within the dashed lines. If the area enclosed by the dashed lines is not big enough, you can enlarge it with the arrow tool. IEEE schematic formatting standards dictate that schematic symbols are usually rectangular.\nFigure 4: Place rectangle tool Once your rectangle is complete, you can begin placing pins using the Place Pin tool in the toolbar (see Figure 5). It is a good idea to place pins on the same sides of the chip as its physical layout (see the data sheet) to make circuit debugging easier. In the case of the CC2541, there are 10 pins on each side for a total of 40 pins.\nFigure 5: Place pin tool Upon clicking the Place Pin tool, a window will appear (see Figure 6). The name should be the same as the pin name in the data sheet but different than all other pins on the chip. If there are multiple pins with the same name in the data sheet, add a number to each one to differentiate (e.g., GND1, GND2). The pin number should be the pin number on the chip package, which can also be found in the data sheet. The shape can be a line (common) or other shape depending on the function of the pin. The pin type can be passive, but setting the pin type correctly will help the Electrical Rules Check (ERC) find errors in your design more easily. When you are finished configuring the pin, click OK.\nFigure 6: Place Pin window Once you are finished adding all of the pins for the component, your final product should look something like the symbol in Figure 7.\nPRO TIP: When designing a custom schematic symbol, consider the schematic in which it needs to fit. The location of the schematic pins in the custom schematic symbol need not be identical to the physical part, but changing the order might complicate troubleshooting for beginners.\nFigure 7: Completed schematic symbol Finally, save your part by choosing \u0026ldquo;File \u0026gt; Save As\u0026hellip;\u0026rdquo; and double-checking to make sure it is saving to your custom library. Do not use spaces in filenames. Your custom schematic symbol will now be stored in your custom library and will be available for placing into your schematic.\n4. Editing a Custom Schematic Symbol If you need to edit a custom schematic symbol, save the symbol first. Then, open the Design Cache folder in the project browser (see Figure 8), right-click on the edited schematic symbol in the design cache, and select \u0026ldquo;Replace Cache\u0026rdquo; from the drop down menu to update the schematic symbol in your schematic (see Figure 9)\nFigure 8: Design Cache folder Figure 9: Right-click menu options Based on tutorials by Josh Carroll, Cody Van Cleve, and Robert Goby\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-schematic-symbol-in-cadence/","tags":["cadence"],"title":"Creating a custom schematic symbol in Cadence"},{"categories":null,"contents":"Introduction This tutorial will walk through the creation of a custom surface-mount device (SMD) footprint manually. A MCH3382 Power MOSFET from ON Semiconductor will be used as an example.\nHow do you create a custom SMD pad manually in Cadence? First, find the soldering footprint (sometimes named slightly differently, depending on manufacturer) in the component datasheet (see Figure 1).\nFigure 1: Recommended soldering footprint for MCH3382 Power MOSFET In Windows, open Pad Editor in the Cadence folder in the Start Menu. The Pad Editor window will appear (see Figure 2). The pad editor will allow you to create a padstack for the three individual pads in the footprint. Select \u0026ldquo;SMD Pin\u0026rdquo; under \u0026ldquo;Select padstack usage:\u0026rdquo; and select \u0026ldquo;Rectangle\u0026rdquo; under \u0026ldquo;Select the default pad geometry\u0026rdquo;.\nFigure 2: Pad Editor main window In the \u0026ldquo;Units\u0026rdquo; section of the Pad Editor window (located in the bottom left corner), change the units to match the units in the component datasheet (see Figure 2). For the MCH3382, the footprint is in millimeters (mm).\nClick the Design Layers tab and select the BEGIN LAYER (see Figure 3). Choose a Geometry of Rectangle and enter the width and height (found in the component data sheet) of a single pad.\nFigure 3: Layers tab with BEGIN LAYER and Rectangle Pad selected Save the padstack in the same location as your custom symbols. The following folder is the default:\nC:\\Program Files\\Cadence\\SPB_17.2\\share\\pcb\\pcb_lib\\symbols Repeat steps 1 - 5 for any additional different pads in your component. You do not need to recreate the same pad if it is used multiple times in a single footprint. How do you create a custom SMD footprint manually in Cadence? Open PCB Editor and create a \u0026ldquo;New Drawing\u0026rdquo;. Name the drawing after the package name, and set the \u0026ldquo;Drawing Type\u0026rdquo; to Package symbol (see Figure 4). Click OK. Figure 4: New Drawing dialog box Select the Color / Visibility tab under display (see Figure 5) to adjust the footprint colors to contrast against the black background (see Figure 6). Figure 5: Color/Visibility selection Figure 6: Color Dialog with all subclasses set to white for better contrast In the Color selection, select white and double-click on the white box beside the All subclass to set all of the subclasses to white (see Figure 6). Click OK.\nChoose Setup \u0026gt; Grids\u0026hellip; to adjust the grid layout and spacing. In the Define Grid dialog, check the \u0026ldquo;Grids On\u0026rdquo; checkbox, enter 0.1 for the Spacing in both the x and y dimensions, and click OK (see Figure 7).\nFigure 7: Define Grid dialog Place an origin mark by going to Setup \u0026gt; Change Drawing Origin (see Figure 8)\nFigure 8: Changing the location of the drawing origin Choose Layout \u0026gt; Pins and click on the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen (see Figure 9).\nFigure 9: Options tab for the Pin layout tool Click the \u0026ldquo;\u0026hellip;\u0026rdquo; button next to \u0026ldquo;Padstack\u0026rdquo; and select the padstack that you made in the first part of this tutorial.\nDetermine an origin for your footprint based on the measurements in the datasheet. For the MCH3382, the origin will be where the vertical and horizontal measurement lines intersect in the bottom center of the footprint (see Figure 10).\nFigure 10: Recommended soldering footprint for MCH3382 Power MOSFET In the Command window at the bottom of the screen, type x -65 0 to place the first pad to the left of the origin. Type x 65 0 to place the second pad to the right of the origin, and x 0 210 to place the third pad above.\nNext, add a box around the footprint so that it is clear the pads are related when laying out the printed circuit board. Select the Rectangle tool in the toolbar, and click the Options tab on the right side of the screen. Set the \u0026ldquo;Active Class and Subclass\u0026rdquo; to Package Geometry and Assembly_Top, respectively.\nIn the Command window at the bottom of the screen, type x -80 0 and press return to place the left corner of the box. Then, type x 80 210 to place the top right corner of the box. Right-click and select \u0026ldquo;Done\u0026rdquo;. The footprint should now look like Figure 11.\nFigure 11: Footprint after adding pads Next, we need to add a reference designator that will be visible in the PCB layout. Choose Layout \u0026gt; Labels \u0026gt; RefDes. Select the center of the component and type \u0026ldquo;U?\u0026rdquo;. Right-click and select \u0026ldquo;Done\u0026rdquo;. The footprint should now look like Figure 12.\nFigure 12: Footprint after adding reference designator Save and close PCB Editor. You have successfully made a custom SMD footprint!\nBased on a tutorial by Aaron Dolgin, updated by Sheena Benson (2/2020)\n","permalink":"https://embedded-systems-design.github.io/creating-a-custom-smd-footprint-manually-in-cadence/","tags":["cadence","pcb"],"title":"Creating a custom SMD footprint manually in Cadence"},{"categories":null,"contents":"What is a ground plane? A ground plane is a large area of copper in a printed circuit board design that is connected to ground on the power supply.\nWhat are advantages of having a ground plane in your PCB layout? Simpler circuit layout. All components with ground connections will automatically connect to the ground plane, rather than separate traces. Since most of your components will need to be connected to ground, this is a significant advantage. Larger current capacity. Ground planes are typically larger in area than typical PCB traces, meaning they can conduct larger return currents. This means that the ground potential across different parts of your circuit will be more similar and stable. Less electrical noise. When a digital component changes states (high -\u0026gt; low or low -\u0026gt; high), it creates electrical noise that travels throughout the circuit. Since ground planes have very low impedance, they \u0026ldquo;absorb\u0026rdquo; the electrical switching noise more effectively. Separate analog and digital grounds. For some (e.g., audio) circuits, it is necessary to have separate analog and digital grounds. With ground planes, you can make one layer of the board an analog ground plane and the other layer a digital ground plane, and connect them at a single point to minimize the effects of digital switching noise on the analog circuitry. What are disadvantages of having a ground plane in your PCB layout? All traces and continuity must be carefully checked with a digital multimeter (DMM) before applying power to the board for the first time. (This is required even if you do not use a ground plane, but is even more important if you do.) When soldering and testing PCBs, ground planes make it extremely easy to accidentally short traces to ground. If the PCB manufacturing process leaves any extra copper behind (e.g., from milling), a power or signal trace may be connected directly to ground and short out components or power supplies when powering up the board. A DMM or oscilloscope probe can short a trace or component if the probe touches the powered trace and the ground plane simultaneously. Applying solder mask to the PCB will reduce (but not eliminate) this possibility. Sometimes, \u0026ldquo;ground islands\u0026rdquo; are created where a part of the ground plane is isolated from the rest of the circuit. A fix for this problem is described later in this tutorial. How do you create a ground plane in an existing PCB layout? Start with a PCB layout that has a board layout, all components placed, and all traces routed except the ground traces (see example with ground traces in blue, Figure 1). As you can see, routing all of the ground traces in the example below would add a lot of complexity, so adding a ground plane is a good design option. Figure 1: Example PCB layout with un-routed ground traces in blue In the toolbar, click on the Add Rectangle tool (see Figure 2) and select the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen (see Figure 3). Do not draw a rectangle yet.\nFigure 2: Add rectangle tool Figure 3: Options tab for the Add Rectangle tool In the Options tab, click on the \u0026ldquo;\u0026hellip;\u0026rdquo; button (see Figure 4) near \u0026ldquo;Assign net name\u0026rdquo; and choose your ground net (see Figure 5). Click OK to close the \u0026ldquo;Select a net\u0026rdquo; dialog box.\nFigure 4: ... button to assign ground net name Figure 5: \u0026amp;ldquo;Select a net\u0026amp;rdquo; dialog box Draw a rectangle around all of the placed components. If the above steps were completed correctly, the blue rats nest connections should disappear and ground pins electrically connected to the ground plane (see example, Figure 6).\nFigure 6: Ground rectangle placed Figures 7 and 8 below show closeups \u0026ldquo;before ground plane\u0026rdquo; and \u0026ldquo;after ground plane\u0026rdquo; connections.\nFigure 7: Closeup of board design before ground plane Figure 8: Closeup of board design after ground plane As you can see in Figure 8 above, the connections between the ground pins and the ground plane are very small (5 mils), making them a potential point of unreliability or failure in the design. Connections to power and ground should be a minimum of 20 mils, or larger if using higher currents (use a trace width calculator to determine the minimum size).\nTo increase the size of the connections between pins and the ground plane, choose Shape \u0026gt; Global Dynamic Params\u0026hellip; (see Figure 9).\nFigure 9: Global Dynamic Parameters menu option Select the \u0026ldquo;Clearances\u0026rdquo; tab (see Figure 10) and update the oversize values to a larger number (20 mils or greater) to make the design easier to manufacture and test.\nFigure 10: Clearances tab with updated oversize clearance values Select the \u0026ldquo;Thermal relief connects\u0026rdquo; tab (see Figure 11) and update the thermal width to a larger number (20 mils, or greater for higher currents). Click \u0026ldquo;OK\u0026rdquo; to apply the changes.\nFigure 11: Thermal relief connects tab with updated thermal width Figures 12 and 13 below show closeups before and after the changes to the global dynamic parameters. Note that changes are applied to the entire design, not just a single pad.\nFigure 12: Example pad before global dynamic parameters adjustments Figure 13: Example pad after global dynamic parameters adjustments How do I find and eliminate ground islands? A \u0026ldquo;ground island\u0026rdquo; is a section of a ground plane that is isolated from the rest of the circuit. Ground islands can often be discovered through careful examination of a design with a ground plane, noticing where a rats nest wire still exists (see example, Figure 14).\nFigure 14: Example \u0026amp;ldquo;ground island\u0026amp;rdquo; A ground island can be fixed by adding a via between the ground island and the remainder of the ground plane (see example, Figure 15).\nFigure 15: Repaired ground island Figure 16: Completed PCB design with ground plane What is a void, rubout, or anti-etch and when do I use one? A void, rubout, or anti-etch is a place where the copper is fully removed from the PCB. A common use of rubouts is underneath Bluetooth or Wifi antennas (e.g., from a ESP32, Photon, or Argon) as having a ground plane underneath an antenna will effectively shield RF waves from reaching the antenna. At best this will mean reduced range for a wireless device, and at worst it will mean that the device will not connect wirelessly.\nHow do I create a rubout in Cadence? First, make sure you have placed all of the components on your PCB (and ideally have not started routing traces yet, though this can still be done even if you have routed traces).\nChoose Shape \u0026gt; Manual Void/Cavity and choose a shape of your liking (see Figure 17).\nFigure 17: Anti-etch selection Draw an anti-etch on the appropriate layer(s) in appropriate place(s) (e.g., underneath an antenna). If there are existing races or vias in the area of the anti-etch, you will need to move them. If you have ground (or power) planes on multiple layers, you should place an anti-etch on each of the copper layers (e.g., TOP and BOTTOM). See example in Figure 18. Figure 18: Anti-etch example under a PSoC® 5 footprint To delete an anti-etch, you need to use the special delete tool in the Manual Void/Cavity menu (see Figure 19). Figure 19: Delete tool for manual void/cavity When generating your final Gerber files, you will need to add these anti-etches to the layers in the Artwork Control Form in order for them to be manufactured (see How do I export Gerber files from Cadence?). Additional Resources Tutorial on Split Planes from parsysEDA Based on a tutorial by Cody Van Cleve and updated by Jacob Lara in 2020.* ","permalink":"https://embedded-systems-design.github.io/creating-a-ground-plane-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Creating a Ground Plane in Cadence PCB Editor"},{"categories":null,"contents":"Creating a new project in Cadence\nIn Windows, open the Design Entry CIS program. This program allows you to edit schematics, and will be used to export a netlist describing your schematic into the PCB Editor.\nChoose \u0026ldquo;New \u0026gt; Project\u0026hellip;\u0026rdquo; (see Figure 1), type a name for the project and choose a place to save your project files. Since we will not be simulating the circuit in this tutorial, leave \u0026ldquo;Enable PSpice Simulation\u0026rdquo; unselected and click OK (see Figure 2). WARNING: Do not use spaces or non-alphanumeric characters in the file name for your project.\nFigure 1: New Project menu Figure 2: Making a New Project You may need to add an existing library in order to use Cadence\u0026rsquo;s built-in schematic symbols or custom parts you have previously created. While the option to add libraries directly from the New Part dialog no longer exists in Cadence 17.4, adding a library can be done immediately after the new project has been created:\nFirst, click on the Add Part button (which looks like an integrated circuit with a green plus sign) on the toolbar (see Figure 3)\nFigure 3: Toolbar with Add Part button Second, click the Add Library button (which looks like a stack of books with a green plus sign on the bottom right hand corner) in the Place Part dialog box (see Figure 4)\nFigure 4: Place Part dialog box Finally, select all of the files in the library folder and click Open (see Figure 5)\nFigure 5: Browse File dialog box to add libraries The default location where library files are stored should be similar to: C:\\Cadence\\SPB_17.4-silent\\tools\\capture\\library\\\nIf you plan to use any schematic symbols not built into Cadence, it is a good idea to create a custom library in which to store the symbols. Further instructions are available on the Creating a Custom Library in Cadence page.\nVideo Walkthrough ","permalink":"https://embedded-systems-design.github.io/creating-a-new-project-in-cadence/","tags":null,"title":"Creating a new project in Cadence"},{"categories":null,"contents":"You can try to find existing footprints for components, but most components will require custom footprints.\nIf you are not able to find an existing footprint for a component, then you will need to make a custom footprint. In order to make a custom footprint, you will need a datasheet for the component that includes mechanical dimensions of the component and footprint.\nThe process for creating a footprint is as follows:\nCreate a custom padstack for the component. A padstack is a design for the exposed copper surface area for each hole or pad on the board where the component is mounted and soldered.\nCreate a custom footprint for the component. There are two ways to do this:\nCreating a custom footprint using Package Designer - useful for symmetric ICs (e.g., microcontrollers). Does not work well for parts that have mechanical or thermal pads or non-symmetric packages (e.g., voltage regulators or MOSFETs) Creating a custom footprint manually / creating a custom SMD footprint manually Update the library search path in Design Entry CIS\nUpdate the library search path in PCB Editor\nFigure 1: Video walkthrough of creating a custom footprint (by Ryan Sparks, 2020)\n","permalink":"https://embedded-systems-design.github.io/creating-custom-footprints/","tags":["cadence","pcb"],"title":"Creating Custom Footprints"},{"categories":null,"contents":"Watch the video mini-lecture on DC motor control from Dr. Jordan What types of DC motors are most common? Brushed DC motors. Current flowing in one direction makes the motor turn one direction, and current flowing in the opposite direction makes the motor turn the opposite direction. Stepper motors - provide absolute position control but require a special controller IC Servo motors - PWM signal controls the position of the motor How do I connect a brushed DC motor to a microcontroller? DC motors are inductive loads and therefore cannot be directly connected to a microcontroller without damaging the microcontroller. There are two protection mechanisms that go into a successful motor interface:\nBack EMF / flyback diode - protects against current spikes that can damage a microcontroller. Use \u0026ldquo;rectifier\u0026rdquo; diodes (e.g., 1N400x series) H-bridge - switches current on or off to the motor, and changes the direction of the motor The LMD18200 is a common off-the-shelf H-Bridge IC.\nHow do I change the speed of the motor? Generate a Pulse Width Modulation (PWM) signal from your microcontroller and use it to control the H-bridge.\nHow does a stepper motor work? See the excellent animated GIFs in the Stepper motor entry on Wikipedia\nHow do I connect a stepper motor to a microcontroller? Use an off-the-shelf driver IC instead of trying to build your own driver. The DRV8825 is a common stepper motor control chip.\n","permalink":"https://embedded-systems-design.github.io/dc-motors-101/","tags":["circuit-design","motors"],"title":"DC Motors 101"},{"categories":null,"contents":"Introduction Debugging is a process of systematically double-checking your assumptions, because if everything was correct then it would be working. See below for some common symptoms and possible debugging remedies.\nCommon Issues My PSoC port isn't working Try a different port Check that the pin is set up correctly according to the assignment instructions The above is correct but still not working? Check the continuity of the pins to ensure the soldering quality is not causing the problem My program won't build (Code errors) Does every open curly bracket ({) have a closing partner (})? Does every statement (not condition or loop) have a semi-colon (;)? Were the functions called correctly? Are the loops/conditional statements written correctly? Read the error logs from the earliest error. Use the line numbers in the error logs to find out where, and the message to tell what the error might be (missing ;, {, }, incorrect function name (PIN_NAME_functionname()), missing parenthesis around the if condition, missing parenthesis to signify a function, etc.) My program won't build (Top Design/Pin setup errors) Are the pins and other components set up as instructed by the assignment? Check the connection(s) of components and the PWM module Check that the port/pin is able to do PWM through the pin/port setup dropdown My onboard LED/Button isn't working Choose a different LED/button Ensure components were set up in PSoC Creator as instructed by the assignment Did you try the onboard LEDs or the LEDs near the CapSense pads? Either should work Test the pieces individually/one at a time (i.e. just the LED blinking, then turn on the LED when the button is pushed/held, etc.) before combining them My external LED/Button isn't working Is there power? Is the circuit complete? Are the pins set up correctly in PSoC Creator? Are the anode/cathode of the LED in the correct orientation? (Current flows in the direction of the arrow in an LED). Check that there isn't a short in the circuit Check the resistor(s) being used are the correct ones Use a different external LED Use a different external button Is a wire broken? Try making the onboard LED work with the external button Try making the external LED work without the external button Try making the button work on its own using an onboard LED If none of the above resolve the issue, create a new PSoC project from scratch and redo the part My code doesn't work as it should Confirm line by line what makes sense/is supposed to be there Swap/flip values (trial by experimentation) Try isolating pieces of the code to debug it a little bit at a time (i.e. just the LED flip, then just the dot of the morse code, etc.) Read the code aloud to someone even if they don't understand to find tiny human mistakes (see also: rubber ducking) Chances are the code does exactly what you tell it. So maybe you're not telling it what to do in the right order, otherwise, check your wiring for external components My LED on/off values are inverted? Make sure your LEDs are set up correctly in PSoC Creator Nothing works/I've tried everything here Try starting a new project and redo everything (carefully) Checklist Category Item Soldering Is it a good solder joint? (no bubble/balls of solder, solder isn't touching anything but the pin and the pad, can't see through the other side of the pinhole, nothing is loose/wiggling, solder joints are shiny rather than dull) Do all pins have continuity? (test with multimeter) Coding Is the code readable/well formatted? (makes debugging easier) Do you know what every line of code does? Does every line of code make sense? (makes understanding behavior easier) Does every line function as it is intended? (avoid unexplainable behavior) Do the variables have datatypes (make like match with like to avoid warnings and errors) Do the loops have entry/break conditions (excluding for;;) (have conscious and complete control of loops) Use read functions as intended: read, check, or save values Use write functions as intended: write values to pins Circuit Do all components function independently (to ensure no broken/dead pieces) Are there any shorts? PSoC Configured pin names match names used in code? Using pins that can provide the intended functionality? Everything is connected where it should be (line to pin, clock to PWM) ","permalink":"https://embedded-systems-design.github.io/debugging-psoc-creator/","tags":null,"title":"Debugging Code in PSoC Creator"},{"categories":null,"contents":"What is drawing software used for? Drawing software is used to create diagrams for inclusion in presentations and reports.\nTitle Description Availability Inkscape Recommended . Open source drawing program which can produce professional vector drawings in many formats Open source Draw.Io Recommended. Add-on to google drive documents, free http://draw.io Google Drawings Recommended . Cloud-based collaborative diagramming app available in Google Drive LucidChart cloud-based collaborative diagramming app ASU has a site license if you use your ASU google account. Or get an Education Account Visio Vector-based drawing program Available for download here via Microsoft OnTheHub (formerly Dreamspark). Microsoft Visio 2013 Viewer available from Microsoft Powerpoint Recommended . Can save Drawings as .png Can be purchased as part of Office Suite. Also available on ASU computers Adobe Illustrator Professional Vector-based Drawing Software. Available on some ASU lab computers, or for purchase / subscription Draftsight Free AutoCAD clone, for dxf/dwg editing only Free here , requires registering CorelDraw Professional Vector-based Drawing Software Available in Innovation Hub (for laser cutting). Must be purchased otherwise. ","permalink":"https://embedded-systems-design.github.io/drawing-software/","tags":["asu","software","drawing"],"title":"Drawing Software"},{"categories":null,"contents":"To enable floating point support in the PSoC compiler, follow these steps:\nIn the Workspace Explorer, right-click on your open project and choose Build Settings\u0026hellip;\nClick on ARM GCC -\u0026gt; Linker -\u0026gt; Command Line -\u0026gt; Custom Flags\nEnter -u _printf_float (make sure you have 1 dash and 2 underscores)\nEnabling floating-point support in the PSoC compiler Next, increase the heap size to 0x0800. From the project.cydwr page, go to the System tab and change the Heap Size (bytes) to 0x0800. Increase Heap ","permalink":"https://embedded-systems-design.github.io/enable-floating-point-support/","tags":["psoc","psoc-creator"],"title":"Enabling Floating Point Support in PSoC Creator"},{"categories":null,"contents":"What is a Gerber file? A Gerber file (also known as artwork) is a 2-D graphical representation of a single layer of a PCB. A typical design will have individual Gerber files for each layer (e.g., top copper, bottom copper, top silkscreen, bottom silkscreen, top soldermask, bottom soldermask) of a PCB.\nWhat is a drill file? A drill file (also known as a NC Drill file) stores both the specific sizes and types of drill bits that will be used in manufacturing a PCB in addition to the specific coordinate locations where each hole must be drilled. Our equipment uses files that are in Excellon format.\nYou need both Gerber files for each layer and a single drill file in order to successfully submit your design for manufacturing.\nVideo Walkthrough Alternate Link\nHow do I export Gerber files from Cadence? Open your PCB layout in Allegro PCB Designer\nChoose \u0026ldquo;Manufacture \u0026gt; Artwork\u0026hellip;\u0026rdquo; The Artwork Control Form window (see Figure 1) appears.\nFigure 1: Artwork window Next, a board outline must be added. Right-click on the TOP folder and choose \u0026ldquo;Add Manual\u0026rdquo; (see Figure 2).\nFigure 2: Right-click on TOP and choose \u0026amp;ldquo;Add Manual\u0026amp;rdquo; Enter a film name of OUTLINE and click \u0026ldquo;OK\u0026rdquo; (see Figure 3).\nFigure 3: Film Name window Expand OUTLINE folder and right click on \u0026ldquo;BOARD GEOMETRY/DESIGN_OUTLINE\u0026rdquo; and select add.\nFigure 3.5: Subclass Selection window In the Subclass Selection window (see Figure 4), expand the BOARD GEOMETRY folder and check the box next to DESIGN_OUTLINE. Click \u0026ldquo;OK\u0026rdquo;.\nFigure 4: Subclass Selection window Select the OUTLINE checkbox (see Figure 5). Make sure in Film options that \u0026ldquo;Film name: DESIGN_OUTLINE\u0026rdquo; appears (if it does not, select the OUTLINE checkbox again). Set the Undefined line width to 0.1.\nFigure 5: Artwork Control Form If you have an anti-etch (rubout), you will need to add it to the layer that you put it on. Click on the down arrow under the layer folder(s) that you added it too. Then, right-click on the items in the folder and select Add (see Figure 6).\nFigure 6: Add anti-etch layer Then, expand the anti-etch subclass folder and select the box next to the layer you are adding it to (see Figure 7). Repeat this process for each layer that you have an anti-etch on.\nFigure 7: Adding the anti-etch layer to the top Click the \u0026ldquo;Select all\u0026rdquo; button to output all of the layers\nClick \u0026ldquo;Create Artwork\u0026rdquo; to export the Gerber files\nClick \u0026ldquo;OK\u0026rdquo; to return to the layout\nHow do I export solder mask files from Cadence? See the Exporting Solder Mask Layers from Cadence PCB Editor tutorial\nHow do I export drill files from Cadence? Open your PCB layout in Allegro PCB Designer\nChoose \u0026ldquo;Manufacture \u0026gt; NC \u0026gt; NC Drill\u0026hellip;\u0026rdquo; The NC Drill window (see Figure 6) appears.\nFigure 6: NC Drill window Click \u0026ldquo;Parameters\u0026hellip;\u0026rdquo; The Parameters window (see Figure 7) appears.\nFigure 7: NC Parameters window Select \u0026ldquo;Enhanced Excellon format\u0026rdquo; and click \u0026ldquo;Close\u0026rdquo;\nName the drill file and save it in the same directory as your project\nSelect \u0026ldquo;Auto tool select\u0026rdquo; and \u0026ldquo;Repeat codes\u0026rdquo;\nClick \u0026ldquo;Drill\u0026rdquo; to export the drill file\nClick \u0026ldquo;Close\u0026rdquo; to return to the layout\n","permalink":"https://embedded-systems-design.github.io/exporting-gerber-files-from-cadence-pcb-editor/","tags":["tutorial","footprint","cadence","pcb"],"title":"Exporting Gerber files from Cadence PCB Editor"},{"categories":null,"contents":"What is a solder mask? Solder mask is the thin polymer layer that is applied to a printed circuit board to insulate copper traces from unwanted connections. It is often green, red, or blue, and is put over all parts of a PCB except where components are to be soldered.\nHow do you create a solder mask layer in PCB Editor? Export TOP, BOTTOM, and OUTLINE Gerber files for your design (see Exporting Gerber Files from Cadence).\nIn PCB Editor, open your completed design and choose Manufacture \u0026gt; Artwork\u0026hellip; (see Figure 1). The \u0026ldquo;Artwork Control Form\u0026rdquo; will open (see Figure 2).\nFigure 1: Manufacture \u0026amp;gt; Artwork\u0026amp;hellip; menu option Figure 2: Artwork Control Form Right-click on any of the folders in the \u0026ldquo;Available films\u0026rdquo; section and select \u0026ldquo;Add Manual\u0026rdquo; (see Figure 3). The film naming dialog box will appear (see Figure 4).\nFigure 3: Add Manual contextual menu option In the film naming dialog box, name the new film name SoldermaskTop (or something similar, see Figure 4) and click OK. The \u0026ldquo;Subclass Selection\u0026rdquo; dialog box will appear (see Figures 5, 6, and 7).\nFigure 4: Film naming dialog box In the \u0026ldquo;Subclass Selection\u0026rdquo; dialog box, expand the DRC ERROR CLASS, PIN, and VIA CLASS folders and check the box next to SOLDERMASK_TOP in each folder (See Figures 5, 6, and 7). Click OK.\nFigure 5: DRC ERROR CLASS Figure 6: PIN Figure 7: VIA CLASS In \u0026ldquo;Artwork Control Form\u0026rdquo;, ensure that \u0026ldquo;Film name\u0026rdquo; is SoldermaskTop and \u0026ldquo;Undefined line width\u0026rdquo; is 0.01 (see Figure 8).\nFigure 8: Film name and undefined line width options Repeat steps 3 - 6 to create a solder mask for the bottom layer, if desired.\nUnder \u0026ldquo;Available films\u0026rdquo;, select both the SoldermaskTop and SoldermaskBottom and click \u0026ldquo;Create Artwork\u0026rdquo;.\nIf successful, you will see the message in Figure 9.\nFigure 9: Success! Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/exporting-solder-mask-layers-from-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Exporting Solder Mask Layers from Cadence PCB Editor"},{"categories":null,"contents":"Where can I find a list of existing PCB footprints for Cadence PCB Editor? While Cadence does have some built-in footprint libraries, they are limited due to the hundreds of thousands of different parts in existence. Additionally, most companies make their own footprints to match the specific manufacturing processes that they use.\nIn most cases, it is easier and faster to build your own custom footprints for all components. However, there are some built-in libraries that can be found in the following directory:\nC:\\Cadence\\SPB_17.4-silent\\share\\pcb\\pcb_lib\\symbols Within this folder, you can double-click on the .dra files to see footprints and the .pad files to see padstacks in PCB Editor.\nAdditionally, there is a footprints document that will show you most of the footprints that exist in the library.\nWhat are the most commonly used built-in padstacks? There are a number of useful built-in through-hole padstacks located in:\nC:\\Cadence\\SPB_17.4-silent\\share\\pcb\\pcb_lib\\symbols that follow the naming convention:\npad(number1)(circle/square)(number2)d where\n\u0026ldquo;number1\u0026rdquo; is the outer diameter of the copper ring outlining the pad (see Figure 1, blue ring), \u0026ldquo;circle/square\u0026rdquo; is the shape of the pad (cir is most common for this class), \u0026ldquo;number2\u0026rdquo; is the diameter of the hole in the center of the pad (see Figure 1, red circle) Figure 1: Example through-hole Padstack, where the blue ring is copper and the red is the hole For example, pad93cir56d.pad is a padstack with an outer copper ring diameter of 93 mils (not mm), and a center hole diameter of 56 mils.\nFor surface-mount padstacks, it is easiest to make your own using the Padstack Editor application.\nWhat are the most commonly used built-in footprints? First, look in the manufacturer\u0026rsquo;s datasheet for each component and identify the package type and footprint dimensions. Package type information is typically near the beginning or end of the datasheet. Footprint dimensions are typically near the end of the datasheet.\nOnce you have identified the package type and footprint dimensions, there are a number of useful built-in through-hole and surface mount footprints located in:\nC:\\Cadence\\SPB_17.4-silent\\share\\pcb\\pcb_lib\\symbols Capacitors (through-hole) cap196 - cylindrical vertical-mount capacitor (e.g., electrolytic, tantalum) with 100-mil center-to-center spacing between pins cap300 - circular flat or rectangular vertical-mount capacitor (e.g., ceramic, film) with 300-mil center-to-center spacing between pins cap400 - axial horizontal-mount capacitor with 400-mil center-to-center spacing between pins cap600 - axial horizontal-mount capacitor with 600-mil center-to-center spacing between pins cap1000 - axial horizontal-mount capacitor with 1000-mil center-to-center spacing between pins cap1500 - axial horizontal-mount capacitor with 1500-mil center-to-center spacing between pins Capacitors (surface mount) smc0805 - rectangular surface mount capacitor of size 0805 (0.08\u0026quot; x 0.05\u0026quot;) smc1206 - rectangular surface mount capacitor of size 1206 (0.12\u0026quot; x 0.06\u0026quot;) smc1210 - rectangular surface mount capacitor of size 1210 (0.12\u0026quot; x 0.10\u0026quot;) smc1812 - rectangular surface mount capacitor of size 1812 (0.18\u0026quot; x 0.12\u0026quot;) Diodes, inductors, resistors, and other axial-lead components (through-hole, horizontal mount) res400 - resistor with a 400-mil center-to-center spacing between holes res500 - resistor with a 500-mil center-to-center spacing between holes res600 - resistor with a 600-mil center-to-center spacing between holes res800 - resistor with a 800-mil center-to-center spacing between holes res1000 - resistor with a 1000-mil center-to-center spacing between holes Headers and Jumpers (through hole) jumper1 - 1-pin header jumper2 - 2-pin header with 100-mil center-to-center spacing between pins jumper3 - 3-pin single-row header with 100-mil center-to-center spacing between pins jumper4 - 4-pin single-row header with 100-mil center-to-center spacing between pins jumper5 - 5-pin single-row header with 100-mil center-to-center spacing between pins jumper8 - 8-pin (4x2) double-row header with 100-mil center-to-center spacing between pins jumper14 - 14-pin (7x2) double-row header with 100-mil center-to-center spacing between pins jumper16 - 16-pin (8x2) double-row header with 100-mil center-to-center spacing between pins Resistors (surface mount) smr0805 - rectangular surface mount resistor of size 0805 (0.08\u0026quot; x 0.05\u0026quot;) smr1206 - rectangular surface mount resistor of size 1206 (0.12\u0026quot; x 0.06\u0026quot;) smr1210 - rectangular surface mount resistor of size 1210 (0.12\u0026quot; x 0.10\u0026quot;) smr2010 - rectangular surface mount resistor of size 2010 (0.20\u0026quot; x 0.10\u0026quot;) smr2512 - rectangular surface mount resistor of size 2512 (0.25\u0026quot; x 0.12\u0026quot;) Test Points (used to provide easy access for a multimeter or oscilloscope probe) (through hole) tp1 - square pad with round hole in the middle Transistor Outline (TO) Package Types (through hole) to(number), where \u0026ldquo;number\u0026rdquo; is the number of the specific to case style from the component data sheet (e.g., a transistor with a to92 package type) If your package type and footprint dimensions do not match one of those listed above, then you must create your own custom footprint.\n","permalink":"https://embedded-systems-design.github.io/finding-existing-pcb-footprints-for-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Finding existing PCB footprints for Cadence PCB Editor"},{"categories":null,"contents":"Once you know the types of components that you need for your project, the next step is to find sources/vendors from which you can purchase the components (also known as sourcing parts). Follow the process below to source parts:\nCheck the PRLTA 103 Component Catalog spreadsheet and the parts drawers in PRLTA 103 to see if we have a similar part in stock. Parts in PRLTA 103 do not count toward your prototype budget.\nFor integrated circuits (ICs), sensors, and actuators, go to the manufacturer\u0026rsquo;s website and see if they offer free samples online. If you can\u0026rsquo;t order them online, call the company\u0026rsquo;s sales line and ask \u0026ndash; companies are often more than happy to give you free parts so that you remember their company after graduation.\nCheck to see if a compatible part is in stock at one of our preferred vendors. Even if you can find parts for a lower cost on other sites, it\u0026rsquo;s better to order from one of our preferred vendors because of our university discount and streamlined ordering process.\nASU Preferred Vendors:\nGrainger McMaster-Carr MSC Industrial Newark Staples If the part you need is not available in stock from the above sources, you may order from other suppliers. However, the university will not place an order unless the cost of the parts exceeds the cost of shipping, so please try and minimize the number of vendors that you order from to keep our costs down. Other Vendors to Consider:\nAdafruit All Electronics Digi-Key Harbor Freight Tools Hobby Engineering Jameco Electronics Microchip Mouser Electronics NewEgg Parallax Robot Mesh RobotShop SparkFun Electronics Finally, DO NOT ORDER FROM: AliExpress AliBaba Rakuten Amazon (without prior written instructor approval) Ebay ","permalink":"https://embedded-systems-design.github.io/from-where-can-i-source-parts/","tags":["components","asu","ordering","parts","process","purchasing","suppliers","sourcing"],"title":"From where can I source parts?"},{"categories":null,"contents":"What are fuses and when do I need them? A fuse is an electronic component that protects a circuit by creating an open circuit if it draws too much current. **Fuses do not protect against voltages that are too high. **\nFuses are most useful around power supplies, both when power comes into a system and on individual power rails. For example, if you have a 12V rail that should only draw 750 mA and a 5V rail that should only draw 400 mA, you might put a 750 mA fuse in series with the 12V supply output and a 500 mA fuse in series with the 5V supply output.\nA common mistake that fuses protect against is accidentally shorting the power rail to ground (e.g., with a DMM probe as you are trying to touch the correct pins). This causes an infinite amount of power to be drawn from the power supply, and can sometimes damage or destroy voltage regulators or power supplies.\nWhat are the most common types of fuses? Standard fuses contain a small piece of wire made of an alloy that melts readily. If the current gets too high, it burns out and opens the circuit. Standard fuses come in many different shapes and sizes.\nAdvantages: Inexpensive, replaceable Disadvantages: Must be replaced when blown, sometimes no visual indication that they are blown Examples from Littelfuse Resettable PTC fuses are tripped by heat caused by current above the rating of the fuse. If the current flowing through the fuse goes above its rating, the fuse changes from having very low resistance to having a high resistance (thereby stopping the flow of current through the circuit). It is self-resetting after power is removed and the fuse cools.\nAdvantages: Reusable, useful when cause of overcurrent is a user failure (e.g., plugging a connector into the wrong pins on a PCB) Disadvantages: More expensive than standard fuses, small leakage current after breaking, significantly lower voltage ratings (60V) compared with non-resettable fuses (600V) Examples from Littelfuse Circuit breakers are typically used in AC power applications like homes.\nAdvantages: Reusable and easy to reset by hand. This reduces downtime and repair costs. Easy-to-see indication of whether the circuit breaker is tripped. Useable as an on-off switch. Disadvantages: Very expensive, not well suited for low-voltage DC applications ","permalink":"https://embedded-systems-design.github.io/fuses-101/","tags":["components","circuit-design","fuses"],"title":"Fuses 101"},{"categories":null,"contents":"What is a printed circuit board (PCB)? See the What is a Printed Circuit Board? page for more information about PCBs and the general design flow for creating a PCB.\nWhat is Cadence PCB Editor? Cadence PCB Editor is an electronic CAD (ECAD) program that takes a netlist created by Cadence Schematic Capture and provides you a software environment to design a PCB. A netlist is a file that describes interconnections among components in a circuit. Read the short Cadence (Allegro) PCB Designer Datasheet for an overview of the software and its features.\nVideo Walkthrough (Cadence 16.6) How do I launch Cadence to create a PCB? In Windows, launch \u0026ldquo;PCB Editor\u0026rdquo;.\nThis program is also called \u0026ldquo;Allegro PCB Designer (was Performance L)\u0026rdquo; and \u0026ldquo;Allegro PCB Design L (legacy)\u0026rdquo;. These programs are all equivalent.\nHow do I transfer a design from Design Entry CIS to PCB Editor? See the Transferring a Cadence Schematic to PCB Editor page.\nHow do I create a PCB layout in PCB Editor? Create a board outline Change the library search path to point to the footprints folder Place the components into the design Route traces on the PCB Follow the ASU PCB Fabrication Process Misc Globally changing trace widths: \u0026lt;altering-trace-widths.html\u0026gt;\nGlobally changing vias: TBD\nAdditional Resources Introduction to the PCB Design Flow by Example - Chapter 2 in the Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner ","permalink":"https://embedded-systems-design.github.io/getting-started-with-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Getting Started with Cadence PCB Editor"},{"categories":null,"contents":" Personal Projects and Education\na. Arduino Project Hub is where you can learn about what all other beginner or advanced embedded systems designers are building for their own personal needs. By now, most of you may have an Arduino kit from a previous class so the learning doesn\u0026rsquo;t have to stop after 304/314.\nb. GeeksforGeeks is a great website that explains the basics of C/C++, Java. Python, etc. They also go through some simple example problems and show common programming problems commonly seen in software technical interviews as well.\nc. Hackerrank is a fun website that allows you to work through programming problems for points. You can create a solution to a problem in any language you want (Java, C, Python, SQL, Linex, etc.) and then submit your solution to see how it compares with others on the ranking board. Signing up is free (\u0026quot;Sign Up and Code\u0026quot; for Developers). It's a great tool if you're trying to build your problem-solving skills in a specific language or just trying to have some fun programming!\nSeminars/Conferences\na. Embedded Technologies Expos and Conferences- One of the largest embedded systems and IoT events, that focuses specifically on educating and training others in the field about what new in edge computing, AI, machine learning, IoT, and etc. They hold conferences annually, so be sure to place a bookmark on their website to know when their next conference is.\nb. CES Annual Conference \u0026ndash; Also known as Consumer Electronics Show, the CES conference features tons of speakers from the world top technology companies, and provides workshops are session open to attendee to learn about disruptive and advancements in the tech and electronics world in general.\nc. Grace Hopper -\nd. Hackathons \u0026ndash; MLH or Major League Hacking\nInternships/Co-ops\nMany graduates of the course aren\u0026rsquo;t quite sure where to look when it comes to pursuing a career in embedded systems. In fact, most engineers with a career in \u0026ldquo;embedded systems\u0026rdquo; are typically senior electrical or software engineers due to the complexity and abundance of knowledge required to be successful in the field. But have no fear! There are many other roles and positions that focus on different facets of embedded systems, and all are worth exploring if you are trying to gain experience. Some of these job titles include:\na. Embedded Software Engineer b. Software Engineer c. Firmware Engineer d. Hardware Engineer/Architect e. PCB Designer f. Electrical Engineer g. Robotics Engineer h. Systems Engineer i. Test Engineer j. And more!\nThese roles are also the perfect keywords to search for when looking for internships on Google, LinkedIn, Glassdoor, and even Handshake. Just be sure to also type \u0026ldquo;Intern\u0026rdquo; or \u0026ldquo;Internship\u0026rdquo; in your search bar and filters as well. If you are looking for an experience longer than the typical 3-4 months during the summer, be sure to search for \u0026ldquo;Co-ops\u0026rdquo;. Co-ops are typically 6 months-1 year or longer and allow you more time to build your skills while being treated like an entry level engineer. Some example companies that are known to provide embedded systems related internships, and are good companies to looking into, include:\nApple Amazon Boeing Brain Corp CalAmp General Atomics Honeywell IBM Intel Jet Propulsion Laboratory Lockheed Martin Logitech L3Harris Mercury Aerospace Microchip Microsoft Motorola NASA Natilus Northrup Grumman PlayStation Qualcomm Raytheon Technologies Samsung Space-X Stryker Tesla TuSimple United Armed Forces (Air Force, Army, etc.) ViaSat Research Experiences for Undergraduates (REU) If you think research or pursuing graduate school in is your plans, Research Experiences for Undergrads (REU) funded by the National Science Foundation (NSF) or working with a professor over the summer may be more of your interests. Research allows to you work directly in the advancement of embedded systems and give you the opportunity to explore what interests you most. REU\u0026rsquo;s and research positions are similar in the application process as internships and co-ops, however these kinds of experience typically require transcripts and letters of recommendation for a facility to better understand if you have a specific strong suit that is needed or to get to know you better beyond a student. They deadline for these summer opportunities are typically between January-May, with positions starting between May and June. Many of these REU\u0026rsquo;s can be found on the NSF website, but some example REU\u0026rsquo;s that relate to embedded systems include:\nUniversity of Southern California\u0026rsquo;s Robotics and Autonomous Systems (RAS) University of Connecticut\u0026rsquo;s Trustable Embedded Systems Security Research Florida Atlantic University\u0026rsquo;s Institute for Sensing and Embedded Network Systems Engineering Marquette University\u0026rsquo;s Marquette Embedded SystemS (MESS) Lab Duke University\u0026rsquo;s Electrical and Computer Engineering Summer Undergraduate Research Program And many more! When search for an REU, key words can include \u0026ldquo;Sensing\u0026rdquo;, \u0026ldquo;Embedded Systems\u0026rdquo;, \u0026ldquo;Robotics\u0026rdquo;, and many others. There are REU that are available to graduate students as well, so if you are pursuing 4+1 right after 304/314 there are still opportunities for you to pursue research at another university while at ASU.\nMentorship A fourth and final way to grow your expertise in embedded systems is by building a relationship with a mentor in the field! Mentors are highly recommended to all university students because they are people who you can look up to for help or questions related to becoming a professional. A mentor can be a working engineer in the field you are interested in, or even a close family friend who retired from a field you pursed a degree in. Either way, mentors are great connections to have. You can find a mentor at any time you want through services such as ASU\u0026rsquo;s Mentor Network or Alumni Association, or even by just by reaching out to a professional on LinkedIn and planning to meet with them over coffee.\nAnother way mentorship could be a critical role in your life is by becoming one yourself! One way to build your experience is by teaching others what you have learned. An obvious way you can part take in this is by becoming a UGTA for EGR 304/314. As your teaching staff have said and you have probably heard before, UGTA\u0026rsquo;s learn the most when they are helping others, and this can\u0026rsquo;t be any more of an understatement. However, if becoming a UGTA may not be your thing, there is also the option to organize outreach events with younger children and teaching them how to build cool embedded systems on gadgets such as Arduino. Opportunities like this exist at summer technology camps such as iD Tech, where you can teach K-12 children how to code as a camp counselor, or by hosting an embedded systems fun project event at ASU\u0026rsquo;s Open Door event. You are never \u0026ldquo;unknowing\u0026rdquo; in the field of embedded systems, and by taking 304/314 do have experiences you can share with others that may benefit them. By spreading the knowledge, you have, you are also building your knowledge and expanding your impact in the realm of embedded systems, so never think it\u0026rsquo;s too early to start giving back in this field.\n","permalink":"https://embedded-systems-design.github.io/grow-your-embedded-programming-skills/","tags":["programming"],"title":"Grow Your Embedded Programming Skills After EGR 304/314"},{"categories":null,"contents":"What is a House of Quality, and what is it used for? The House of Quality diagram is used to translate customer requirements, market research, patent benchmarking, and technical benchmarking into product capabilities that can be targeted in a new product design. It is an integral component of the Quality Function Deployment (QFD) method for translating qualitative user needs into quantitative requirements.\nGupta, P. (2001). The house that quality built. Printed Circuit Fabrication, 24(12), 47-48. How do I build a House of Quality? House of Quality Interactive Tutorial from Antony Lowe Quality Function Deployment (QFD) and House of Quality video from MIT Open Courseware House of Quality roof diagram video from EGR 202 (start at 6:50) Where can I find House of Quality templates? Free House of Quality (QFD) Templates from QFD Online Where can I find House of Quality examples? Criteria Correlation Matrix example from EGR 202 ","permalink":"https://embedded-systems-design.github.io/house-of-quality/","tags":["problem definition"],"title":"House of Quality"},{"categories":null,"contents":"Laser Rangefinders https://www.tme.eu/en/news/library-articles/page/21956/laser-rangefinders-how-do-they-work-which-one-should-you-choose/ https://www.hackster.io/iliasam/making-a-cheap-laser-rangefinder-for-arduino-4dd849 https://sudonull.com/post/24300-Homemade-Scanning-Laser-Rangefinder Laser Thermometers (pyrometers) https://sciencing.com/laser-thermometers-work-4962575.html Record Players https://electronics.howstuffworks.com/record-player.htm Digital Calipers https://www.wonkeedonkeetools.co.uk/calipers/how-does-a-digital-caliper-work Ultrasonic Distance Sensors https://www.arrow.com/en/research-and-events/articles/ultrasonic-sensors-how-they-work-and-how-to-use-them-with-arduino https://www.maxbotix.com/articles/how-ultrasonic-sensors-work.htm https://www.youtube.com/watch?v=2ojWO1QNprw https://www.youtube.com/watch?v=1jGvzNrtF24 ","permalink":"https://embedded-systems-design.github.io/how-does-x-work/","tags":["sensors"],"title":"How does X work?"},{"categories":null,"contents":"Adding solar to a project has a few more steps then just hard wiring a solar panel. Solar panels fluctuate with power delivery to a system. To combat this, solar panels often charge a power cell or battery. This battery provides constant power to your project .\nNeeded Components Solar Panel Lithium Battery Voltage regulator Lithium Ion Battery break out board Filtering capacitors Purpose The lithium ion battery break out board is crucial to preventing any overcharge or over-discharge to your project. The breakout board also limits the solar input to the battery itself and introduces trickle charging to prevent overcharge to your battery. The size of the solar panel and battery needed depends on the power needs of your individual project.\nSchematic Additional Resources Power Supplies 101\n","permalink":"https://embedded-systems-design.github.io/how-to-add-solar-to-your-circuit/","tags":["circuit-design","solar"],"title":"How to Add Solar to Your Circuit"},{"categories":null,"contents":"How to Create a Silkscreen in Cadence and Manually Add Text to it Create a (finalized) PCB layout. Note that the amount of additional work required for a good silkscreen layer will depend on how your PCB footprints were designed. This example will use the board shown below: Go to Manufacture \u0026gt; Silkscreen. Clicking the \u0026ldquo;Silkscreen\u0026rdquo; button generates a manufacturing-specific silkscreen film for either the top, bottom, or both, by combining several related classes into a single film for each selected layer. Open the Artwork Control Form at Manufacture \u0026gt; Artwork. Similarly to adding soldermask layers, right click an existing film and select \u0026ldquo;Add Manual\u0026rdquo; from the drop-down menu. Create a layer called \u0026ldquo;SilkscreenTop\u0026rdquo; using the film located at MANUFACTURING/AUTOSILK_TOP and a bottom layer using AUTOSILK_BOTTOM. Graphical user interface, text, application Description automatically generated A screenshot of a computer Description automatically generated with medium confidence Your list of films should now resemble this image.\nView the silkscreen film(s) you\u0026rsquo;ve generated. This can be done within Cadence by switching to the \u0026ldquo;Visibility\u0026rdquo; tab on the far right and selecting a film from the \u0026ldquo;View\u0026rdquo; drop-down menu. To go back to displaying your regular PCB layout, click \u0026ldquo;On\u0026rdquo; next to \u0026ldquo;Global visibility\u0026rdquo;. A screenshot of a computer Description automatically generated A screenshot of a computer Description automatically generated with medium confidence You may find that design outlines and/or reference designators for specific components are missing from your silkscreen. In this case, try the following:\na. Select \u0026ldquo;Any\u0026rdquo; instead of \u0026ldquo;Silk\u0026rdquo; for the menus under \u0026ldquo;Classes and Subclasses\u0026rdquo; in step 2. This was necessary for the reference designators to appear in this example. Alternatively, when designing a PCB footprint, you can place a refdes on Silkscreen_Top as well as Assembly_Top-- the package symbol wizard does this.\nb. Edit your custom PCB footprints to ensure they include component outlines. The green rectangles drawn around symbols\u0026rsquo; pins by default if they lack an actual outline are not transferred to the silkscreen, as can be seen with the example PCB.\nTo manually add text to a silkscreen layer, first, select the text tool from the toolbar, then select Board Geometry and Silkscreen_Top for Active Class and Subclass. Click where you want the text, type it in, and press Enter, the same way you would add text to an etch layer.\nA green circuit board Description automatically generated with low confidence Re-create the Manufacturing AutoSilk film(s) as described in Step 2. Switch your visibility to the corresponding silkscreen film and you will see your text has been added. A screenshot of a computer Description automatically generated References:\nCadence PCB Interactive Automatic Silkscreen (Youtube) by parsysEDA.\n","permalink":"https://embedded-systems-design.github.io/adding-silkscreen/","tags":["cadence","silkscreen"],"title":"How to Create a Silkscreen in Cadence and Manually Add Text to it"},{"categories":null,"contents":"Introduction This tutorial goes through how to save CIS schematics and PCB layers as a PDF.\nFirst, configure Microsoft Print to PDF to print to a file\npackaging-cadence-files-for-submission.html\nSaving a Cadence Schematic as a PDF\nOpen your schematic in Capture CIS.\nChoose File \u0026gt; Print.. (see figure 1) and then click OK (see figure 2). Note: Do not \u0026ldquo;Export as PDF\u0026rdquo; for capture CIS\nFigure 1: Capture CIS print location. Figure 2: Print settings page for Capture CIS. Choose where to save PDF.\nSaving layers in PCB editor as a PDF\nOpen your layout in PCB editor.\nChoose File \u0026gt; Export to PDF.. (see figure 3).\nFigure 3: PCB editor export to PDF location. Select layers or \u0026ldquo;films\u0026rdquo; you want to show up in the PDF (See figure 4).\nFigure 4: PDF export confirmation screen. Select export to save the PDF of your selected layers.\n","permalink":"https://embedded-systems-design.github.io/how-to-export-a-pdf-from-capture-and-pcb-editor/","tags":["ecad","tutorial","cadence","documentation","drawing"],"title":"How to export a PDF from Capture and PCB Editor"},{"categories":null,"contents":"In order to program a Cypress Programmable System on a Chip (PSoC®), you first need to install Integrated Development Environment (IDE) software on your computer. An IDE is program that you install on a computer to support the development of software for a particular hardware platform. It typically includes a text editor for editing source code, a compiler to covert source code into machine code, and a debugger for helping to identify the source of errors in source code.\nThere are two primary free IDEs available to program on the PSoC® platform. Both will only run on Windows, but will run on a Mac running Windows via Bootcamp or Parallels.\nPSoC® Creatorâ„¢. This IDE is the simplest to get started with PSoC®. Download it here (requires the creation of a free account). Training is available here. PSoC® Designer. This IDE allows lower-level configuration of the PSoC® hardware. It is recommended for advanced applications only. Download it here (requires the creation of a free account). Training is available here. ","permalink":"https://embedded-systems-design.github.io/integrated-development-environments-for-psoc/","tags":["cypress","programming","microcontroller","software"],"title":"Integrated Development Environments for PSoC"},{"categories":null,"contents":"What is an interrupt? Consider the following knock-knock joke:\nFigure 1 Joker: \u0026ldquo;Knock, knock\u0026rdquo;\nInnocent Person: \u0026ldquo;Who\u0026rsquo;s there?\u0026rdquo;\nJoker: \u0026ldquo;Interrupting cow\u0026rdquo;\nInnocent Person: \u0026ldquo;Interrupting co\u0026hellip;\u0026rdquo;\nJoker: \u0026ldquo;Mooooo\u0026rdquo; (while the innocent person is responding)\nWe started this discussion of interrupts with a knock knock joke because it captures the essence of what an interrupt is in an embedded system. Consider the main loop of the program as the \u0026ldquo;Innocent Person\u0026rdquo; and the event (e.g., sensor) as the \u0026ldquo;Joker\u0026rdquo;. The Joker causes the normal routine of the knock knock joke to be broken by the event of the punchline delivery (interrupt).\nWhen an event in a system triggers an interrupt, the program momentarily breaks from whatever it is currently doing in the main loop, executes code in an interrupt service routine, and returns to the place where it left off in the main loop. Since most microcontrollers can only handle one software task at a time, using interrupts allows multiple things to be monitored at the same time.\nWhat is an interrupt service routine? An interrupt service routine (abbreviated ISR) is the separate program code that is executed after an interrupt is triggered. It is similar to calling a function (except that the calling mechanism is by interrupt, rather than explicit call in the code).\nWhat are the different types of interrupts? Internal interrupt. Internal interrupts are created internally by the microcontroller. For example, when the UART receives a byte from an external sensor, it could trigger an interrupt. External interrupt. External interrupts are created externally to the microcontroller and are usually associated with external interrupt pins. For example, a button could be attached to a microcontroller pin and when the pin changes state, an interrupt could be triggered. How does interrupt priority work? Since interrupts can happen at nearly any time, there is a possibility that interrupts from two or more different sources can be generated at the same time. If the microcontroller finds pending interrupts from multiple different sources, it will use the programmer-assigned priorities for each interrupt source to determine which interrupt service routine to run first. Once the first interrupt is serviced, additional interrupts will be serviced in priority order.\nHow do I create a UML diagram for an interrupt service routine? An example UML activity diagram for an interrupt-based system is shown in Figure 1 below.\nFigure For more information on UML, please see the What is Unified Modeling Languageâ„¢ (UML®)? blog post.\nWhat is the general process for enabling interrupts on a microcontroller? Interrupts are typically active in a specific region of code defined by the programmer. Before the region of code where interrupts should be active, interrupts must be enabled (typically one or more lines of code specific to the microcontroller). After the region of code where interrupts should be active, interrupts must be disabled (typically one or more lines of code specific to the microcontroller).\nReferences https://www.techopedia.com/definition/7772/internal-interrupt https://www.techopedia.com/definition/7115/external-interrupt http://www.scriptoriumdesigns.com/embedded/interrupts.php Based on a blog entry written by Kevin Nichols\n","permalink":"https://embedded-systems-design.github.io/interrupts/","tags":["microcontroller","software"],"title":"Interrupts"},{"categories":null,"contents":"An interrupt is a signal received by a microcontroller and emitted by hardware or software that is signaling a system event that needs immediate attention. Interrupts are useful to avoid constant monitoring of electronic peripherals (e.g., sensors).\nSpecial care must be taken when using interrupts on the PSoC®. Cypress has published excellent application notes on using interrupts on the PSoC®:\nPSoC® 4 Interrupts from Cypress PSoC® 3 and PSoC 5LP Interrupts from Cypress ","permalink":"https://embedded-systems-design.github.io/interrupts-on-psoc/","tags":["cypress","microcontroller","documentation"],"title":"Interrupts on PSoC"},{"categories":null,"contents":"Introduction When drawing a schematic, crossing wires can make the schematic difficult to read and follow signals (see example, Figure 1). This tutorial shows several techniques for keeping your schematic tidy.\nFigure 1: Example of difficult-to-follow schematic How do I keep my schematic tidy? Technique 1: Lay out parts to avoid crossing wires You can edit the pin layout of a schematic symbol to avoid crossing wires (see Figure 2).\nFigure 2: Schematic symbol edited to avoid crossing wires Technique 2: Use Net Aliases Net aliases let you make connections across the schematic without wires. Nets (wires) with the same name are electrically connected.\nFigure 3: Place net alias tool Figure 4: Schematic using net aliases Technique 3: Use Multiple Pages You can also create multi-page schematics and use off-page connectors (similar to net aliases) to make electrical net connections across pages.\nTechnique 4: Boxes and Labeling An excellent way to help make your schematic more readable is to use the box tool and the text tool to section off and label different areas of the schematic. Also, make sure to complete your title block.\nFigure 5: Example schematic with sections and labels Based on a tutorial written by Robert Goby. Updated by Zachary Conley.\n","permalink":"https://embedded-systems-design.github.io/keeping-a-schematic-tidy/","tags":["cadence"],"title":"Keeping a Schematic Tidy"},{"categories":null,"contents":"Introduction: What is a level shifter? A level shifter either shifts the voltage of a data line up or down depending on what your circuit entails.\nWhy? Integrated circuit powered at different voltage levels often need to be used together within a single PCB. This can be due to part availability, to ensure compatibility with older chips or systems, or due to specified communication protocols. In any regard, the specifications of individual chips may make it impossible to use the same logic levels between the two ICs without stepping up or stepping down the voltage level.\nThe most common type of level shifters are ones that shift 5v logic down to 3.3v logic. If a level shifters are not used, the receiver of the logic will be irreparably damaged. If you do not know if you need this, check your data sheet! Look for a phrase such as \u0026ldquo;3.3v tolerant\u0026rdquo;, or check the GPIO absolute maximum ratings to see if pins are able to receive voltages higher than the supply voltage.\nIn the following sections we will discuss a number of options for stepping signal voltages up or down. The following options will be discussed:\nVoltage dividers (Step down) Zener diodes (Step down) Transistors Level shift ICs Voltage divider Voltage divider The easiest way to shift voltages down is to create a voltage divider, as seen above. This is the easiest and cheapest way to construct a low power level shifter and will be adequate for most projects. A good way to calculate this is use V=IR.\nIn the above figure we use the equation V=IR twice. First, we find the current running through R5 and R6 by taking 5V/(1.8k + 3.3k) = .982mA. We then use that current to determine the voltage across R6, with .000982*3300=3.23V.\nThe most important part of selecting the right resistances is to ensure that the current being output from any pin is lower than the rated output current from the transmitting device\u0026rsquo;s datasheet.\nZener Diode Zener Diode A Zener diode is a special diode whose reverse breakdown voltage is specially tuned to be used for special cases. Zener diodes can be purchased with a wide variety of breakdown voltages, including 3.3V. The circuit above shows the zener diode placed below a resistor, R7, which is used to limit current across the diode. You will also notice that the diode is placed in \u0026ldquo;reverse\u0026rdquo; from what a normal diode would be; this means that whenever a voltage higher than 3.3V (for this particular diode) is present, the diode will enter \u0026ldquo;reverse breakdown\u0026rdquo; and permit current to pass through it. Care must be taken to select a resistance for R7 that does not permit too much current to pass over the diode or from the IC output pin, while permitting enough current to fully activate the diode in breakdown.\nTransistor-based level shifters Step-Down BJT BJT transistors can also be used to step up or step down voltages. While a single NPN transistor can be used to shift logic levels, a single stage will also \u0026ldquo;invert\u0026rdquo; the logic signal, making logic-high low and logic-low high. The solution to this is to use two sequential transistor stages. This has the effect of inverting the signal twice while changing the voltage level in the process. Depending on the supply voltage used above the transistors, the voltage output can go up or down.\nStep-Up BJT The issue with all the above solutions, however, becomes apparent when a high number of signals need to be shifted. The above solutions require a number of parts per signal line, which can increase the complexity of the schematic and system, as well as raise the cost. This is apparent in the case of bi-directional UART communication, where one seral line must be shifted up and the other line down.\nLevel sifting ICs A number of level-shifting IC\u0026rsquo;s are available, which help address the problems stated above. For a level shifting IC you need to look at the data sheet to make sure it is acceptable for your usage. Make sure it can handle both voltages before you commit to it. A good example is the LSF0102-Q1. This was chosen as one of its primary bidirectional functions is 3v-5v which is extremely common.\nData Sheet\nThis specific IC has 2 level shifting channels. You may want more, so check your project before purchase. It is recommended to find an IC with a typical application section as the usage of the pins of some ICs are not immediately clear. This specific IC needs its EN pulled to GND to enable the input, and since all data pins are inputs, it essentially turns off the chip. You then have your A and B lanes, do not mix them up. A1 and A2 are both inputs and outputs on the same line. This is where you put your data lines. Then to change how the IC shifts the voltage you will need to calculate the voltages that need to be on the vref pins for that specific ic. A good way to get those voltages is using the voltage divider seen in Figure 1.\nComparison A number of these solutions have been compared in Cadence\u0026rsquo;s PSPICE module. As you can see, they all produce comparable results.\nSchematic Results External Resources https://itp.nyu.edu/physcomp/lessons/electronics/level-shifting/ ","permalink":"https://embedded-systems-design.github.io/level-shifters/","tags":["circuit-design","level-shifters"],"title":"Level shifters"},{"categories":null,"contents":"How do I manually route a design in PCB Editor? Your design should have a board outline and components placed, and blue lines (the \u0026ldquo;rats nest\u0026rdquo;) between the components (see example, Figure 1). These blue lines are not traces, but rather points that are connected on your schematic and should be converted to traces in your design.\nFigure 1: Board outline, components, and rats nest Click the \u0026ldquo;Add Connect\u0026rdquo; button in the toolbar (see Figure 2)\nFigure 2: Add Connect button Go to the \u0026ldquo;Options\u0026rdquo; tab on the right side of the screen and change the settings for the trace as necessary (e.g., whether it will be on the top or bottom layer, which via will be used, and the line width) (see Figure 3).\n*Note: *Make sure that your power and ground traces meet the recommended minimums\nFigure 3: Options tab for Add Connect Left click on a starting pin to start the trace, and left click on the ending pin to end the trace (see Figures 4 and 5).\nNote: Avoid 90 degree angles when routing traces. They create electro-magnetic radiation that interferes with other circuits.\nFigure 4: Left click to start a trace Figure 5: Left click to end a trace If you need to add a via (a conductive hole from one layer to another, allowing traces to cross on different layers), you can double-left click while you are placing the trace in order to change layers (see Figure 6).\nNote: Vias reduce the reliability of a trace. It is recommended that you minimize the number of vias used in your design.\nFigure 6: Double-left click to add a via Continue the above process until all of the rats nest lines are routed (see example, Figure 7). Note that the power and ground traces are larger than the signal traces. This is important for having a fully-functioning design.\nFigure 7: Example completed PCB design Note: Manual routing of traces will almost always result in the best possible design. Auto-routing algorithms are notoriously poor and create board designs that are more complex and more difficult to debug.\nAdditional Resources How to Route Multiple Traces Simultaneously video from EMA Design Automation Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/manual-routing-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Manual Routing in Cadence PCB Editor"},{"categories":null,"contents":"How do I measure the spacing between pins to make sure my footprint matches the Datasheet? See the How to check your footprints using the OrCAD PCB Editor Measurement tool video\nHow do I measure the size of my PCB? With your PCB design open, click the Show Measure tool (see Figure 1). Click on any two points (e.g., the corners of the PCB) to measure the distance between those points. Confirm that the measurement is under any manufacturing limits. Figure 1: Measuring PCB size ","permalink":"https://embedded-systems-design.github.io/measurement-in-cadence-pcb-editor/","tags":null,"title":"Measurement in Cadence PCB Editor"},{"categories":null,"contents":"What is CAD software used for? Computer Aided Drafting (CAD) software is used to capture and simulate designs electronically. It is commonly used for electrical or mechanical designs.\nWhat free mechanical CAD software is available for me to install on my computer? SolidWorks (recommended) - 3-D CAD package\nAvailable from Engineering Technical Services eDrawings Viewer available from Solidworks Microsoft Visio - Vector-based drawing program\nAvailable from MyApps under Microsoft Imagine Microsoft Visio 2013 Viewer available from Microsoft Sketchup Make - 3-D modeling program\nAvailable from Sketchup What mechanical CAD software is available for me to use on campus computers? SolidWorks (recommended) - 3-D CAD package Sketchup Pro - 3-D modeling program Adobe Illustrator - Vector-based drawing program ","permalink":"https://embedded-systems-design.github.io/mechanical-cad-software/","tags":["asu","cad","mechanical"],"title":"Mechanical CAD Software"},{"categories":null,"contents":"Merging Multiple Schematics into a Single Schematic Take note of all the files involved in the schematics you are merging, and ensure you have all of them. These include .dsn (design), .opj (project) and .olb (library) files, in addition to .psm (Package symbol, a.k.a. PCB footprint) files.\nCreate a new project in Capture CIS. Rename the default schematic so that you know it will contain your final combined schematic.\nRight click on \u0026ldquo;Referenced Projects\u0026rdquo; in the \u0026ldquo;File\u0026rdquo; menu, and click \u0026ldquo;Add File\u0026rdquo;. Find all of the .opj project files which contain the schematics you\u0026rsquo;re trying to merge and add them as referenced projects. This will allow you to more conveniently open them alongside your combined project and extract the schematics.\nText Description automatically generated Create a new schematic, separate from the default one in the project, to contain copies of each original schematic as separate pages.\nOpen each of your newly referenced projects. One by one, find their schematics in the \u0026ldquo;File\u0026rdquo; navigation menu, right click the page(s) and hit Copy. Then go back to your combined project, right-click your \u0026ldquo;source\u0026rdquo; schematic, and click Paste.\nText Description automatically generated with medium confidence Note that as you do this, the components used in each added schematic become part of the design cache. When combining projects created on different computers, you may find that the library path for some components now points to an invalid location, which can be corrected by right clicking them, selecting \u0026ldquo;Replace Cache\u0026rdquo;, and specifying a correct path for each. Add all .olb library files referenced in the source schematics/projects by right-clicking \u0026ldquo;Library\u0026rdquo; under \u0026ldquo;Design Resources\u0026rdquo; and then selecting to add the respective files. Graphical user interface, text, application Description automatically generated Place all .psm files for referenced footprints in the schematic in one of the correct directories to be recognized by Cadence. These will be under \u0026ldquo;Allegro Footprints\u0026rdquo; in Capture.ini and the \u0026ldquo;psmpath\u0026rdquo; setting in PCB Editor; if you use the provided Cadence folder hierarchy and configure Cadence accordingly, the \u0026ldquo;symbols\u0026rdquo; folder will work.\nTake a look at the individual schematics, and select a page size for the combined schematic which will have sufficient space to accommodate all of them.\nIn the referenced projects, open each individual schematic page. Use Control + A to select all and Control + C to copy, then Control + V to paste the contents into the combined schematic. Some items, such as the schematic information usually found in the bottom right corner, do not need to be copied over and so should be deleted in the new schematic.\nYou now have one schematic containing each original schematic on a single page.\nClean up your schematic, and be sure to fix any netlisting errors. If you are combining schematics in order to merge multiple subsystems into a full system, there is more work to do, such as standardizing power nets and merging components shared between subsystems (e.g. the microcontroller).\n","permalink":"https://embedded-systems-design.github.io/merging-schematics/","tags":["cadence"],"title":"Merging Multiple Schematics into a Single Schematic"},{"categories":null,"contents":"What microcontrollers does Atmel specialize in? Atmel was one of the top IC manufacturers that makes a number of 8-bit, 32-bit, and ARM microcontrollers, including the AVR microcontroller used in the Arduino. Microchip purchased Atmel in 2017 and is maintaining the AVR line of microcontrollers. The following is a list of helpful resources for getting started with Microchip AVR microcontrollers.\nHow do I choose an AVR microcontroller? Use the Microchip Parametric Search Tool to find and select AVR microcontrollers. What software do I need to install to program an AVR microcontroller? Atmel Studio Integrated Development Environment (IDE) from Microchip What hardware do I need to program an AVR microcontroller? Check the manufacturer\u0026rsquo;s web page for the specific microcontroller you are using for specific information on the hardware you need to program it. Some common programmers include:\nAVR Dragon from Microchip Using an Arduino as an AVR In-System Programmer (ISP) from Arduino.cc What do I need to consider when designing a printed circuit board (PCB) that includes an AVR microcontroller? Application Note AN2519: AVR Microcontroller Hardware Design Considerations from Microchip What online forums focus on AVR microcontrollers? AVR Freaks Where do I find code examples and tutorials for AVR microcontrollers? AVR Programming tutorial from hackaday.com ","permalink":"https://embedded-systems-design.github.io/microchip-avr-microcontrollers/","tags":["programming","microcontroller"],"title":"Microchip AVR Microcontrollers"},{"categories":null,"contents":"What microcontrollers does Microchip specialize in? Microchip specializes in 8-bit, 16-bit, and 32-bit PIC microcontrollers.\nHow do I choose a Microchip microcontroller? Microchip Advanced Part Selector from Microchip Information about PIC microcontrollers database What software do I need to install to program a Microchip microcontroller? MPLAB® X Integrated Development Environment (IDE) from Microchip MPLAB® Code Configurator graphical programming environment from Microchip What hardware do I need to program a Microchip microcontroller? Check the manufacturer\u0026rsquo;s web page for the specific microcontroller you are using for specific information on the hardware you need to program it.\nPICkit 3 In-Circuit Debugger from Microchip MPLAB ICD 3 In-Circuit Debugger from Microchip What do I need to consider when designing a printed circuit board (PCB) that includes a Microchip microcontroller? See the microcontroller data sheet for information on PCB layout and external component considerations.\nCompiled Tips \u0026lsquo;N Tricks Guide from Microchip How do I use MPLAB® X? Microchip.com What online forums focus on Microchip microcontrollers? Microchip Developer Help from Microchip MicrocontrollerBoard.com Where do I find code examples and tutorials for Microchip microcontrollers? Code Examples from Microchip PIC Tutorials from Gooligum Electronics (some free) What resources exist for the PIC16F887 microcontroller? PIC Microcontrollers by Milan Verle What resources exist for PIC24 microcontrollers? PIC24 Tutorial from Engscope ","permalink":"https://embedded-systems-design.github.io/microchip-pic-microcontrollers/","tags":["programming","microchip","microcontroller","pic"],"title":"Microchip PIC Microcontrollers"},{"categories":null,"contents":"What is Python? The #1 Programming language*\nPython: 14.2% Matlab: 0.8% Labview: 0.14% * as of March 2022, tiobe.com\nWhat is Python, really? A really easy to learn programming language\nsimple formatting:\nmostly spaces, few extraneous brackets, braces, or parenthesis No terminating character like ; similar basic keywords as other languages. easy access to complex data types https://www.bitdegree.org/tutorials/python-vs-c-plus-plus/\nhttps://realpython.com/python-vs-cpp/\nWhat else is Python? An extensible system of software \u0026ldquo;packages\u0026rdquo;\nuse pip/pypi to install install straight from github! But what makes it unique? An \u0026ldquo;interpreted\u0026rdquo; language\nIn its simplest form, the Python interpreter simply runs human-readable scripts*. Can load and run code compiled in C, C++ FORTRAN, etc. * there are many exceptions\nIs there anything else? \u0026ldquo;Dynamically Typed\u0026rdquo; Variables don\u0026rsquo;t need to be declared as one type or another. You simply set them equal to something and they become that data type. Object-oriented concept of classes and inheritance \u0026ldquo;Public\u0026rdquo; by definition data is not easily hidden. data is accessible by anything So then, why C? Lower level language that is easier to map to hardware-specific registers and functionality Compilation makes running code faster and more memory efficient Python Interpreter Simple program that runs scripts or typed commands. A lot like bash, powershell, or cmd, only cross-platform and independent of the operating system. What is MicroPython? A slimmed down, limited version of Python that fits within the program space of a little microcontroller The system of software packages written for it The same idea of an interpreter\u0026hellip; you just access it over UART/USB. What is Thonny? a Graphical User Interface (GUI) written in Python A text editor The interface to your device and its interpreter A nice way to re-flash your device What is Anaconda/Miniconda? A way to manage all the \u0026ldquo;packages\u0026rdquo; you can install on your PC A solution for dealing with conflicting installation requirements. A way to share packages that contained OS-specific, compiled libraries. Why do I need to use Anaconda? Many packages include libraries that are compiled specific to one operating system\nthis requires a compiler, and understanding the compilation process in case it doesn\u0026rsquo;t work\nor, requires access to compiled packages\n* https://www.lfd.uci.edu/~gohlke/pythonlibs/\nOk, so how do I get started? Install anaconda/miniconda Install Thonny and some other packages Open Thonny Flash the ESP32 with MicroPython over USB Load some micropython libraries Start writing code. ","permalink":"https://embedded-systems-design.github.io/micropython-and-esp32/","tags":null,"title":"MicroPython Intro"},{"categories":null,"contents":"Introduction This tutorial is for installing the anaconda python distribution on windows.\nWindows Installation These installation instructions are for computers that do not have Python or Anaconda installed already. Python and Anaconda do not come installed by default on most computers so if you haven\u0026rsquo;t installed them intentionally, these instructions likely apply to you. If you do have another version of Python installed, then please ask Dr. Aukes for further details.\nAnaconda Instructions Note: These instructions are for the smaller \u0026ldquo;Miniconda\u0026rdquo; distribution, that includes only the conda package manager that you can use to install only the packages that you want. You can also install the full Anaconda distribution, and follow the same basic instructions.\nDownload and install miniconda (win64 quick link) with the following options: Install for \u0026ldquo;All Users (requires admin privileges)\u0026rdquo; to the default directory (e.g., C:\\ProgramData\\Miniconda3 ) Check the \u0026ldquo;Add Miniconda3 to the system PATH environment variable\u0026rdquo; box Check the \u0026ldquo;Register Miniconda3 as the system Python 3.9\u0026rdquo; box Install additional software packages a. In Windows, go to the search bar and type \u0026ldquo;cmd\u0026rdquo;. Once you see the Command Prompt app in the list, right click on it and choose \u0026ldquo;Run as administrator\u0026rdquo; from the contextual menu. b. Paste each of the following lines (one at a time) at the command prompt and press enter: conda update --all ","permalink":"https://embedded-systems-design.github.io/installing-anaconda-python/","tags":["python","programming"],"title":"Miniconda/Anaconda (Python) Installation Tutorial"},{"categories":null,"contents":"Selecting the MOSFET When selecting a MOSFET for either 3.3V or 5V applications there are three parameters to consider.\nContinuous drain Current (Id) Amount of current the MOSFET can handle. Drain Source Voltage (Vds) Voltage rating of the MOSFET (Do not exceed this value) Threshold Voltage (Vgs(th) ) Gate that will switch MOSFET on. (This value should be in the midrange of your microcontroller's power value. 1.7V(3.3V) or 2.4V (5V) min) A load must always be on the drain side of the MOSFET due to the gate and source being hard connected inside of the MOSFET itself.\n","permalink":"https://embedded-systems-design.github.io/mosfet-for-use-with-a-3.3-v-and-5v-microcontroller/","tags":["circuit-design","transistors","mosfet"],"title":"MOSFET for use with a 3.3V and 5V Microcontroller"},{"categories":null,"contents":"There are many types of motors out there each with their own pros and cons. There are two main types of motors, brushed and brushless, each with many subcategories within them. In this we will only be going over the most common types and their control. These include DC brushed, stepper, and 3-phase brushless.\nDC motors\nThis is the simplest and most often the cheapest motor to use for a project. these have excellent torque and speed and are good enough for most projects. This motor is a good jack of all trades option. The down sides of this motor are its mediocre efficiency compared to other motors, its electronically noisy, and has a shorter life span due to its brushes.\nControl\nThere are many ways to control this type of motor depending on your use case. If you just need it turn on or off, you could simply use a single transistor/MOSFET. If you want to control the direction of the motor, you will need to make an H-bridge or use a dedicated chip such as the L293d. to control the speed of the motor you can use PWM on your transistor switch or H-bridge. Remember to use a flyback diode as these motors create nasty voltage spikes on startup and braking. Those flyback diodes ensure those spikes are absorbed back into the system as opposed to the control transistors/MOSFETS. Below is a typical application circuit from the L293d chip link: https://www.ti.com/lit/ds/symlink/l293d.pdf?ts=1618773924301\u0026amp;ref_url=https%253A%252F%252Fwww.ti.com%252Fproduct%252FL293D\nExtra\nA good addition to these motors is a rotary encoder. These use magnetic sensors that are attached to the output of the motor to allow you to know how fast the motor is spinning. This is especially useful with PID control.\nIt is also a good idea to pick a gearbox for your motor to either increase the torque or speed of the output shaft. DC motor gearboxes are extremely cheap and reliable.\nStepper\nThese motors are extremely efficient and have good torque but are mainly used for their excellent positioning. The shaft of these motors have special magnetic \u0026ldquo;teeth\u0026rdquo; on their shaft that allow them to make single \u0026ldquo;steps\u0026rdquo; at a time. This is useful for high precision applications such as 3d printers, CNC machines, and other precision machinery.\nControl\nThese motors are most easily controlled using a dedicated chip and to accurately use that chip refer to its datasheet. The good thing is many dual h-bridge chips have support for stepper motor driving. The basic principle behind its control is that there are two separate coils in the steeper motor. You need to power one coil after the other to get it to move from step to step. If you turn on one coil, but do not advance, this locks the motor in place, in this state it will not move unless a sufficient force is applied to overcome its magnetic field. This is different for each motor and can be solved with a gearbox.\nExtra\nWhile stepper motors are accurate, remember to add a limit switch to determine where the motor is if your application requires that. Another thing to keep in mind is that once a stepper is over torqued your microcontroller will get confused where the motor is and this could potentially lead to the project breaking itself.\n3-phase brushless.\nThese motors are top of the line in efficiency and torque. These motors are often referred to as Brushless DC motors. The main downside of these motors is their low start torque and their high price. Their high price is mainly due to their better-quality construction and their expensive control circuits. For most of your projects, most of these types of motors will take up your entire budget. There is one breed of 3-phase brushless that is cheap and easy to use for projects, PC fans. These fans use a 3-phase motor paired with a low power control circuit.\nControl.\nA PC fan only should be turned on or off unless there is a dedicated PWM pin as seen in the picture above or you use a more analog approach by changing the voltage of the power source. Do NOT try to use an H-bridge or anything else to reverse the polarity as this may damage the internal circuitry of the PC fan. Note: pc fans cannot be used as a generator as their control circuits will most likely block whatever power they generate, or the output voltage will be 3-phase dc.\nThe control circuits used for 3 phase brushless motors are well timed 3-half bridges. The motor needs to be timed correctly for each of its phases. Think of it like the timing of cylinders firing in a car. Here is a great video explaining this in detail.\nhttps://www.youtube.com/watch?v=W9IHEqlGG1s\nIt is recommended to NOT try to design a brushless driver from the ground up as they are extremely complex to build. Either use a motor with built in circuitry like a pc fan or use a dedicated 3-phase motor driver chip.\n","permalink":"https://embedded-systems-design.github.io/motors/","tags":["circuit-design","motors"],"title":"Motors"},{"categories":null,"contents":"Part I Part II ","permalink":"https://embedded-systems-design.github.io/oscilloscopes-101/","tags":null,"title":"Oscilloscopes 101"},{"categories":null,"contents":"Introduction This tutorial goes through how to package Cadence schematic and PCB files for submission to Canvas.\nFirst, configure Microsoft Print to PDF to print to a file In Windows, go to Settings \u0026gt; Devices \u0026gt; Printers \u0026amp; scanners and click on Microsoft Print to PDF. Click Manage and then Printer properties to open the \u0026ldquo;Microsoft Print to PDF Properties\u0026rdquo; window.\nIn the \u0026ldquo;Microsoft Print to PDF Properties\u0026rdquo; window, click the Change Properties button and then click on the Ports tab (see Figure 1). Select the checkbox next to FILE: Print to File and click OK.\nFigure 1: Microsoft Print to PDF Properties, Ports tab Packaging a Cadence schematic project for submission to Canvas Open your schematic project in Capture CIS\nFirst, you will convert your schematic to PDF form.\nChoose File \u0026gt; Print Setup\u0026hellip; and change the printer setup to \u0026ldquo;Microsoft Print to PDF\u0026rdquo; (or your other preferred method of printing to PDF).\nChoose File \u0026gt; Print and click OK, saving your PDF to the desktop. If you are trying to expand the printout to fill a C-sized sheet, make sure to indicate that when you submit the PDF for printing to the plotter.\nNext, you will ZIP the folder with your schematic project files.\nIn Windows, find the project folder in which you created and saved your Cadence schematic design (see Figure 2).\nFigure 2: Example of finding the schematic project folder Verify that the most important files are in your project folder: (see Figure 3)\n.DSN - Cadence schematic design file .OPJ - Cadence schematic project file .OLB - Cadence schematic library file (only exists if you have a custom library) Figure 3: Example of Cadence DSN and OPJ files Note: You may have additional files in this folder, depending on the steps you took during the creation of your schematic. It is OK to leave additional files in the folder.\nIn Windows, right-click on the project folder and choose Send to \u0026gt; Compressed (zipped) folder (see Figure 4).\nFigure 4: Creating a .zip file in Windows Move the .zip file to the desktop with the .pdf you created in steps 1 - 4.\nSubmit both the .pdf and the .zip file to the appropriate assignment on Canvas.\nPackaging a Cadence schematic and PCB project for submission to Canvas In Windows, open your PCB in PCB Editor\nFirst, you will convert your PCB layout to .pdf form.\nChoose File \u0026gt; Plot\u0026hellip; Click \u0026ldquo;Setup\u0026hellip;\u0026rdquo; and change the printer to \u0026ldquo;Microsoft Print to PDF\u0026rdquo;. Save the PDF file to the desktop.\nNext, you will ZIP the folder with your PCB project files.\nIn Windows, find the project folder in which you created and saved your Cadence PCB design (see Figure 6).\nFigure 6: Example of finding the PCB project folder Verify that the most important files are in your project folder: (see Figure 7)\n.DSN - Cadence schematic design file .OPJ - Cadence schematic project file .OLB - Cadence schematic library file (only exists if you have a custom library) .ART - Gerber files used for manufacturing .DRL - Drill files used for manufacturing (only exists if you have through-hole components) .BRD - Cadence PCB editor design file Figure 7: Example of Cadence PCB files Note: If you are missing any of the above files then recheck your Gerber file export process or seek additional assistance from course staff. You may have additional files in this folder, depending on the steps you took during the creation of your schematic and PCB. It is OK to leave additional files in the folder.\nIn Windows, right-click on the project folder and choose Send to \u0026gt; Compressed (zipped) folder (see Figure 8).\nFigure 8: Creating a .zip file in Windows Move the .zip file to the desktop with the .pdf you created in steps 1 - 2.\nSubmit both the .pdf and the .zip file to the appropriate assignment on Canvas.\nThe following video shows an older version of the process described in this tutorial.\nBased on a video and tutorial created by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/packaging-cadence-files-for-submission/","tags":["cadence","pcb"],"title":"Packaging Cadence Files for Submission"},{"categories":null,"contents":"What is the Particle Argon? What does it do? The Particle Argon is a \u0026ldquo;wi-fi for everything\u0026rdquo; development kit that includes a microcontroller, wi-fi hardware, and easy-to-use web-based IDE (Integrated Development Environment). It is typically used to add wi-fi functionality into products without spending a huge amount of development time on the wi-fi hardware and software. A more detailed introduction is available here.\nNote: The Particle Argon was previously known as the Photon and the Spark Core, so you may see documentation referring to Spark Core or Photon instead. The software API is basically the same for all of them.\nWhere can I get an Argon board? Each team can check out one (1) Argon board in PRLTA 109. If you need additional Argon boards, please see Dr. Jordan If you want to buy your own Argons, you can purchase them from Particle Where can I find the hardware specifications for the Argon? Argon Datasheet from Particle Where can I find the firmware/software for the Argon? Notes: Firmware is a term used to describe software that directly interfaces with hardware. An API (Application Programming Interface) is a guide to the software/firmware functions you can use in your code.\nParticle Device OS Firmware API API from Particle Firmware Upgrades from Particle How do I configure the Argon to run on my computer? Getting Started guide from Particle How do I communicate between the Argon and my microcontroller? There are two major ways to communicate between the devices:\nUsing a UART (Universal Asynchronous Receiver Transmitter). UART connections transmit ASCII text, meaning that if you are trying to send numbers you will first need to convert them into strings (see FAQ question below). This strategy allows you to send data either to or from the Argon by either reading from or writing to the UART. An older example of how to do this is available here (note that it is for the older version of the Argon called the Spark Core, so some of the code may not work). Using the I/O pins on the Argon (Note: This is not a form of serial communication). If you only need to turn something on and off, or read a simple bit or analog value, then this is a simpler solution than using the UART. See the Pins and button definitions section of the datasheet and the Input/Output API pages on the Argon for more information. Here is a UART PIC to Argon Tutorial written by Mykol Reklaitis How do I send numeric or formatted data over a UART connection? Use the sprintf() function for your microcontroller. sprintf() prints formatted data to a string that can be sent over a UART connection. See this tutorial from tutorialspoint for more information. Where can I find examples of Argon projects? Particle Community SPO Learning Lab How do I communicate between a Argon and a phone app? Option 1: Tinker Mobile App One option is use the Tinker mobile app from Particle. This off-the-shelf app is a good option if your project only needs to send simple information between Argon and the microcontroller.\nAdvantages of Tinker app\nOff-the-shelf multi-platform option to control individual analog and digital I/O pins through a standard interface Easy to use Useful to test whether a problem is in software or hardware (because since it\u0026rsquo;s provided by the manufacturer, it will hopefully work correctly) You can modify the callback functions to include your own code Disadvantages of Tinker app\nApp can not be modified, so you don\u0026rsquo;t have control over the user interface on the phone. (This may be OK for a proof of concept) Does not support entering text into the app directly (though you can send ASCII text over the UART in the firmware code) Option 2: UbiDots App Framework The UbiDots app framework is designed to capture and display sensor data using an off-the-shelf app provided by the company. This is a good option if your project primarily needs to display and/or log sensor data (e.g., body temperature).\nAdvantages of UbiDots\nYou have some control over the user interface in the app Connect your Particle device to Ubidots tutorial from UbiDots Disadvantages of UbiDots\nUbiDots is primarily for gathering and displaying information (microcontroller \u0026ndash;\u0026gt; Argon \u0026ndash;\u0026gt; UbiDots \u0026ndash;\u0026gt; UbiDots app), and may not be able to send information back to your microcontroller easily. Option 3: Write your own phone app You will need to create functions in the Argon firmware and call those functions via the Particle Cloud REST API. This is a good option if someone in your group has prior coding experience and/or time to figure out how to write an app.\nAdvantages of custom apps\nFull access to send and receive data between the Particle and the microcontroller Full access to modify the user interface (within Android/iOS limitations) Disadvantages of custom apps\nApps are usually platform-specific, meaning that if you write an app for Android it will likely not be compatible with iOS and vice-versa More information on custom app development is provided below.\nOption 4: Run a web server on the Argon You can run a web server (based on Webduino, documentation here) on the Argon and then log into it from a phone or computer. This is a good option if you want to have full control via HTML over what is displayed.\nAdvantages of a web server\nPlatform-independent Allows use of JavaScript and HTML to sculpt your \u0026ldquo;app\u0026rdquo; Disadvantages of a web server\nProgramming is time consuming and somewhat unintuitive Option 5: Use Particle.publish() to post data to a web page on your computer Advantages of Particle.publish()\nPlatform-independent Tutorial available here Disadvantages of Particle.publish()\nRequires the use of HTML and JavaScript How do I create an Android app? Particle Android Cloud SDK (Software Development Kit) from Particle You will need an app development environment. Suggested environments include:\nMIT App Inventor Xamarin (cross-platform, free for academic use) Phonegap (cross-platform) Where can I find examples of custom Android apps that work with Argon? MIT App Inventor example How do I create an iOS app? Particle iOS Cloud SDK (Software Development Kit) from Particle You will need an app development environment. Suggested environments include:\nStart Developing iOS Apps (Swift) from Apple Xamarin (cross-platform, free for academic use) Phonegap (cross-platform) Where can I find examples of custom iOS apps that work with Argon? Coming soon How do I communicate between a Argon and a computer? Coming soon How do I communicate between a Argon and another Argon? Connecting Two Photons Together TCP Server and Client between two Photons The Buddy System: Publish and Subscribe ","permalink":"https://embedded-systems-design.github.io/particle-argon-wifi-board/","tags":["tutorial","uart","design","argon","wireless","particle"],"title":"Particle Argon Wifi Board"},{"categories":null,"contents":"What is a patent? \u0026ldquo;A patent for an invention is the grant of a property right to the inventor, issued by the United States Patent and Trademark Office\u0026rdquo; (for more information, see General Information Concerning Patents from the USPTO). Patents are the most common way of protecting intellectual property that is physically tangible (e.g., projects you might do in our engineering program). What is a trademark? \u0026ldquo;A trademark is a word, name, symbol, or device that is used in trade with goods to indicate the source of the goods and to distinguish them from the goods of others\u0026rdquo; (for more information, see What is a Trademark or Servicemark? from the USPTO). Trademarks are typically used to protect a unique name for a product, but not the product itself. For example, Dr. Jordan\u0026rsquo;s engineering education research lab is called STEAM Labsâ„¢. What is a copyright? \u0026ldquo;Copyright is a form of protection provided to the authors of \u0026lsquo;original works of authorship\u0026rsquo; including literary, dramatic, musical, artistic, and certain other intellectual works, both published and unpublished\u0026rdquo; (for more information, see What is a Copyright? from the USPTO). As a student, you automatically own the copyright for any text that you write (e.g., your project reports). However, copyrights are typically not used to protect engineering designs. Why do I need to search for patents? If you knowingly or unknowingly use intellectual property that is patented by someone else in your own commercial designs, you may become the target of lawsuits from the patent owner. Therefore, when designing new products it is best to search for the patents you may be infringing upon (either through the product as a whole or particular features, such as a touch display) so that you can either design around the patents or reach out to the patent owner to license the patent.\nHow do I search for a patent? How to Conduct a Preliminary U.S. Patent Search: A Step by Step Strategy - web tutorial from the Patent and Trademark Resource Center (PTRC)\nSeven Step Strategy - outline from the PTRC\nWhat patent databases should I use? USPTO Patent Full-Text and Image Database (PatFT) USPTO Patent Application Full-Text and Image Database (AppFT) Google Patent Search Global Patent Search Network (GPSN) Additional sites listed on the USPTO website ","permalink":"https://embedded-systems-design.github.io/patents-101/","tags":["patents"],"title":"Patents 101"},{"categories":null,"contents":"Before exporting your PCB design for fabrication, you **must **verify the design and fix any errors. Time invested verifying your design before manufacturing will make the assembly and testing process significantly easier.\nWhat are best practices for the design of PCBs? Designing PCBs for Debugging - (First Board Spins) video from Casey Petersen Fundamentals of Layout Out PC Boards from Jack Ardizzoni of Analog Devices Printed Circuit Board (PCB) Design Issues from Analog Devices PCB Design of Switch Mode Power Supplies (SMPS or Switchers) video from Casey Petersen A Practical Guide to High-Speed Printed Circuit Board Layout from Jack Ardizzoni of Analog Devices High Speed System Applications: PC Board Layout and Design Tools from Analog Devices General All components have footprints Bypass/decoupling capacitors for voltage regulators are placed as physically close as possible to the regulators Bypass/decoupling capacitors for ICs are placed as physically close as possible to each IC\u0026rsquo;s power and ground pins (see example of good layout, Figure 1) Power and ground traces are at least 40 mil wide and were sized using a trace width calculator Board space is allocated for mechanical constraints (e.g., PCB mounting holes, heat sinks, connectors) The top and bottom copper layers are labeled in text \u0026ldquo;top\u0026rdquo;, \u0026ldquo;bottom\u0026rdquo;, and \u0026ldquo;group name\u0026rdquo; Figure 1: Example of good bypass capacitor placement Vias Minimize the number of vias in your design. Vias reduce the reliability of your system. No vias under components (particularly ICs) Additional Considerations Consider how your components will be mounted when routing traces. For example, if you have a through-hole connector on the top of your board, it\u0026rsquo;s better to route the traces for it on the bottom layer. Make the board outline in copper Make sure that the size of your board will fit inside your product enclosure Do NOT use the autorouter. Use manual routing to simplify the board design. Simple design = easier debugging. When using surface mount components, size 0805 resistors and capacitors (or larger) are easier to work with Through-hole connectors are mechanically stronger than surface-mount connectors Avoid right angles (90 degrees) in traces. Instead, \u0026ldquo;curve\u0026rdquo; the trace with a 45 degree angle around a corner Fill some extra space on your board with several 0.1\u0026quot; spaced test points to allow for easier modifications If your system uses in-system programming (ISP), place the ISP connector as physically close to the microcontroller as possible ","permalink":"https://embedded-systems-design.github.io/pcb-design-checklist/","tags":["checklist","pcb"],"title":"PCB design checklist"},{"categories":null,"contents":"Introduction Text is important on PCB layouts to identify the designers, project, version, components, etc. Typically, text can be placed on a silkscreen layer that sits on top of the copper. However, our manufacturing process in PRLTA 109 only supports text that is milled on the TOP COPPER or BOTTOM COPPER layers.\n**Note: **It is required that all PCB designs have your name, course, and team number so that the Peralta Engineering Studios staff can distinguish your board from others.\nHow do you create millable text in Cadence PCB Editor?\n1. Open your design in PCB Editor\n2. Choose Setup \u0026gt; Design Parameters... and click the Text tab. Click the ... button next to Setup text sizes (see Figure 1). The Text Setup window will open (see Figure 2).\nFigure 1: Design Parameter Editor Text tab Figure 2: Text Setup window 2. In the Text Setup window, change the Photo Width for Text Blk 4 to 10.00 (see Figure 2). The 4th text value is big enough to read but not overly large. Click OK and OK to return to your design.\n3. Click the text button in the toolbar (see Figure 3) and click on the Options tab on the right hand of the screen (see Figure 4).\nFigure 3: Add Text button Figure 4: Options tab configured for the 4th text block 4. Configure the options to make sure the Top or Bottom layer is selected, and that the Text block is set to 4 (or whichever one that you changed in step 2) (see Figure 4).\n5. Click anywhere on the board and type the text that you wish to add (see example, Figure 5).\nFigure 5: Example text on a layout 6. Remember to not separate text boxes too close together as this will give an error later on or create undesired text. An example of this is seen below in Figure (6).\nFigure 6: This text is far too close together.\n","permalink":"https://embedded-systems-design.github.io/text/","tags":null,"title":"PCB Text"},{"categories":null,"contents":"What equipment is available at each of the benches? Function Generator (5 MHz)\nMicroscope - Aven zipScope 2M USB Digital Microscope\nMultimeter - Agilent 34461A Digital Multimeter, 6.5 Digit\nTruevolt Series Digital Multimeters Operating and Service Guide Oscilloscope/Logic Analyzer\nAgilent MSO-X 4024A Oscilloscope (200 MHz, 4 Analog + 16 Digital Channels) - includes serial decoding capabilities\nInfiniiVision 4000 X-Series Oscilloscope User\u0026rsquo;s Guide Agilent MSO7054A Mixed Signal Oscilloscope (500 MHz, 4 Analog + 16 Digital Channels)\nInfiniiVision 5000/6000/7000A Series Oscilloscopes User\u0026rsquo;s Guide Power Supplies (2 per bench) - BK Precision 1671A Triple-Output 30V, 5A Digital Display DC Power Supply\nInstruction Manual for BK Precision 1671A Power Supply Soldering Irons - Weller WX2020 Solder Station (includes 2 WXP120 Soldering Irons)\nWeller WX120 Soldering Iron Operating Instructions Weller WX 2 Solder Station Operating Instructions ","permalink":"https://embedded-systems-design.github.io/peralta-103-resources/","tags":["testing","asu","test equipment"],"title":"Peralta 103 Resources"},{"categories":null,"contents":"While it is easy to place components using the mouse, most designs require precise placement of some components (e.g., to align parallel headers). This tutorial walks through how to place components at a specific X-Y coordinate, determine the X-Y coordinates of a component, measure the distance between two components, move an existing component to a specific X-Y coordinate, and move an existing component relative to its current location.\nHow do you place a component at a specific X-Y coordinate? Choose Place \u0026gt; Manually\u0026hellip; (see Figure 1). The Placement dialog box appears (see Figure 2).\nFigure 1: Place \u0026amp;gt; Manually\u0026amp;hellip; menu Figure 2: Placement dialog box Check the box next to the part that you want to place, but do not place it yet. Instead, go to the command line at the bottom of the screen and type the desired placement coordinates in the following format: x x-coordinate y-coordinate\nExample:\nCommand \u0026gt; x 0 0 will place the component at the origin (0,0)\nPress Enter to place the component at the desired coordinates (see Figure 3).\nFigure 3: Component placed at origin (0,0) How do you determine the current coordinates of a component? Choose Display \u0026gt; Element (see Figure 4) and click on the component you would like to examine. The Show Element dialog box will appear and show the current coordinates of the component (see Figure 5).\nFigure 4: Display \u0026amp;gt; Element menu option Figure 5: Coordinates of a placed component How do you measure the distance between two components? Choose Display \u0026gt; Measure (see Figure 6). The command line will ask you to \u0026ldquo;Make two picks for the distance calculator\u0026rdquo; (see Figure 7).\nFigure 6: Display \u0026amp;gt; Measure menu option Figure 7: Command line message for Measure tool Click parts of two components (e.g., a pin of a resistor and a pin of a capacitor). The Measure dialog box will appear and show the distance between the selected points (see Figure 8).\nFigure 8: Measured distance between resistor and capacitor pins How do you move an existing component to a specific X-Y coordinate? Right-click on the component and select \u0026ldquo;Move\u0026rdquo;\nUse the command line to enter a specific coordinate in the x (x x-coordinate) or y (y y-coordinate) direction.\nExamples:\nA component is at (25,75).\nCommand \u0026gt; x 200 will move the component to (200,75) (see Figure 9)\nCommand \u0026gt; y 200 will move the component to (25, 200) (see Figure 10)\nFigure 9: Moving a component to an absolute x coordinate Figure 10: Moving a component to an absolute Y coordinate How do you move a component relative to its current position? Right-click on the component and select \u0026ldquo;Move\u0026rdquo;\nUse the command line to enter a relative movement in one of the following formats:\nix x-units\niy y-units\nix x-units y-units\nExamples A component is at (1000,2000).\nCommand \u0026gt; ix 200 will move the component to (1200, 2000)\nCommand \u0026gt; iy 200 will move the component to (1000, 2200)\nCommand \u0026gt; ix 200 -500 will move the component to (1200,1500) (see Figure 11)\nFigure 11: Results of relative movement Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/placing-and-moving-components-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Placing and moving components in Cadence PCB Editor"},{"categories":null,"contents":"What are the components of a basic power supply subsystem? Source of power - battery, AC adapter, solar Input electronic noise filtering circuit Voltage regulator to provide a constant supply voltage Output electronic noise filtering circuit What are the design considerations for a battery-operated circuit? How many Amp-Hours of capacity are needed?\nCreate a power budget to determine What type of batteries?\nSee Battery University for more information Are the batteries rechargeable?\nNiCd, NiMH, LIB, LiPoly? Different tradeoffs of cost, memory, lifetime, weight Need a charging circuit. See Maxim Integrated Circuits Discharge Rate\nBatteries can only discharge up to a certain limit to remain safe. Different chemistries have different limitations. What are the design considerations for an AC-powered circuit? The language \u0026ldquo;AC adapter\u0026rdquo; and \u0026ldquo;AC power supply\u0026rdquo; is used inconsistently. Sometimes it refers to regulated power supplies with a fixed voltage output, and sometimes it refers to unregulated power supplies with a promised voltage output that is inaccurate when measured with a DMM. More information on AC power adapters is available here: http://www.dxing.info/equipment/wall_warts_bryant.dx\nLinear Power Supplies Linear power supplies are made up of a transformer, diodes, and sometimes a filter capacitor. They provide clean power, but waste lots of energy in the form of heat. See http://www.allaboutcircuits.com/textbook/semiconductors/chpt-3/rectifier-circuits/ for more information on how a linear power supply works.\nSwitching Power Supplies Switching power supplies are most commonly used in PCs and other digital applications. They have a \u0026ldquo;noisy\u0026rdquo; power output because of the switching frequency, and are not ideal for inductive loads. They also tend to be more expensive, but are much more energy-efficient and generate less heat.\nHow do I choose a voltage regulator? There are three major types of voltage regulators that you will encounter in this program:\nLinear voltage regulator - burns off extra power in the form of heat\nAdvantage: High current capacity Advantage: Low cost Disadvantage: Low precision Disadvantage: High dropout voltage (the voltage difference between the input and output) Low dropout voltage regulator - burns off extra power in the form of heat, but continues to regulate even when the input voltage is near the output voltage\nAdvantage: Excellent for battery-powered applications Advantage: Higher precision Disadvantage: Lower current capacity Disadvantage: Higher cost Switching voltage regulator - generates as much power as is needed by the circuit, up to the maximum allowed by the regulator. Similar to Switching Power Supplies above\nAdvantage: Highly energy efficient Disadvantage: High cost Disadvantage: External components (some difficult to find) may be necessary Disadvantage: Printed circuit board layout can be difficult A highly detailed guide to linear and switching regulators is available here: http://www.ti.com/lit/an/snva558/snva558.pdf\nWhat capacitor values should I use for input and output noise filtering? First, check the data sheet for the voltage regulator and see if it specifies values for the input and output filtering capacitors. If it does not, the rule of thumb is to use 0.33 ÂµF ceramic non-polarized capacitors for input filtering and 0.1 ÂµF ceramic non-polarized capacitors for output filtering.\nWhat capacitor values should I use for bypass filtering near each integrated circuit? Digital integrated circuits (ICs) need \u0026ldquo;bypass capacitors\u0026rdquo; to both filter the power going into the IC and provide a nearby reservoir of energy that the IC can draw from instantaneously. The rule of thumb is to put one 0.1 ÂµF ceramic non-polarized capacitor between each power pin on an integrated circuit and ground. This means a microcontroller might have 2 - 8 or more capacitors, one for each power pin on the IC.\nWhere can I find additional information about power supplies? Wikipedia Where can I find companies that manufacture power supply components? Sources for Electrical and Electromechanical Components ","permalink":"https://embedded-systems-design.github.io/power-supplies-101/","tags":["circuit-design","noise","power-supplies"],"title":"Power Supplies 101"},{"categories":null,"contents":"Note: This tutorial shows how to print a PCB design on paper. Please see the ASU PCB Fabrication Process for instructions on how to manufacture / \u0026ldquo;print\u0026rdquo; a PCB design in copper.\nWhy would you want to print a PCB design on paper? Before sending a PCB to be manufactured, it is imperative to separate the layers and print it at 1:1 (100%) scale on paper to physically verify that your parts will fit through the holes and that pad spacing is correct.\nNote: You can also Print a PCB Layout in Cadence PCB Editor.\nHow do you print a PCB design on paper? Run a Design for Manufacturing Check in DFM Now\nIn the Layer Display window, right-click on a layer and choose All Layers Off.\nPick a layer and click the light bulb icon next to the layer name to enable it.\nHighlight the enabled layer in the workspace. Right-click on the enabled layer and choose Move from the contextual menu. Left-click anywhere in the workspace and then move the layer somewhere off to the side so that it won\u0026rsquo;t overlap with the other layers. Left click again. Right click anywhere in the workspace to exit the \u0026ldquo;Move\u0026rdquo; mode.\nRepeat steps 3 - 5 for the remaining layers in your design (see example, Figure 1)\nFigure Choose File \u0026gt; Print\u0026hellip; and select Plot Scale : User Scale of 1.0. Click Next and PLOT! to print your design.\nBased on a tutorial by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/printing-a-pcb-design-in-dfm-now/","tags":["cadence","pcb"],"title":"Printing a PCB Design in DFM Now"},{"categories":null,"contents":"Note: This tutorial shows how to print a PCB design on paper. Please see the ASU PCB Fabrication Process for instructions on how to manufacture / \u0026ldquo;print\u0026rdquo; a PCB design in copper.\nWhy would you want to print a PCB design on paper? Before sending a PCB to be manufactured, it is imperative to separate the layers and print it at 1:1 (100%) scale on paper to physically verify that your parts will fit through the holes and that pad spacing is correct.\nNote: \u0026ldquo;Plot\u0026rdquo; in Cadence is synonymous with \u0026ldquo;Print\u0026rdquo; in other Windows programs\nNote: You can also Print a PCB Layout in DFM Now.\nHow do you print a PCB design on paper? In PCB Editor, open your design and choose File \u0026gt; Plot Setup\u0026hellip; (see Figure 1). The \u0026ldquo;Plot Setup\u0026rdquo; dialog box will appear (see Figure 2).\nFigure 1: Plot Setup menu option In the \u0026ldquo;Plot Setup\u0026rdquo; dialog box, choose a \u0026ldquo;Scaling factor\u0026rdquo; of 1.00, \u0026ldquo;Auto center\u0026rdquo; checked and \u0026ldquo;Plot method\u0026rdquo; matching your printer\u0026rsquo;s capabilities (color or black and white), and click OK (see Figure 2).\nFigure 2: Plot Setup dialog box On the right side of the screen, select the Options tab. Set the \u0026ldquo;Active Class and Subclass\u0026rdquo; to Etch and the Subclass to Bottom (See Figure 3). This will show the most important details in the printout.\nFigure 3: Options tab Choose File \u0026gt; Plot\u0026hellip; (see Figure 4). The \u0026ldquo;Print\u0026rdquo; dialog box will appear (see Figure 5).\nFigure 4: Plot menu option In the \u0026ldquo;Print\u0026rdquo; dialog box, click \u0026ldquo;Setup\u0026hellip;\u0026rdquo; (see Figure 5) and select the printer, paper size, and orientation in the \u0026ldquo;Print Setup\u0026rdquo; dialog box (see Figure 6).\nFigure 5: Print dialog box Figure 6: Print Setup dialog box Click OK in the \u0026ldquo;Print Setup\u0026rdquo; dialog box, and OK in the Print dialog box to print the design (see Figure 7).\nFigure 7: Print dialog box Based on a tutorial by Seana O\u0026rsquo;Reilly\n","permalink":"https://embedded-systems-design.github.io/printing-a-pcb-layout-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Printing a PCB Layout in Cadence PCB Editor"},{"categories":null,"contents":"Q: How do I print an integer (or other non-string variable) to the PSoC UART?\nA: According to the PSoC UART data sheet, the UART only outputs strings and characters. Therefore, we need to convert the integer to a string first, and then output it using the UART. Solution: the sprintf() function in stdio.h\nThe following C code uses printf() (which does not output to the UART):\nint a; // declare variable a = 5; // initialize variable float b; // declare variable b = 6.7; // initialize variable printf(“Value = %i,%f\\n”, a,b); // print to screen (not UART) The following C code uses sprintf() to create a string and outputs it using the UART):\n#include \u0026lt;stdio.h\u0026gt; // include the library with sprintf() int a = 5; // declare and initialize variable float b = 6.7; // declare and initialize variable char obuffer[100]; // declare output buffer string UART_Start(); // only need this once in the program // print to string using a similar syntax to the printf statement sprintf( obuffer, “Value = %i,%f\\n”, a, b ); UART_UartPutString( obuffer ); // output the string to the UART ","permalink":"https://embedded-systems-design.github.io/print-non-string-variables-to-psoc-uart/","tags":null,"title":"Printing Non-String Variables to the PSoC UART"},{"categories":null,"contents":"There are several Cypress Programmable System on a Chip (PSoC®) hardware development kits available for use in designs. The list below describes strengths of each kit and provides links to documentation.\nPSoC® 4 Bluetooth® Low Energy (BLE) Pioneer Kit (CY8CKIT-042-BLE-A) Strength: Easy-to-use Bluetooth that can be connected to other devices\nDocumentation\nBluetooth® Low Energy (BLE) Pioneer Kit Guide from Cypress. PSoC® 4 BLE Module (includes information on connecting external power up to 5V) PSoC® 4200 Family Datasheet Example Projects: 100 Projects in 100 Days with PSoC® 4 BLE from Cypress\nAvailability: Check out in PRLTA 109 or buy from Newark.\nPSoC® 4 Pioneer Kit (CY8CKIT-042)\nStrength: Compatible with Arduino shields\nDocumentation\nPioneer Kit Guide from Cypress. Includes information on power connections. Pioneer Kit Dimensions PSoC® 4200 Family Datasheet Example Projects: 100 Projects in 100 Days with PSoC® 4 Pioneer Kit from element14\nAvailability: Check out in PRLTA 109 or buy from Newark.\nPSoC® 4 Prototyping Kit (CY8CKIT-049)\nStrength: Small size\nDocumentation\nPrototyping Kit Guide from Cypress. Includes information on power connections. Availability: Check out in PRLTA 109 or buy from Newark.\nPSoC® 5LP Development Kit (CY8CKIT-050)\nStrengths: More processing power and I/O pins than the PSoC® 4, LCD display\nDocumentation\nDevelopment Kit Guide from Cypress. Includes information on power connections. Availability: Check out from Dr. Jordan or buy from Newark.\nHow many PSoC® chips does the PSoC® 4 Pioneer Kit have? As shown in the block diagram in Figure 1 (below), the PSoC® 4 Pioneer Kit has two PSoC® chips on it: a PSoC® 4 (where you download and run your code on) and a PSoC® 5LP (which is used to program the PSoC® 4). Your computer connects to the USB Mini B port, which communicates with the PSoC® 5LP, which programs the PSoC® 4. For more information on the Pioneer Kit architecture, see the Theory of Operation section in the PSoC® 4 Pioneer Kit Guide.\nFigure 1: Pioneer Kit Block Diagram ","permalink":"https://embedded-systems-design.github.io/psoc-hardware-development-kits/","tags":["bluetooth","cypress","hardware","microcontroller","example project","documentation","development kit"],"title":"PSoC 4 Hardware Development Kits"},{"categories":null,"contents":"I can't find my workspace/project in PSoC Creator\nC files, top design files, etc. are saved in project files Project files are saved in workspaces Workspaces are saved in the folder \u0026quot;PSoC Creator\u0026quot; The PSoC Creator folder can be found in the Documents folder of the user account Click *.cywrk to open a workspace Click *.cyprj to open a project ","permalink":"https://embedded-systems-design.github.io/psoc-creator-project-structure/","tags":["psoc","psoc-creator"],"title":"PSoC Creator Project Structure"},{"categories":null,"contents":"Introduction The purpose of this lab is to get you through the first steps of opening and using PSoC Creator with either your CY8CKIT-042 or CY8CKIT-042-BLE kit for the first time\nSteps Open PSoC Creator\nOpen PSoC Creator Select \u0026ldquo;Create a new Project\u0026rdquo; in the Start Page\nCreate New Project Select Project Type\nSelect \u0026ldquo;Target Device\u0026rdquo;, select PSOC 4, and then scroll down to \u0026ldquo;launch device selector\u0026hellip;\u0026rdquo; Select Device In the device selection window, scroll down and look for the device you are using. You will have to look at the chip on your board. For the Pioneer Kit, this is the black chip in the center of the board. For the BLE version, this is the diagonal black chip on the daughter board. The chip is noted in the white silkscreen layer directly below it. For the most recent versions purchased in the class, these correspond to:\nPSoC 4 Pioneer Kit: CY8C4245AXI-483 PSoC 4 BLE Kit: CY8C4248LQI-BL583 Pioneer Chip Location Pioneer BLE Chip Location Device Selector Once you have selected the right part, click \u0026ldquo;next\u0026rdquo;\nSelect Next Select \u0026ldquo;Empty Schematic\u0026rdquo;\nEmpty Schematic In the next window, define a new Workspace (something like \u0026ldquo;EGR304-ICC2\u0026rdquo;). Name your project (something like \u0026ldquo;flash-led\u0026rdquo;). Wait for the workspace to open and populate with your \u0026ldquo;top design\u0026rdquo;.\nName your workspace and project In the \u0026ldquo;Component Catalog\u0026rdquo; window on the right of the screen, open up \u0026ldquo;Ports and Pins\u0026rdquo; and select \u0026ldquo;Digital Output Pin\u0026rdquo;. Drag the item into the \u0026ldquo;schematic view\u0026rdquo; in the middle of your screen\nSelect \u0026amp;ldquo;Digital Output\u0026amp;rdquo; Drag to schematic Zoom in on the pin component and double-click to configure it. A dialog will pop open. Rename the pin to “Pin_Red”. Deselect “HW Connection” checkbox. (This allows this setting to be controlled by software rather than be \u0026ldquo;hard coded\u0026rdquo;). Accept changes by clicking \u0026ldquo;ok\u0026rdquo;.\nConfigure digital output Scroll to the “Workspace Explorer” on the left side of PSoC Creator. This window shows resources available to the project. Click on the \u0026ldquo;pins\u0026rdquo; icon to further configure the input/output (i/o) pins\nConfigure Pins Map the \u0026ldquo;Pin_Red\u0026rdquo; digital output you just configured to a physical pin of the device. In the right hand side of the window, a tab named \u0026ldquo;pins\u0026rdquo; can be seen. Click the port column of the \u0026ldquo;Pin_Red\u0026rdquo; row to set the physical pin you plan to use.\nIn the Pioneer Kit, this pin is P1[6]. In the Pioneer BLE Kit, this is P2[6]. Pioneer Pin BLE Pin Map Pins From the workspace explorer window, click on \u0026ldquo;main.c\u0026rdquo; to open it\nClick on main.c Once it opens, add the code shown below inside the for(;;) brackets to toggle the LED pin once every half second. The below code reads the pin’s current value and writes its inverse back to the pin, followed by a 500ms delay.\nPin_Red_Write(~Pin_Red_Read()); //toggle pin state CyDelay(500); //system delay of 500ms Add Code Press the “Program” button on the PSoC Creator toolbar to build the project and program your kit. In the Debug type window, you may need to select \u0026ldquo;port acquire\u0026rdquo; and then select the PSoC and select ok\nIt should look like this Port Acquire Port Acquire 2 If this is the first time programming your kit, you may get a message asking you during debug target selection to upgrade firmware. If this happens:\nUpgrade Firmware Message a. Close the \u0026ldquo;debug selection\u0026rdquo; popup and, from the start menu, open \u0026ldquo;PSoC Programmer\u0026rdquo; (Start \u0026ndash;\u0026gt; \u0026ldquo;PSoC Programmer\u0026rdquo;). You should get a similar message.\n![PSoC Programmer](virtualbox_windows-10.3_12_08_2022_11_55_18.png) ![Programmer Firmware Message](virtualbox_windows-10.3_12_08_2022_11_54_40.png) a. click ok and switch to the firmware tab. Select \u0026ldquo;update firmware\u0026rdquo; and follow the instructions\n![Upgrade Firmware](virtualbox_windows-10.3_12_08_2022_11_57_43.png) a. once complete, close PSoC Programmer\n![Finished Flashing](virtualbox_windows-10.3_12_08_2022_11_58_11.png) a. Press the “Program” button on the PSoC Creator toolbar to build the project and program your kit. In the Debug type window, you may need to select \u0026ldquo;port acquire\u0026rdquo; and then select the PSoC and select ok\n![It should look like this](virtualbox_windows-10.3_12_08_2022_11_58_27.png) ![Port Acquire](virtualbox_windows-10.3_12_08_2022_11_58_32.png) ![Port Acquire 2](virtualbox_windows-10.3_12_08_2022_11_58_53.png) The progam will then compile. The results of the build and program operation will appear in the “Output” area at the bottom of the PSoC Creator IDE. Once programmed, the red LED on the kit should start blinking at a 1 Hz rate, at 50% duty cycle.\nCompile ","permalink":"https://embedded-systems-design.github.io/psoc-hello-world/","tags":null,"title":"PSoC Hello World Lab"},{"categories":null,"contents":"What are pullup resistors? Pull-up These are resistors used to pull a volage on a specific pin high. A good resistor value for pull up resistors is 10kOhm.\nWhy would you want this?\nThere are many reasons to pull a pin high, the most common is to pull the reset of a microcontroller high to enable its function. The reason you would use a pull up resistor here and not just directly connect it Vin is that a pull up resistor allows the use of a switch to pull the pin to GND. Without this resistor, you would essentially create a short circuit which will most likely burn a trace on your board. An example of a pullup resistor used to pull a microcontroller rest pin high is shown below in Figure 1.\nWhat are Pulldown Resistors? These are resistors that pull the voltage on a pin to GND. A good resistor value for pull down resistors is 10k ohms.\nWhy would you want this? This is very good for switches as it puts the switch in a defined OFF state. microcontroller read either an on or off state, the problem is sometimes that on state can be triggered with a few millivolts. As there is interference everywhere this can be a problem. When the pin is not connected to any source high or low, it is considered floating. With a pull-down resistor, it set the pin into a definitive OFF state. The example below in Figure 2 shows a pulldown resistor being used to pull the switch to GND when the switch is not pressed.\nSpecial Cases: I2C A Special use case of a Pullup resistor is in the data line of the I2C protocol. This protocol needs the data lines to be pulled high, for most use cases, a 10k resistor will work, but for higher clock speeds you will need to calculate the perfect resistor value by looking at the datasheet for your part.\nRefer to TI\u0026rsquo;s I2C Resistor Sizing guide for more details, or the following online calculators:\nhttps://atman-iot.com/blog/i2c-pull-up-calculator/ ","permalink":"https://embedded-systems-design.github.io/pull-down-resistors/","tags":["circuit-design","resistors","pullup","pulldown"],"title":"Pullup/Pulldown resistors"},{"categories":null,"contents":"Why would I need to back annotate a design? If you make changes to your design while in PCB Editor (for example, swapping a footprint), you must back annotate (meaning, push changes) from the PCB design back into your original schematic. By doing this update, future changes to the schematic can be forward annotated (meaning, pushed forward) to your PCB design without having to start over from scratch.\nHow do I back annotate a design from PCB Editor to Design Entry CIS? In PCB Editor, choose Setup \u0026gt; User Preferences\u0026hellip; and click on the Logic folder. The User Preferences Editor window will appear (see Figure 1).\nFigure 1: User Preferences Editor window with Logic folder selected Under the Logic folder, set schematic_editor to capture (see Figure 1, above). Close the User Preferences Editor.\nChoose File \u0026gt; Export \u0026gt; Logic\u0026hellip;. The Export Logic dialog box will appear. (see Figure 2).\nFigure 2: Export Logic dialog box In the Export Logic dialog box, select the Cadence tab and choose the Design entry CIS option under \u0026ldquo;Logic type\u0026rdquo; (see Figure 2, above). If the path under \u0026ldquo;Export to directory\u0026rdquo; does not point back to the directory your design is stored in, click the \u0026ldquo;\u0026hellip;\u0026rdquo; button and change it.\nIn the Export Logic dialog box, click the \u0026ldquo;Export Cadence\u0026rdquo; button (see Figure 3). You are now finished exporting the design from PCB Editor, but still need to import the design changes into Design Entry CIS.\nFigure 3: Export Cadence button in the Export Logic dialog box Open your project in Design Entry CIS.\nIn Design Entry CIS, go to the \u0026ldquo;Project Manager\u0026rdquo; window and select the project icon. Choose Tools \u0026gt; Back Annotate\u0026hellip; (see Figure 4). The Backannotate dialog box will open (see Figure 5). If you want to make any changes to what is imported, click the \u0026ldquo;Setup\u0026hellip;\u0026rdquo; button and edit the allegro.cfg file (not recommended for most users) (see Figure 5).\nFigure 4: Project Manager and Back Annotate\u0026amp;hellip; Figure 5: Backannotate dialog box and setting up the path8. Click \u0026amp;ldquo;OK\u0026amp;rdquo; to complete the back annotation. Based on a tutorial written by Seana O\u0026rsquo;Reilly and updated by Griffin Puggie\n","permalink":"https://embedded-systems-design.github.io/pushing-pcb-changes-back-to-a-schematic-in-cadence/","tags":["cadence","pcb"],"title":"Pushing PCB changes back to a schematic in Cadence"},{"categories":null,"contents":"Python Basics Data Types Really Basic int````, float, bool, complex```\ncan convert from one to another using the data type class itself identify the type using type() Less Basic string, function\nAdvanced list, dict, set, tuple\nEven More Advanced class\nOperators assignment: = math: +, -, *, /, **, %, // equality: ==, !=, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;= binary opertors: \u0026amp;, | , ^, \u0026lt;\u0026lt;, \u0026gt;\u0026gt; Functions * ```def```, ```return```, ```pass``` keywords * arguments and keyword arguments * passing in unknown number of arguments ```python def my_function(arguments,..., keyword_arguments=3): #run your code here return_variable=1 return return_variable ``` Conditionals logic if, elif, else NO switch (yet\u0026hellip;) logic and, not, or ==, !=, \u0026gt;, \u0026gt;=, \u0026lt;, \u0026lt;= iterable data types list, tuple, string range() function can access one item at a time using square brackets can \u0026ldquo;slice\u0026rdquo; iterables Looping for, while break, continue can iterate through \u0026ldquo;iterables\u0026rdquo; can use else Strings easy to format, easy to search, easy to operate on split(), join(), find(), index(), format()\u0026hellip; print() Classes containers for functions and data. concept of \u0026ldquo;inheritance\u0026rdquo; class MyClass(object): def __init__(self,value): self.value = value def my_method(self): return self.value Modules \u0026amp; Packages a \u0026ldquo;module\u0026rdquo;: is just another name for a python file a \u0026ldquo;package\u0026rdquo; is a set of modules made for sharing \u0026amp; distribution import X from X import Y import X.Z import X as A Common Packages Matlab-like powers numpy, scipy, matplotlib\nhttps://numpy.org/doc/stable/user/numpy-for-matlab-users.html\nGUI development pyQt, tkinter\nOther sympy,\nInstalling Packages pip conda \u0026ldquo;manually\u0026rdquo; ","permalink":"https://embedded-systems-design.github.io/python/","tags":["programming","python"],"title":"Python Basics"},{"categories":null,"contents":"Recreating a simple round padstack This tutorial takes you through recreating a basic round thru-hole padstack.\n1. Open the new Padstack editor in Cadence:\nFigure 1 2. Select Thru-pin and circle on the start tab\nFigure 2 3. Enter the drill diameter\nFigure 3 4. Define the symbol that will be used to represent the drill hole:\nFigure 4 5. Define the Top and bottom layer inner, outer, and thermal geometry. Since Peralta uses two-layer boards, geometry other than begin and end layers will be ignored.\nFigure 5 6. Define the soldermask geometry for the top and bottom layers\nFigure 6 7. Look through the summary page to ensure everything was entered correctly:\nFigure 7 8. Save to the custom symbols folder you created and included in your padpath.\n","permalink":"https://embedded-systems-design.github.io/recreating-a-simple-round-padstack/","tags":["ecad","cadence"],"title":"Recreating a simple round padstack"},{"categories":null,"contents":"Introduction When drawing a circuit, you will often move and delete components as part of the process, meaning that the reference designators (e.g., R1, C1, U1) may be out of order or scattered throughout your design. This tutorial walks through how to reset the reference designators so they are sequential.\nWARNING: Do not reset the reference designators after you have moved a design to PCB Editor, or it may break links between the schematic and PCB layout.\nHow do you reset the reference designators in Cadence Design Entry CIS? Open your schematic in Design Entry CIS\nIn Design Entry CIS, select the root folder for your schematic and click the Annotate button in the toolbar (see Figure 1). The Annotate window will appear (see Figure 2).\nFigure 1: Annotate tool Figure 2: Annotate Window In the Annotate window (see Figure 2), choose Action \u0026gt; Reset part references to \u0026ldquo;?\u0026rdquo;. Click OK.\nClick the Annotate button again, and this time choose Action \u0026gt; Incremental reference update. Click OK. Your reference designators are now renumbered!\nBased on a tutorial written by Robert Goby and updated by Ryan Sparks\n","permalink":"https://embedded-systems-design.github.io/resetting-reference-designators-in-cadence-design-entry-cis/","tags":["cadence"],"title":"Resetting Reference Designators in Cadence Design Entry CIS"},{"categories":null,"contents":"See this video\n","permalink":"https://embedded-systems-design.github.io/routing-traces/","tags":null,"title":"Routing Traces"},{"categories":null,"contents":"This process has been replaced with a superior web-based Peralta Studios DFM Checker. Introduction Designs created in an ECAD program may be electrically correct on the screen, but are ultimately constrained by the capabilities of your fabrication equipment. This tutorial walks through how to use the program DFM Now to verify that a design is able to be manufactured by the LPKF ProtoMat S63 in PRLTA 109.\nThis tutorial requires that you have already exported Gerber files of your design from Cadence.\nThe following video shows the process described in this tutorial from start to finish.\nStep 1: Install and Configure DFM Now Download and install DFM Now Download the Peralta Mill Specs.drf configuration file and save it to a known location. This file contains customized settings that will allow you to use DFM Step 2: Run DFM Now on the Gerber Files In Windows, launch DFM Now!\nChoose Import \u0026gt; AutoLoad (Gerber/Drill)\u0026hellip;, select the folder that contains the Gerber and drill files for your project, and click Next (see Figures 1 and 2).\nFigure 1: AutoLoad import menu Figure 2: Select Folder to Load window In the File Description: window (see Figure 3), choose the correct layer type for each layer. Common layer types include:\nTop Art = Top Bottom Art = Bottom Outline = Border (this is typically a graphic and may be the only one that you need to change) Soldermask Top = Mask Top Soldermask Bottom = Mask Bottom Drill = Drill ThruHole Figure 3: File Description window Click Next and Finish.\nReview your design and make sure all of the layers were loaded properly.\nChoose DFM \u0026gt; DFM Rules Management\u0026hellip; (see Figure 4). The DFM Check Settings window will appear (see Figure 5).\nFigure 4: DFM Rules Management menu selection Figure 5: Default DFM Check Settings window In the DFM Rules Settings window under Rules File Management, click Open\u0026hellip; and choose the Peralta Mill Spec.drf file that is saved to your hard drive. Under Rules File Management, click Save As\u0026hellip; and save the rules so they are available next time you open the program. New DFM settings will appear in the Signal tab (see Figure 6). Click Finish.\nFigure 6: Custom Peralta Mill Spec DFM Rules Settings Choose DFM \u0026gt; DFM Check\u0026hellip;. The General Settings window will appear (see Figure 7). Make sure that the DFM Rule Set is set to Peralta Mill Specs.drf and click Next to begin the design for manufacturing process.\nFigure 7: General Settings window Depending on the complexity of your board, the DFM check will take several seconds to several minutes to run. If it uncovers any errors, you will need to find and correct them within PCB Editor, re-export your Gerber files, and re-run the DFM Check on the new Gerber files.\nOnce you have corrected all of the errors, you will receive a green checkmark. Success! (see Figure 8)\nFigure 8: Example errors and success Bring your computer to a TA or professor during office hours and show them the results of your DFM check to receive approval for submitting your PCB design to Peralta for milling.\nBased on a video and tutorial created by Robert Goby\n","permalink":"https://embedded-systems-design.github.io/running-a-design-for-manufacturing-check-in-dfm-now/","tags":["asu","cadence","pcb"],"title":"Running a Design for Manufacturing Check in DFM Now"},{"categories":null,"contents":"What is a Design Rules Check? Design Rules Check (DRC) is a tool that looks for a limited set of errors in PCB designs, and generates error messages to help you identify and fix the problem(s). A design that passes a DRC is not necessarily error-free, but rather has passed the limited set of tests that DRC conducts. You can (and should) run a DRC in both Design Entry CIS and PCB Editor, and they will look for different types of errors.\nHow do you run a Design Rules Check in PCB Editor? In PCB Editor, choose Tools \u0026gt; Update DRC (see Figure 1).\nFigure 1: Update DRC menu option If no DRC errors are detected, then the command window at the bottom of the screen will look similar to Figure 2. If errors appear in the command window, it is recommended that you correct them prior to continuing with your design.\nFigure 2: Error-free command window after a DRC operation How do you check for unconnected pins in PCB Editor? In PCB Editor, choose Tools \u0026gt; Reports\u0026hellip; (see Figure 3). The \u0026ldquo;Reports\u0026rdquo; dialog box will appear (see Figure 4).\nFigure 3: Reports menu option In the \u0026ldquo;Reports\u0026rdquo; dialog box under \u0026ldquo;Available Reports, select\u0026quot;Unconnected Pins Report\u0026quot;and click\u0026quot;Generate Reports\u0026rdquo; (see Figure 4).\nFigure 4: Reports dialog box If no unconnected pin errors are detected, then the Unconnected Pins Report will look similar to Figure 5. If errors appear in the report, it is recommended that you correct them prior to continuing with your design.\nFigure 5: Unconnected Pins Report ","permalink":"https://embedded-systems-design.github.io/running-design-rules-check-in-cadence-pcb-editor/","tags":["cadence","pcb"],"title":"Running Design Rules Check in Cadence PCB Editor"},{"categories":null,"contents":"Before exporting your schematic to create a PCB, you must verify the design and fix errors in the schematic first. It is significantly more difficult to fix errors later (either during the PCB layout stage or after manufacturing) than to spend the time double-checking the schematic first.\nDesign for Function and Performance Check symbol pinouts against the data sheet, paying special attention to the part package (e.g., chips often come in multiple physical packages with different pin numbers) Check connector pinouts and orientation (top or bottom of board, inversion of pins) Check the data sheet for each part to ensure all support circuitry (e.g., external resistors for configuration) is present If an external oscillator or crystal is used, check that all support circuitry is present (e.g., low-ESR X7R capacitors) Check that crossing wires that should be connected have a dot at the intersection, and those that should not be connected do not have a dot For ICs, check that all power and ground pins are connected Run the schematic design rules check and resolve all errors Design for Reliability When using an analog to digital converter, it\u0026rsquo;s a good idea to filter the signal in hardware first with a band pass filter. This helps eliminate spurious noise that can corrupt your readings De-bounce all mechanical switches in hardware Check that all resistors have a wattage listed, and that wattage has at least a 50% margin Check that all capacitors have a working voltage listed, and that working voltage has at least a 25% margin Add a fuse to each power rail to help protect the circuit against accidental damage (e.g., shorting power and ground). Buy extra fuses. Power supply has a 25% current safety margin over the maximum calculated operating current For ICs, make sure: Bypass/decoupling capacitors are present for each chip. (0.1 uF ceramic for every power pin AND 1 uF, 10 uF, or 100 uF tantalum for every 10 to 20 ICs) (see Bypass Capacitor Basics page) Pull up or pull down resistors are used, rather than hardwiring signal pins to power planes Pull up or pull down resistors are used on all unused IC inputs. One exception is microcontrollers, which should have unused I/O pins tied to test points Design for Testing Critical signals are connected to headers and/or test points to facilitate easy testing and debugging Test points are attached to key signals or unused pins that may be useful in the future (e.g., extra microcontroller I/O pins) Zero-ohm resistors are used in series on critical nets (e.g., power nets) to allow easy troubleshooting of circuit subsystems Design for Manufacturability/Service/Accessibility/Assembly Group components into labeled modules matching with the labels on the block diagram There is a way to connect power to each board (e.g., a connector) Connectors are used for off-board connections. Always include at least one ground wire/signal return path in connections between boards Check that in-system programming headers exist and include any required support circuitry (e.g., pull-up resistors). This information can be found in the microcontroller data sheet. Check that all components have a real part number (meaning you could copy and paste the part number into a distributor\u0026rsquo;s search engine and return one part). Resistors, capacitors, and inductors can be labeled with their values (e.g., 0.1uF) instead of the full part number. Add a surface-mount LED and current-limiting resistor to each power rail to provide a visual indication that the power supplies are on ","permalink":"https://embedded-systems-design.github.io/schematic-checklist/","tags":null,"title":"Schematic checklist"},{"categories":null,"contents":"Introduction Many sensors have an analog output that must be digitized using an Analog to Digital converter (ADC) in order to use them in a microcontroller. The PIC\u0026rsquo;s ADC subsystem is the peripheral used to read analog values and convert it into a digital number for use in your program. It can be configured in a variety of ways. In this assignment, you will create an ADC subsystem and program your microcontroller to transmit the result of reading an analog voltage measured at an input pin, using the ADC subsystem in one of its simplest configurations.\nLikewise, PWM signals are often used to control a variety of actuators (e.g., servo motors), and, because they provide a proportional time-based signal, can be used in certain circumstances, as an analog output from a microcontroller. In this assignment, you will also program your microcontroller to generate a PWM signal using the measured ADC value, and demonstrate modifying the output of the PWM signal in two key ways.\nThe goal of this assignment is to introduce you to the MPLAB® X IDE, and to verify that you can create a project, add peripherals (ADC, PWM, EUSART), and use them together. By the end of this assignment you should be able to demonstrate proficiency in:\nConfiguring your microcontroller to send data across a virtual COM port to your PC. Measuring an analog voltage using an analog to digital converter Outputting the measured ADC value over EUSART Converting an ADC value to Voltage and outputting the result over EUSART Changing a pulse-width modulation (PWM) signal a. With a specific duty cycle from your microcontroller output pin. b. By changing the frequency of the cycle itself Resources PIC18F47Q10 Datasheet PIC18F47Q10 Curiosity Nano Microchip Main Page Hardware User Guide Design Documentation Schematic Microchip tutorial \u0026amp; example XC8 Compiler Documentation Microchip developer tutorials site Analog and ADC\u0026rsquo;s Analog input - Scherz \u0026amp; Monk, Chapter 13.5.2 ADC and LCD with MPLAB Code Configurator video PIC18F47Q10 Datasheet, section X.Y.Z on ADC^2^ Pulse Width Modulation (PWM) Pulse-width modulation - Scherz \u0026amp; Monk, Chapter 13.5.3, 14.4, PWM Tutorial from AfroTechMods.com Potentiometers - Scherz \u0026amp; Monk, Chapter 3.5.6 and 3.5.7 Software PuTTY (Windows) C Information GNU C Reference Manual tutorial on type casting article on bit shifting Parts Needed Item Quantity Value(s) PIC18F47Q10 Curiosity Nano 1 Breadboard 1 Resistors 1 TBD by student LED 1 Any color Jumper wires Several Instructions You may use your Nano board or a breadboard with your microcontroller on it.\nUsing the Hardware User Guide and lessons learned last semester with connecting to the PSoC®, study the following critical information and concepts: Critical Information and Concepts Importance a. The name of the virtual COM port that communicates over the Curiosity Nano\u0026rsquo;s USB to your computer. Needed in order to connect PuTTY to the Curiosity Nano b. Which EUSART subsystem connects to it Needed to determine which EUSART port to connect the PIC to in order to communicate with the debugger and computer c. Which specific pins are used for receive and transmit on the PIC Needed to assign the correct pins to the EUSART component d. How much current can a digital I/O pin safely source or sink? (Hint: See the PIC18F47Q10 Datasheet) Needed to match the current needs of external loads (e.g., LEDs) with the IC and determine whether you need interface circuitry (e.g., a transistor) e. Which pin of the Curiosity Nano board outputs the regulated power used by the \u0026ldquo;target\u0026rdquo; (the PIC18F47Q10) Needed to know where you can access power and ground on the Curiosity Nano board f. Which pins of the Curiosity Nano connect to ground? g. How many bits wide is the result of an ADC read?\nh. How many bits wide is the PWM timer register? Needed to read, interpret, and write data to and from the ADC and PWM peripherals. Can be found in the PIC18F47Q10 Datasheet i. How to shift bits of a number or variable (needed to manipulate data in an 8-bit variable)\nj. How to mask bits of a number or variable (needed to read or write specific bits in an 8-bit variable)\nk. How to cast a variable as a different data type (needed to convert variables from one data type to another) Needed to manipulate data in variables. Can be found in a C programming reference, such as the GNU C Reference Manual Open the Curiosity Nano box and the two antistatic bags inside. Solder the headers into the PCB so that the long side can be plugged into a breadboard and the short side goes through the PCB and can be soldered on the top.\nFollow the instructions in the Quick Start section of the Hardware User Guide to download and install the MPLAB® X IDE (including IPE and 8 bit MCU support), XC8 compiler, and MPLAB® Code Configurator (MCC). Note: The free compiler license is sufficient for this course.\nOpen MPLAB® X IDE and plug the Curiosity Nano board into the USB port of your computer\nIn MPLAB X, create a new project for the PIC18F47Q10\na. Ensure the curiosity nano is connected over usb before starting project setup so you can select it as the programming \u0026ldquo;tool\u0026rdquo; during setup.\nOpen MCC, and select the default file location when prompted.\nOpen the project in MPLAB® X and MCC, then add and configure the following peripherals:\nSystem Module: select the HFINTOSC (high frequency internal oscillator) at 4 MHz. Keep the clock divisions at 4. disable the Watchdog timer EUSARTX Add and configure a new EUSART peripheral (the one that connects to USB). Make sure you check the \u0026ldquo;connect to stdio\u0026rdquo; box. ADCC Ensure right result alignment (this means the data is right-justified in the result register) Do not select continuous operation Keep all other defaults PWMX Note the Timer Source (you will need this for the next step) Set the initial duty cycle to 50% Keep all other defaults TMRX, where X is a specific timer that must be matched to the PWM subsystem selected. Use the FOSC/4 setting (you will get an error otherwise). Use the highest prescaling possible (to ensure the timer counts slowly) Set the timer period to the maximum possible (to further slow down the count so that the LED blinks slowly) Keep all other defaults Pay attention to and follow all instructions provided by the MCC\u0026rsquo;s warnings and errors in the Notifications [MCC] window\nOpen up the pin manager grid\nEnsure that RX and TX are mapped to the correct pins (as you found it from the HW User Guide\u0026rsquo;s pinout section in the previous step). Select an analog input pin (ANx) Select a pin that connects to PWMX In the Pin settings(in the resources window), ensure that\nyour RX pin is set to a digital input (leave the analog option unchecked) your TX pin is set to a digital output (leave the analog option unchecked) the second TX pin (for the external LED) is set to a digital output (leave the analog option unchecked) the PWMX pin is set as a digital output (leave \u0026ldquo;analog\u0026rdquo; unchecked) that the ADCX pin is marked as an analog input. Generate the MCC configuration\nOpen EUSARTX.h (where \u0026ldquo;X\u0026rdquo; is the correct EUSART peripheral) in the MCC-generated header files within the project explorer. Read through this document, Identify each function and determine what the purpose of each is. Then find the function that initializes this EUSART subsystem and note it.\nOpen up ADCX.h\nFind the function that permits you read a single ADC value (conversion). Copy the example code into main.c\nHint: Pay attention to the number of bits in adc_result_t in the typedef statement. This will be important later.\nNote: The example code has an error. The following line:\nadcX_channel_t convertedValue; should be as follows instead:\nadc_result_t convertedValue; Find the declared constant for the ADC input pin you have configured (hint: check the Pin Module). Supply this value as the input to the ADC single-read function.\nYou will need to define a new variable to use the output of this function. Refer to the commented out example code to determine the appropriate data type for the variable.\nOpen up PWMX.h\nFind the function that permits you to set the duty cycle. Copy the example code into main.c You will need to define a new variable to use the output of this function. Refer to the commented out example code to determine the appropriate datatype. Open up TMRX.h\nFind the function that permits you to set the period register. Copy the example code into main.c but leave it commented out for now You will need to define a new variable to use the output of this function. Refer to the commented out example code to determine the appropriate datatype. Add a new line of code for using the ADC value you read and converted previously to change the PWM duty cycle. Now tie these new functions together into your main.c:\nAdd a new line of code to read a single value from the ADC and store it in a variable of the correct type. Refer to the adc subsystem header file generated by MCC to find the correct data type.\nNext, add a new line of code to output the data stored in that variable to EUSART using printf(). Make sure to add carriage return and newline characters to clean up your transmission so that each new ADC value is output on a new line in Putty.\nHint: Remember that X bit variables will have values between 0 and 2^X^-1. If you are printing numbers outside of that range then something is incorrect with your conversion. See Microchip\u0026rsquo;s documentation on printf() for more information.\nNext, add a new variable with type float and use it to translate the integer ADC value to a decimal value that represents the voltage read on the ADC pin. Output that floating point value using the printf() function and the format specifier section of the printf()documentation linked in the previous step and as seen in the MPLABX tutorial. Your data should print on two lines, e.g.:\nADC value: 255 ADC voltage: 3.300 NOTE: This may require a brush up on data types and converting or type casting from int to float in C.\nAdd a new line of code for using the ADC value you read and converted previously to change the PWM duty cycle. This is the raw ADC value before you converted it again to voltage.\nContext: Changing the duty cycle changes the percentage of the time a square wave is low or high. Variable duty cycles are often used for driving RC Servos or -- in conjunction with a low pass filter -- for approximating a simple and low-fidelity digital to analog converter(DAC).\nEnsure you are converting the X-bit ADC value to a properly-formatted Y-bit duty cycle value. (Though the functions that operate on these two registers accept 16-bit variables, they only use the least significant / bottom X and Y bits of each 16-bit variable). The information about the size of X and Y was found by you in the first steps of this assignment.\nMore Context: The X-bit resolution(see PIC18F47Q10 Datasheet) ADC result is stored in a 16-bit variable of type adc_result_t, which is wider (more bits) than the resolution of the ADC result. Furthermore, the PWM duty cycle register holds fewer bits than the resolution of the ADC. Thus, we want to transfer the most significant bits of the ADC\u0026rsquo;s reading into the PWM\u0026rsquo;s duty cycle register. The least significant bits of the ADC represent such a small difference in the final result that they can be truncated (cut off).\nWrite a line of code that uses a C bit shifting operator to shift the ADC result so that the most significant 8 bits of the ADC\u0026rsquo;s output are used as an input to the PWM subsystem\u0026rsquo;s duty cycle update function (look in the PWM header file). Be sure to \u0026ldquo;cast\u0026rdquo; this variable into the correct type declared by that function.\\\nAfter shifting, the lower 8 bits of your adc_result_t variable should look like this (where x is the number of resolution bits for the ADC):\n\u0026hellip; ADC~x-1~ ADC~x-2~ ADC~x-3~ ADC~x-4~ ADC~x-5~ ADC~x-6~ ADC~x-7~ ADC~x-8~ Download the project to the target. This can be done one of two ways Using the download button (ensure you are connected to the Curiosity Nano board rather than the simulator, and that you have selected the Curiosity Nano as the programming \u0026ldquo;tool\u0026rdquo;.) Copying the .hex file from project-name/dist/production/project-name.hex to the \u0026ldquo;Curiosity\u0026rdquo; drive in file explorer. Add a potentiometer to your system Connect the wiper pin of a potentiometer to the analog input pin Connect the other two pins of the potentiometer to the Curiosity Nano\u0026rsquo;s regulated 3.3V power and ground (see the power supply section of the Hardware User Guide for more information, and verify with your DMM prior to connecting the potentiometer). Add an external LED \u0026amp; resistor to the PWM output pin so that the LED safely turns on whenever the PWM output is high. (safely means that neither the LED nor the microcontroller pin burns out. Select an appropriate current-limiting resistor based on the LED specifications and the PIC18F47Q10 maximum pin current in the Datasheet) Demonstrate that the voltage read by the ADC can be used to alter the duty cycle of the PWM signal. And that\u0026rsquo;s it!\n","permalink":"https://embedded-systems-design.github.io/analog-io-eusart/","tags":["UART","PIC","PIC18F47Q10","ADC"],"title":"Setting up Analog I/O and Unidirectional EUSART on the PIC18F47Q10"},{"categories":null,"contents":"What is a finite state machine? A finite state machine (FSM) is a way of modeling a system such that there are a limited number of finite \u0026ldquo;states\u0026rdquo; that a system can be in, and that it can only be in one of those states at a time. Events (e.g., pushing a button) cause the system to change from one state to the next. Unexpected events do not cause the system to change states, which is useful for ignoring spurious inputs. Rather than coding for every possible input, you can instead code only for inputs that matter at the given time. The following resources provide a solid conceptual framing and implementation examples:\nUnderstanding State Machines, Part 1: What are they? from Mathworks Understanding State Machines, Part 2: Why Use Them? from Mathworks Understanding State Machines, Part 3: Mealy and Moore Machines from Mathworks Understanding State Machines, Part 4: Harel State Machines from Mathworks Implementing FSMs in Embedded Systems What is Unified Modeling Languageâ„¢ (UML®)? UML is an industry-standard specification for representing software designs. It is equivalent to schematics for hardware designs. More information on UML can be found at uml.org. Official documentation on UML is available at:\n25 UML Diagrams Official UML Examples UML Diagram Types Guide: Learn About All Types of UML Diagrams with Examples from creately All You Need to Know About UML Diagrams: Types and 5+ Examples from Tallyfy State Machine Diagram vs. Activity Diagram from Visual Paradigm What is the difference between an activity and a state chart diagram? from Quora Difference between StateChart and Activity Diagram from stackoverflow Common UML diagrams that you may use include:\nActivity Diagram. An Activity Diagram (similar to a flowchart) captures the overall behavior of a program from start to finish.\nOfficial Documentation on Activity Diagrams Activity Diagram in UML: Symbol, Components, \u0026amp; Example UML - Activity Diagrams from tutorialspoint What is an Activity Diagram from Visual Paradigm UML 2 Activity Diagrams: An Agile Introduction tutorial Example: Activity diagram for online shopping Statechart Diagram. A Statechart Diagram is a UML representation for a finite state machine. A finite state machine (also called a state machine) is a type of software design where your program is only in a single state at a time. The program changes state when a particular event happens, and remains in the same state if no event (or an unknown event) happens. This makes your program less likely to have unpredictable behavior, and is commonly used for copy machines, stoplight controllers, etc.\nOfficial Documentation on State Machine Diagrams Statechart UML Tutorial with Example UML - Statechart Diagrams from tutorialspoint What is a State Machine Diagram? from Visual Paradigm UML Tutorial: Finite State Machines UML 2 State Machine Diagrams: An Agile Introduction tutorial State Machine Constructs tutorial from EE Times Finite State Machines for the Texas Instruments MSP430 microcontroller application note Sequence Diagram\nOfficial Documentation on Sequence Diagrams Interaction, Collaboration, and Sequence Diagrams with Examples What is a Sequence Diagram? from Visual Paradigm Difference between Sequence Diagram and Activity Diagram from GeeksforGeeks What software do I use to create a UML diagram? ArgoUML is an excellent free open-source software engineering tool that supports the creation of a wide variety of UML diagrams. It runs on Windows, Mac OS X, and Linux. StarUML is another excellent freely-available program that supports the creation of a wide variety of UML diagrams. it runs on Windows, Mac OS X, and Linux. Draw.Io - Recommended. Add-on to google drive documents, free - http://draw.io LucidChart - cloud-based collaborative diagramming app ASU has a site license if you use your ASU google account. Or get an Education Account. Add as a addin via google drive. What is pseudocode? Pseudocode is a near-English representation of a program that allows you to represent the functionality of a program without worrying about the syntax. It is useful when planning how software will work. Pseudocode can be created in any text editor or word processing program. An example of pseudocode for the game Monopoly is available here.\nMany links above suggested by Cecilia La Place\n","permalink":"https://embedded-systems-design.github.io/software-design/","tags":["tutorial","programming","design","software","software design"],"title":"Software design"},{"categories":null,"contents":"Video Walkthrough How do I turn on the soldering irons in PRLTA 103? How do I solder through-hole components by hand? Soldering through-hole components video from EEVblog How to solder - through hole soldering tutorial from sparkfun How do I solder surface mount components by hand? Capacitors, diodes, inductors, resistors How to solder SMT 0805 components video from ItsInOurKernel Surface Mount Soldering 101 video from CuriousInventor DPAK-style components (MOSFETs, voltage regulators) Soldering DPACK components video from EEVblog Integrated circuits (ICs) Soldering large ICs video from EEVblog Surface Mount Soldering 101 video from CuriousInventor Soldering QFN and QFP package video from Nick Leijenhorst How do I solder surface mount components using a reflow oven? This method involves applying solder paste to the pads on the PCB, manually placing your surface mount components into the solder paste, and baking the board in a special oven to solder the entire PCB at once. This method is not really easier than hand soldering for one-off PCBs; you are trading one set of challenges for a different set. If you are interested in using solder paste and the reflow oven to solder your components, please contact Osama Jameel in PRLTA 109.\nHow do I desolder components? How to desolder components using solder wick video from w2aew How to desolder components using a solder sucker video Desoldering a SMD IC with basic tools video Desoldering a SMD IC with a hot air station video How can I practice soldering without damaging my project? A great way to practice is to find an old PCB at Goodwill (inside a printer, scanner, camera, floppy drive, etc.) and practice desoldering and soldering components on the board. You can also find old circuit boards in the cabinets in the front of PRLTA 103.\n","permalink":"https://embedded-systems-design.github.io/soldering-and-desoldering-tips-and-tricks/","tags":["tutorial","soldering","assembly","video"],"title":"Soldering and Desoldering Tips and Tricks"},{"categories":null,"contents":"Professional Distributors These distributors are often used by professionals in industry, and provide the most complete selection of different parts.\nArrow Electronics Digi-Key Electronics Jameco Electronics Mouser Electronics Newark Hobbyist and Surplus Distributors These suppliers generally offer lower prices for components, but may not have data sheets for everything they sell. Do not buy parts without a data sheet.\nAdafruit\nAll Electronics\nAlltronics\nAmerican Science and Surplus\nAndyMark\nBG MicroElectronics\nElectronic Goldmine\nExcess Solutions\nHobby King\nMarlin P. Jones \u0026amp; Associates\nParts Express\nPololu Robotics \u0026amp; Electronics\nRadio Shack\nRobotShop\nSparkfun\nSunFounder\nTower Hobbies\nCircuit Specialists - 819 W. Fairmont Dr., Ste. 2, Tempe, AZ 85282. (480) 464-2485. Hours.\nMHZ Electronics - 2801 E Washington St, Phoenix, AZ 85034. (602) 681-3850\nTri-Tek Electronics - 40 W. Baseline Rd., Ste. 101, Mesa, AZ 85210. (480) 268-9259. Hours.\nComponent Manufacturers Here\u0026rsquo;s a list of popular manufacturers and the types of components that they manufacture. Most of these companies offer free samples of parts to students working on design projects. Even if you\u0026rsquo;re not sure you will use one of their parts, it\u0026rsquo;s better to order samples anyway so that you have options if other plans do not work. Instructables also has a larger list of companies that offer free samples.\nAnalog Devices - analog switch ICs, data converters, amplifiers and linear, RF ICs, power management, MEMS and sensors, processors and DSP. Samples. Cypress - automotive, clocks and buffers, interfacing, lighting and power control, memory, programmable system-on-a-chip, touch sensing, USB, wireless. Samples. Maxim Integrated - amplifiers and comparators, analog switches and multiplexers, audio, automotive, clock, data converters, digital potentiometers, energy measurement and metering, filters, interfacing, LED and LCD lighting and displays, memory, micro controllers, optoelectronics, power and battery management, power line networking, protection and isolation, real-time clocks, security, sensors, storage, voltage supervisors, thermal management, video, voltage references, wireless. Samples. Microchip - microcontrollers, analog, interfacing, wireless, memory. Samples. NXP Semiconductors - microcontrollers, discrete and logic, near-field communication, interface and connectivity, media and audio processing, power management, radio frequency (RF), sensors, automotive. Samples. On Semiconductor - discrete, power management, logic, signal management Texas Instruments - amplifiers and linear, audio, automotive, clocks and timers, data converters, interfacing, logic, power management, digital signal processing (DSP), micro controllers, analog switches and multiplexers, temperature sensors, wireless. Samples. Connectors Molex - Samples. AMP Encoders https://ams.com/angle-position-on-axis Hobbyist Development Platforms Arduino BeagleBoard Raspberry Pi Motors \u0026amp; Motor Drivers Allied Motion Cypress PSoC® 4 Motor Control Evaluation Kit Elmo Motion Control FaulHaber HobbyKing Electric Motors Marlin P. Jones \u0026amp; Associates Motors MicroMo Schneider Electric Intelligent Motion Systems USAutomation Brushless Motors DirectIndustry Brushless Gear Motors Koford Engineering RobotShop Brushless DC Motors Servo Motors Futaba Hitec ServoCity Sensors Force-Sensitive Resistors Trossen Robotics Inclinometers Rieker Inc. Load Cells Futek ","permalink":"https://embedded-systems-design.github.io/sources-for-electrical-and-electromechanical-components/","tags":["components","materials","sources","local","actuators","distributors","ordering","parts","sensors","manufacturers","purchasing","suppliers"],"title":"Sources for Electrical and Electromechanical Components"},{"categories":null,"contents":"Adhesives \u0026amp; Tape Adhesives for Paper from ConservationWiki Electronic Grade Self-Leveling Silicone from American Sealants, Inc. Flex Copper Clad PI Sheets from HB Professional Material TrueTape, LLC Casting Materials Reynolds Advanced Materials - 1727 E. Weber Dr., Tempe, AZ. (480) 967-7727 Quantum Silicones Smooth-On Composites ACP Composites Fabric Seattle Fabrics Mesa Sales \u0026amp; Supply - 2233 E. Main St., Mesa, AZ. (480) 833-7025 Tempe Sales Company - 412 W. Broadway Rd., Tempe, AZ. (480) 967-4811 SAS Fabrics - 1700 E. Apache Blvd., Tempe, AZ. (480) 966-7557 SAS Fabrics - 1111 E. Indian School Rd., Phoenix, AZ. (602) 279-2171 SAS Fabrics Superstore - 9840 N. 19th Ave., Phoenix, AZ. (602) 943-7777 General Parts, Supplies, and Materials ACE Hardware - 2758 S. Crimson Rd., Mesa, AZ 85209. (480) 419-0199 Grainger - 775 E. Baseline Rd., Gilbert, AZ 85233. (480) 308-7980 Hobby Lobby - 4095 S. Gilbert Rd., Ste. 106, Gilbert, AZ 85297. (480) 855-5109 The Home Depot - 7401 S. Power Rd., Queen Creek, AZ 85142. (480) 988-6810 Lowe\u0026rsquo;s - 4730 S. Higley Rd., Gilbert, AZ 85297. (480) 840-6280 Michael\u0026rsquo;s - 5020 S. Power Rd., Gilbert, AZ 85212. (480) 840-3211 Leather Tandy Leather - 2245 W. University Dr. #6, Tempe, AZ. (480) 966-4151 Metal AZ Metals - 526 E. Juanita Ave. #1, Mesa, AZ. (480) 353-2950 Industrial Metal Supply - 5150 S. 48th St., Phoenix, AZ. (602) 454-1500 (*Ask for the ASU student discount) Plastic Port Plastics - 3191 N. Washington St., Ste. #7, Chandler, AZ. (480) 813-0849 Professional Plastics - 4449 S. 38th Pl., Phoenix, AZ. (800) 445-3303 Curbell Plastics 405 North 75th Avenue, Bldg 1 Ste 100 Phoenix, AZ 85043 888-517-7176 Telescoping Tubing Telescoping Tube and Pipe from Alcobra Metals Wood Timber Woodworking - 935 E. Southern Ave., Mesa, AZ. (480) 926-2131 Woodworker\u0026rsquo;s Source - 645 W. Elliot Rd., Tempe, AZ. (480) 355-5090 ","permalink":"https://embedded-systems-design.github.io/sources-for-materials/","tags":["materials","distributors","sources","ordering","parts","local","manufacturers","purchasing","suppliers"],"title":"Sources for Materials"},{"categories":null,"contents":"General Berg Grainger (* ASU Preferred Supplier) McMaster-Carr Miki Pulley MSC Industrial (* ASU Preferred Supplier) Motor System Parts from Radical RC Stock Drive Products Bearings igus - plastic bushings, bearings, linear guides, and cable carriers. Samples. Kaydon Slewing Bearings NSK Motion and Control VXB Ball Bearings Couplings ZeroMax Flexible Shaft Couplings Gears Didel Pinion Gears from Radical RC RushGears.com Springs Smalley Small Coil Spring from TheSprinStore.com ","permalink":"https://embedded-systems-design.github.io/sources-for-mechanical-components/","tags":["components","distributors","sources","ordering","parts","manufacturers","mechanical","purchasing","suppliers"],"title":"Sources for Mechanical Components"},{"categories":null,"contents":"Serial Communication - SPI \u0026amp; Shift Register Tutorial\nObjectives Getting familiar with the SPI serial communication protocol using MCC under the MPLAB X programming environment to program the PIC16F18446 Curiosity Nano development board and control a shift register to drive 8 LEDs on and off. In this tutorial, you will learn to set up the Serial Peripheral Interface (SPI), Shift Registers, and 3 of the major numeral system (decimal, binary, and hexadecimal).\nResources PIC16F18446 Curiosity Nano Hardware User Guide\nSN74HC595 8-Bit Shift Registers Datasheet\nCuriosity Nano \u0026amp; MPLAB Tutorial\nYouTube Tutorial 1\nYouTube Tutorial 2\nCreate Your First Project Open the MPLAB X IDE, you can plug the USB mini cable into the Curiosity USB debugging port. Once you plug the USB to your PC, a green LED will light up. This indicates the Curiosity board has been powered up.\nTo create a new project, go to \u0026ldquo;File\u0026rdquo; - \u0026ldquo;New Project\u0026rdquo; - select \u0026ldquo;Standalone Project\u0026rdquo; - and click \u0026ldquo;Next \u0026gt;\u0026rdquo;\nSelect Device as \u0026ldquo;PIC16F18446\u0026rdquo; and click \u0026ldquo;Next \u0026gt;\u0026rdquo;\nIf you have your Curiosity Nano connected to your PC, the serial number of the device will show up.\nSelect the serial number of your Curiosity board and click \u0026ldquo;Next \u0026gt;.\u0026rdquo;\nNow you will have to select a compiler for the MPLAB X. If you haven\u0026rsquo;t installed Microchip XC8 Compiler, you can install it by clicking the \u0026ldquo;Download Latest.\u0026rdquo;\nOnce the XC8 compiler has been installed, select the \u0026ldquo;XC8\u0026rdquo; as the compiler for this project.\nThe last step is to give a name to your first project as well as the location where you want to put your project.\nOnce you create a new project, you can open the MCC Code Configurator by clicking \u0026ldquo;Tools\u0026rdquo; - \u0026ldquo;Embedded\u0026rdquo;.\nFor more details about these steps, please refer to the following tutorial: Curiosity Nano \u0026amp; MPLAB Tutorial 2. Serial Communication 2.1 Control 8 LEDs using shift registers with SPI function In this section, you will wire 8 external LEDs to the shift register and connect it to the curiosity nano board.\nRequired Hardware: Curiosity Nano, Breadboard, SN74HC595 Shift Registers, 220 Ohm resistors x8, Green LED x8\n2.1.1 Hardware Setup From SN74HC595 8-Bit Shift Registers Datasheet, we know that the shift register has 8 outputs from QA to QH.\nPlace the Curiosity Nano Board and the shift register onto the breadboard**,** which will take 25 rows of space. (Shown in Figure 1)\nUse 220 ohms resistors to connect 8 output pins from QA to QH on the shift register to 8 separate rows.\nConnect the Anode of the LEDs to each resistor. Connect the Cathode to Ground.\nConnect the SER, RCLK, SRCLK pin to 3 GPIO pins on Curiosity Nano Board. Connect OE to ground, and connect SRCLR to power.\nFor the pin assignment, please refer to the following table and Figure 1. Shift Register pins Connection Function QA - QH LED 1 - LED 8 Digital output SER Nano - SDO1 Serial data output RCLK Nano - digital out Read \u0026amp; Latch data SRCLK Nano - SCK SPI Clock signal OE / SRCLR GND / POWER Enable / Clear all The Hardware Setup for Lab 2.1 should look like this Figure 1: Hardware setup for SPI serial communication 2.1.2 Software Configuration\nAs an example and an overview of the SPI function using the oscilloscope, each bit from a byte (8 bit) of the serial data is being sent with the clock signal toggling. (Shown in Figure 2) The goal of this SPI serial communication is to transmit a Byte of data and latch those bits into 8 parallel digital output using the 74HC595 shift register.\nFigure 2: SPI signal displayed on Keysight Oscilloscope Double click on an MSSP choice to add an MSSP block to the MCC under Device Resource\nUnder the Pin Manager, you should deselect the SDI input by clicking on the gray lock symbol in the 3rd pin of Port A.\nUnder the Pin Module, uncheck the analog option for all pins, and give a custom name to a GPIO pin for RCLK.\nThe Code Configurator setup for Lab 2.1 should look like this:\nFigure 3 Setting up the SCK, RCLK, and SDO pin\nClick on the MSSP1 under project resource, go to the Register tab, change the SSPEN of SSPCON1 to enabled, leave everything else as default settings.\nFigure 4 2.1.3 MCC (Microchip Code Configurator) Generated Files and Main.c\nClick the Generate button under the project resource, and now your projects should have all the MCC generated files.\nGo back to Projects, you will see two subfolders called MCC Generated Files under both Header Files and Source Files. These folders contain the generated code, functions, and macros by MCC (Microchip Code Configurator).\nClick the spi1.c file, and Change SSPEN to 1 under the SPI1_Initialize to enable the serial communication.\nFigure 5 After configuring the software, you can go ahead and write your own functions. We can double click the \u0026ldquo;spi1.h\u0026rdquo; and see all the macros that MCC generated for us.\nSince we are sending 8-bit information to the shift register, go back to the \u0026ldquo;main.c\u0026rdquo; and use the macros inside the main function. You can also add a delay function in order to see the on and off transition of the LED.\nRCLK_SetLow(); // Select/Latch the shift register (Active low) SPI1_WriteByte(255); //Send a Byte to Slave __delay_ms(0.05); //delay for data transition to finish RCLK_SetHigh(); // Deselect/Unlatch the shift register __delay_ms(500); //delay Now your main function should look something like this:\nMain.c for Lab 2.1 Click the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .) 2.1.4 Practise exercise using different numeral systems.\nIn the exercise above, we used the decimal system to represent an 8-bit data, which is more common for humans. Computers, however, only have on and off, called a binary digit (or, bit, for short). A binary number is just a string of zeros and ones: 11011011, which often written after \u0026ldquo;0b\u0026rdquo;. 1 For example, 0b10100101 means 10100101 binary.\nAs computers got bigger, it was more convenient to group bits by four, which can have 16 values (0000 to 1111, or 0 to 15). Hex = 6 and Decimal = 10, so it is called hexadecimal. In computer jargon, four bits make a nibble (sometimes spelled nybble). A nibble is one hexadecimal digit, written using a symbol 0-9 or A-F. Two nibbles make a byte (8 bits). Most computer operations use the byte, or a multiple of the byte (16 bits, 24, 32, 64, etc.). Hexadecimal makes it easier to write these large binary numbers. 1\nTo avoid confusion with decimal, binary or other numbering systems, hexadecimal numbers are sometimes written after \u0026ldquo;0x\u0026rdquo;. For example, 0x63 means 63 hexadecimal. 1\nTable 1: Numeral systems conversion 1\nHexadecimal 0 1 2 3 4 5 6 7 Binary 0 1 10 11 100 101 110 111 Decimal 0 1 2 3 4 5 6 7 Hexadecimal 8 9 A B C D E F Binary 1000 1001 1010 1011 1100 1101 1110 1111 Decimal 8 9 10 11 12 13 14 15 Reference: 1 \u0026ldquo;Hexadecimal,\u0026rdquo; Wikipedia, The Free Encyclopedia, Available: https://simple.wikipedia.org/w/index.php?title=Hexadecimal\u0026amp;oldid=6838913, Accessed March 7, 2020.\nNow, can you write your functions using the hexadecimal system and binary system to control the LEDs with various patterns with SPI serial communication functions?\nGo back to the Main.c file and modify the code to add up and display the hexadecimal number from 0x00 to 0xFF on the 8 LEDs.\nTry following code in your Main.c program:\nfor (data = 0; data\u0026lt;0xFF; data++) // display 8 LEDs to show value adding up { RCLK_SetLow(); // Select/Latch the shift register (Active low) SPI1_WriteByte(data); //Send a Byte to Slave __delay_ms(0.05); //delay for data transition to finish RCLK_SetHigh(); // Deselect/Unlatch the shift register __delay_ms(500); //delay } Click the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .)\nNow your main function should look something like this:\nFigure What about using the binary system to control the pattern of 8 LEDs?\nGo back to the Main.c file and modify the code to display the 8 LEDs with some pattern by writing each bit on/off using SPI in the binary system.\nTry following code in your Main.c program:\nfor (int i = 0; i\u0026lt;9; i++) // switch to different case to generate a pattern { switch(i) { case 8: data = 0b00000000; break; // ALL LED OFF case 7: data = 0b00000001; break; // 1 LED ON case 6: data = 0b00000011; break; // 2 LED ON case 5: data = 0b00000111; break; // 3 LED ON case 4: data = 0b00001111; break; // 4 LED ON case 3: data = 0b00011111; break; // 5 LED ON case 2: data = 0b00111111; break; // 6 LED ON case 1: data = 0b01111111; break; // 7 LED ON case 0: data = 0b11111111; break; // ALL LED ON } RCLK_SetLow(); // Select/Latch the shift register (Active low) SPI1_WriteByte(data); //Send a Byte to Slave __delay_ms(0.05); //delay for data transition to finish RCLK_SetHigh(); // Deselect/Unlatch the shift register __delay_ms(500); //delay } for (int i = 0; i\u0026lt;9; i++) // increase duty cycle to 100% { switch(i) { case 0: data = 0b00000000; break; case 1: data = 0b00000001; break; case 2: data = 0b00000011; break; case 3: data = 0b00000111; break; case 4: data = 0b00001111; break; case 5: data = 0b00011111; break; case 6: data = 0b00111111; break; case 7: data = 0b01111111; break; case 8: data = 0b11111111; break; } RCLK_SetLow(); // Select/Latch the shift register (Active low) SPI1_WriteByte(data); //Send a Byte to Slave __delay_ms(0.05); //delay for data transition to finish RCLK_SetHigh(); // Deselect/Unlatch the shift register __delay_ms(500); //delay } } Click the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .)\nTips:\nDo you notice any difference between using decimal, hexadecimal, and binary systems?\nWhat advantages of different numeral systems and using SPI serial communication protocol did you notice from the above 3 exercises?\nCan those be implemented in your current and future projects?\nTutorial written by Qinchen (Sam) Zha\n","permalink":"https://embedded-systems-design.github.io/spi-shift-register-tutorial/","tags":["spi"],"title":"SPI \u0026 Shift Register Tutorial"},{"categories":null,"contents":"Stepper Motor Selection There are four variables to consider when selecting a stepper motor\nLoad requirements for the project Voltage and current needs Right size Polarity Type Stepper motors should be used over DC motors when torque is needed at low speeds or precise motor input is needed. Stepper motors use 40 or more poles in its rotation of 360 degrees. This means each pole can relate to 9 degrees (example of 40 pole stepper) and using code the stepper motor can be called to rotate to an exact position. Project load for the stepper should not exceed the steppers max torque specs. A safety margin should be included in this evaluation.\nStepper motors have specific power requirements. Supplying a voltage that is too low for a stepper will impact its performance. Supplying a voltage that is too high will damage the stepper and even the microcontroller. Current should be supplied within the steppers specified rating. Stepper motors are rated per phase, so the current per phase needs to be multiplied by 2 to meet the current demands.\nWiring a Stepper Motor 4 Wire Stepper\n6 Wire Stepper\nSimilar to 4 wire stepper. Add tap placed between either end of each phase. (Only some motors) Motors that do not require center taps can be wired like a 4 wire stepper.\nWhat to do when Stepper has no Torque If a stepper motor keeps stalling or has lower torque than expected there could be a problem with the initial setup of the motor. Below lists a few things toi check if a stepper isnt working as intended.\nWiring Issue Wrong voltage supplied Profile of motion defined wrong (pole calculations ","permalink":"https://embedded-systems-design.github.io/stepper-motor-selection-and-control/","tags":["circuit-design","motors"],"title":"Stepper Motor Selection and Control"},{"categories":null,"contents":"In the hopes that it will help anyone that is still working on the PCB, here is a list of the steps needed for this homework assignment with the corresponding blog posts and some of my comments. I also added some links at the bottom for specific errors I have seen mentioned so far. Please comment if there are any parts of the process that you would like more details on and I will try to add to this post.\n1. Create footprints for ALL components Cadence will not automatically add footprints for any components, including default ones. It is usually easiest just to create them yourself. I would recommend using the symbol wizard as detailed here: Creating PCB Footprint using Package Designer in Cadence\nWhen creating the drawing, click \u0026quot;Browse...\u0026quot; and make sure it is saving to the symbols folder that you set up. For the drawing name, it is a good idea to use the part number for your component. Make a note of the names you use because you will need them in part 2.\nFor package type, choose:\nDIP (Dual inline package) for ICs with two rows of pins SIP (Single inline package) for connectors, headers, or anything else with a single row of pins TH Discrete (Through-hole discrete) for resistors and capacitors For the reference designator prefix, choose:\nU for ICs R for resistors C for capacitors J for jumpers/connectors For size, use the figure on the left as a reference for what the different measurements are. You can get these values by looking at the component datasheet or by manually measuring the component. Remember that the units default to mils, which are 1/1000 of an inch. The holes on a breadboard are 100 mils apart, so you can also use that as a reference for size.\nFor the padstack, a 65 mil circle with a 35 mil drill is a good default choice (it is in the list as pad65cir35d). For some components with larger leads (such as voltage regulators or terminal blocks) you will need to choose a slightly larger pad. You can check the size for leads by looking at a component\u0026rsquo;s datasheet. If it is close to or larger than 35 mil, choose a different pad with a drill size that is slightly larger than the leads (pad70cir45d, pad75cir51d, etc.).\n2. Link the footprints to the components and export a netlist Follow the steps detailed here: Transferring Cadence Schematic to PCB Editor. For step 3-d, enter the names of the components you created above in the row labeled \u0026quot;PCB Footprint\u0026quot;. It may be helpful to watch the video walkthrough in addition to reading the post. If your settings in the netlist window match the screenshot, the PCB editor will automatically open when you click ok.\n3. Place components Begin placing components as shown in step one of this post: placing-and-moving-components-in-cadence-pcb-editor\nAdd all of the components by either clicking where you want them or by following the instructions in the remainder of the post for using exact coordinates. While placing parts, consider how to arrange them to minimize the complexity of the traces you need to run.\n4. Run traces Manual Routing in Cadence PCB Editor\nFor line width, something around 30-40 mils should work for most of the boards in this class. This number affects how much current the trace can carry. Remember that right-clicking and selecting \u0026ldquo;oops\u0026rdquo; will undo your last action.\n5. Making adjustments These buttons in the top left control what you can select and edit. They are useful if you want to adjust component placement or traces without accidentally selecting other components.\n6. Create a board outline creating-a-board-outline-in-cadence-pcb-editor\nYou can also select draw rectangle and click two corner points rather than entering a width and height.\n7. Add ground plane creating-a-ground-plane-in-cadence-pcb-editor\nThis may not be necessary for your board, but it is a good practice.\nVideo walkthrough of process:\nhttps://www.youtube.com/watch?v=tRAkY6g5NWk\nFor search path errors, see:\nhttps://www.youtube.com/watch?v=QyfyskwCqGA changing-the-library-search-path-in-cadence-design-entry-cis changing-the-library-search-path-in-cadence-pcb-editor For licensing issues:\nIf the PCB editor will not open due to a licensing error, make sure that you have the AnyConnect VPN running. Instructions for installing this can be found here: https://myapps.asu.edu/app/cisco-ssl-vpn-pc-46x. This applies whether you are on campus or off campus.\nResources for errors:\nWARNING: Net has fewer than two connections \u0026ndash; https://piazza.com/class/jkvd67zs28o4t2?cid=78 ERROR: Property \u0026ldquo;PCB Footprint\u0026rdquo; missing from instance \u0026ndash; https://piazza.com/class/jkvd67zs28o4t2?cid=77, #1 above Components not showing up on placement \u0026ndash; https://piazza.com/class/jkvd67zs28o4t2?cid=64 \u0026ldquo;Pick is outside the extent of the drawing \u0026hellip; pick again\u0026rdquo; \u0026ndash; https://piazza.com/class/jkvd67zs28o4t2?cid=80 ","permalink":"https://embedded-systems-design.github.io/pcb-tutorial-notes/","tags":null,"title":"Steps and additional notes for Board Layout"},{"categories":null,"contents":" Why use 0 ohm Resistors in a design? 0 ohm resistors act as a through hole jumper wire on manufactured PCBs. Also known as \u0026ldquo;jumper chips\u0026rsquo;\u0026rsquo; or\u0026quot;jumper leads\u0026rdquo;, 0 ohm resistors can be substituted for vias to cross over line traces. This is useful for PCBs that have many vias already and PCBs that want to avoid vias altogether. In the PCB industry, using 0 ohm resistors over jumper wires in the design process allows one less specialized tool when assembling the PCB. It is cheaper and more practical to install a jump lead using readily available resistor placing machines over having a separate machine for just placing jumper wires. Should you use this when manufacturing PCBs? Using 0 ohm resistors is practical in the course due to milling limitations of Peralta labs and use in some complex designs. Peralta labs ( the lab that prints PCB\u0026rsquo;s for EGR 304 and 314) has specific instructions and limitations when it comes to manufacturing a PCB. A complex PCBs made in peralta with many vias and line traces has a higher chance of having a manufacturing error. Also, when many vias are already in place, a new trace might have multiple vias to reach its destination on the board. Depending on the design it could be more beneficial to use a 0 ohm resistor to avoid high line trace areas.\nNote: Through hole components may not fit EGR 314\u0026rsquo;s project requirements. Please check with teaching team if 0 ohm jumper resistor is applicable for EGR 314. Based on a post written by Zachary Conley\n","permalink":"https://embedded-systems-design.github.io/strategies-for-using-0-ohm-resistors/","tags":["components","circuits"],"title":"Strategies for using 0 Ohm Resistors"},{"categories":null,"contents":" Special thanks to Travis Kelley\n","permalink":"https://embedded-systems-design.github.io/surface-mount-soldering/","tags":["soldering","tutorial","surface-mount"],"title":"Surface Mount Soldering Tutorial"},{"categories":null,"contents":"What microcontrollers does Texas Instruments specialize in? Texas Instruments (TI) specializes in low-power, performance, and wireless microcontrollers.\nHow do I choose a TI microcontroller? TI Parametric Selection Tool from TI What software do I need to install to program a TI microcontroller? Code Composer Studio (CCS) Integrated Development Environment (IDE) from TI\nCode Composer Forum from TI What hardware do I need to program a TI microcontroller? Check the manufacturer\u0026rsquo;s web page for the specific microcontroller you are using for specific information on the hardware you need to program it.\nWhat do I need to consider when designing a printed circuit board (PCB) that includes a TI microcontroller? See the microcontroller data sheet for information on PCB layout and external component considerations.\nHow do I use Code Composer Studio? Code Composer Studio v6 Quick Tips from Code Composer What online forums focus on TI microcontrollers? MSP Low-Power Microcontroller Forum from TI Where do I find code examples for TI microcontrollers? TI website ","permalink":"https://embedded-systems-design.github.io/texas-instruments-microcontrollers/","tags":["microcontroller","texas instruments"],"title":"Texas Instruments Microcontrollers"},{"categories":null,"contents":"Are Connections Continuous? Conduct a continuity check on your board with a multimeter.\nAs soon as you receive you PCB, the first thing you should always do is double check that all traces and pins that should be connected are, and those that should not be, aren\u0026rsquo;t. Conducting a quick continuity test on your board not only take you about 5 minutes to do but could save you hours of trouble in the long run when you already have half your board populated and no idea where to start when a problem does arise. At least by checking the board first, you can eliminate the possibility of a manufacturing or trace drawing error from your list of reason why something does not work.\nA picture containing text, device Description automatically generated Check all your soldering points for continuity between the board and the pin.\nFor many, this may be the first time you do some serious soldering. Soldering, while an easy concept to grasp, can be hard than it looks if not done properly. If you take your multimeter to your board and touch the pin of your already soldered component and the pad (on the backside if a through hole) or the trace the component is directly connected to and find there is no continuity, you are most likely just need to solder your pin again. Try to place some flux from a pen or as a paste onto your board before soldering and notice how much easier the solder will stick to the pad.\nHowever, be sure to also look for possible shorts! Shorts look like the photo shown below and can happen all the time between pins and pads that are very close to each other. Sometimes our hands are a little shaky or we did not remove enough solder form on old connection that needed to be changed. For or information about how to better your soldering skills, check out this article on the blog.\nDiagram Description automatically generated Are Traces Correctly Routed and Pads Sticking? Jump incorrect traces or fallen pads to test points or another trace.\nSometimes we design our PCB\u0026rsquo;s and notice after they are manufactured that some traces are incorrect or not continuous where we need them to be. Have no fear! You don\u0026rsquo;t need a new board if a few traces are off, you can simply jump traces to where they need to be by soldering a wire between a pad to another test point or to the trace that you need to connect. This process can seem very messy, when in all honesty it\u0026rsquo;s bound to happen and is normal in many hardware projects. Here are some ideas you can consider when jumping or rerouting traces:\nExpose some of the copper on a trace by using an exacto-knife to gently scratch off some of the solder mask to prep a new connection or disconnect traces completely.\nA picture containing circuit, electronics Description automatically generated Use wires or a part of a wire to jump connections.\nA close-up of a machine Description automatically generated with low confidence Use wires to jump pins to their correct trace or missing pad to a test point.\nA picture containing electronics, circuit Description automatically generated Close-up of a circuit board Description automatically generated with medium confidence Is Your Pin Layout Correct? Compare your PCB Designer pin layout versus the datasheet\u0026rsquo;s pinout.\nOne of the most seen problems every year in 304/314 is that students assume all voltage regulators have the same pin layout as each other. Students will create a 5V regulator part in Cadence and then use the same layout, make a copy, and name it a 3.3V regulator. Without checking the datasheet. Don\u0026rsquo;t be this student!\nLots of students use the LM7805 and LD1117 which are 5V and 3.3V regulators respectively. However, if you look at their pinout\u0026rsquo;s, they are different:\nLM7805 5V Pin Layout LD1117 3.3V Pin Layout If you are in this situation like this with regulators or any other part, there are a few simple ways to fix this.\nOne option is to physically move the pins of the regulator to go through the proper holes made on the PCB. An example of this is shown below with a through-hole MOSFET:\nThe second option is to alter your PCB board by cutting and re-routing traces as mentioned earlier. It\u0026rsquo;s recommended you try the first option and then purse this option next if it\u0026rsquo;s absolutely not possible to move the pin of a part around.\nTry using a brand new copy of your component.\nIf you compare your PCB Design against the datasheets of your components and find all traces and pin layouts are correct, try switching out the part for a brand new one from the bag. This is the importance of order multiple copies of your parts. It is possible to burn out the chip by touching the soldering iron to the pins of a part at too high of a heat or too often. Sometimes if a part is from an untrusted manufacturer such as an Amazon order, parts may come faulty as well. On this note however, you should never order parts from a website or company that does not come with a datasheet or is not approved by the teaching staff beforehand.\n","permalink":"https://embedded-systems-design.github.io/pcb-degugging-tips-and-solutions/","tags":["debugging"],"title":"The First Three Questions You Should Ask When Debugging Your PCB and Possible Solutions"},{"categories":null,"contents":"Check this link\n","permalink":"https://embedded-systems-design.github.io/trace-width-calculator/","tags":null,"title":"Trace Width Calculator"},{"categories":null,"contents":"Introduction In order to create a PCB, you must first prepare the schematic and check for errors, export a netlist of the schematic, import the netlist into PCB editor, and design the PCB. A netlist is a file that describes interconnections among components in a circuit. This tutorial describes the process of transferring a schematic to PCB Editor. It is assumed that you have a completed schematic (see example, Figure 1) before trying to migrate to PCB Editor.\nFigure 1: Example schematic ready for transfer to PCB Editor Video Walkthroughs Cadence: Part 3 Netlist Export\nCreating a PCB in Cadence PCB Editor\nCreate Custom Footprints All schematic symbols need a footprint. If you created any custom schematic symbols, you likely need to create a custom footprint for each one. For most ICs, you can use the Package Designer application to make custom footprints. For all other components, you can make custom footprints manually.\nOpen Project and Set Root Design In Windows, open your project in the Design Entry CIS program.\nFor complex designs (see example, Figure 2), you may have multiple folders with multiple schematic sheets in each folder in the project explorer. Right-click on the folder you want to prepare for transfer to PCB Editor and choose \u0026ldquo;Make Root\u0026rdquo;. This will set Cadence to generate a netlist only for the schematics inside the root folder (which will have a / through the folder symbol). This feature can be useful when your team is working on multiple break-out boards simultaneously before integrating them into one full design.\nFigure 2: Example folder hierarchy for complex schematic Assign Footprints to Components Open the schematic and select all components on the page by choosing \u0026ldquo;Edit \u0026gt; Select All\u0026rdquo;. Right-click and choose \u0026ldquo;Edit Properties\u0026hellip;\u0026rdquo; (see Figure 3) to batch-edit the footprint information. The batch component property editing window will appear (see Figure 4). Click the Parts tab to show the parts in the schematic. Click the \u0026ldquo;Pivot\u0026rdquo; button to see the part information vertically instead of horizontally.\nFigure 3: \u0026amp;ldquo;Edit Properties\u0026amp;hellip;\u0026amp;rdquo; menu option Figure 4: Batch component property editing window Enter footprint names (built-in or custom) for each component. For more information on finding the names of built-in footprints, see Finding Existing PCB Footprints for Cadence PCB Editor. Repeat until all components have footprints.\nRun Design Rules Check In the project explorer window, left-click on your schematic (see Figure 7) and choose \u0026ldquo;PCB menu \u0026gt; Design Rules Check\u0026rdquo; (see Figure 8). *(If the Design Rules Check option is dimmed, then you have selected the wrong icon in the project explorer window). *Figure 8 shows the Design Rules Check window. Leave the default options selected and click OK to continue.\nFigure 7: Schematic icon selected Figure 8: Design Rules Check\u0026amp;hellip; menu Figure 9: Design Rules Check window From there, you will be prompted with the DRC main screen in Figure 9. Keep everything as it is on the main screen and be sure to checkmark all of the boxes in the \u0026ldquo;Rules Setup\u0026rdquo; and \u0026ldquo;Report Setup\u0026rdquo; (see Figures 10 and 11). Doing this will ensure the DRC will check for many possible errors on the schematic. Once you have checked all of the boxes, click \u0026ldquo;Run\u0026rdquo;.\nFigure 10: Design Rules Check \u0026amp;gt; Rules Setup pane Figure 11: Design Rules Check \u0026amp;gt; Report Setup pane After you press \u0026ldquo;Run\u0026rdquo;, several alerts will appear. The first will be to notify you that once you proceed with the DRC, all actions already made cannot be undone (see Figure 12). Click \u0026ldquo;Yes\u0026rdquo;. The second will ask to save all the changes made since the last save (see Figure 13). Click \u0026ldquo;OK\u0026rdquo;.\nFigure 12: Undo Warning alert Figure 13: Save changes alert In the command window, you will see a list of warnings or errors that the DRC has found. If the \u0026ldquo;DRCs\u0026rdquo; window is blank, you are ready to move on and create your PCB design. If not and an error is listed (see example, Figure 14), go back to your schematic and fix the errors. If you see warnings, read each one and consider making the recommended changes before continuing. DO NOT SKIP THIS STEP. Fix any errors identified by the Design Rules Check and repeat steps (f) - (i) until all errors are gone (or determined not to be real problems).\nFigure 14: DRCs error listing Create a Netlist In the project explorer window, left-click on your schematic and choose \u0026ldquo;Tools \u0026gt; Create Netlist\u0026hellip;\u0026rdquo; (see Figure 15). *(If the Create Netlist option is dimmed, then you have selected the wrong icon in the project explorer window). *Figure 16 shows the Create Netlist window. Set the checkboxes as shown below (file names and paths will be specific to your design) and click OK to generate a netlist as shown in Figure 16. The setlist will appear in the folder you save it to. You do not need to open the file after creating it.\nFigure 15: Tools \u0026amp;gt; Create Netlist\u0026amp;hellip; menu Figure 16: Create Netlist dialog box Create/Update a Printed Circuit Board (PCB) In the Project Explorer window, left-click on your schematic and choose \u0026ldquo;PCB menu \u0026gt; New Layout\u0026rdquo;. (If the New Layout option is dimmed, then you have selected the wrong icon in the Project Explorer window). Figure 17 shows the New Layout window. Select the folder path where you would like yo create your new PCB design next to the \u0026ldquo;Board\u0026rdquo; path and click OK (see Figure 18). To update a PCB design you have already made, select the path where your current board is saved for \u0026ldquo;Input Board File\u0026rdquo; as well as for \u0026ldquo;Board\u0026rdquo;, and click OK (see Figure 19). Once you have clicked OK, the Allegro PCB Editor will automatically open. See the Cadence PCB Tutorials page for more information on creating a PCB. Figure 17: PCB \u0026amp;gt; New Layout menu Figure 18: New Layout window configured to create a new PCB design Figure 19: New Layout window configured to update an existing PCB design Common Errors Schematic Updated after PCB is Routed It\u0026rsquo;s not uncommon for an error to be discovered in the schematic after the PCB has already been routed. Rework of routing can be fixed as follows:\nFix the errors in the schematic In the project explorer window, left-click on your schematic (see Figure 7) and choose \u0026ldquo;Tools \u0026gt; Create Netlist\u0026hellip;\u0026quot;. *(If the Create Netlist option is dimmed, then you have selected the wrong icon in the project explorer window). *Figure 9 shows the Create Netlist window. Set the checkboxes as shown above (file names and paths will be specific to your design), but this time set \u0026ldquo;Input Board File\u0026rdquo; to be your current routed PCB file and \u0026ldquo;Output Board File\u0026rdquo; to be a different name for the updated file. Click OK to generate a netlist and push the changes forward to PCB Editor. Duplicate Reference Designators Sometimes, making significant edits to a schematic can result in multiple components with the same reference designators (e.g., U1, U2, R1, R2). This can be fixed by renumbering all of the reference designators in a schematic.\nOpen the project in Design Entry CIS and select the *.dsn file in the project explorer. Choose \u0026ldquo;Tools \u0026gt; Annotate\u0026rdquo;, select \u0026ldquo;Reset part references to\u0026rdquo;?\u0026rdquo;\u0026quot;, and click OK (see Figure 10). Your schematic will now have ? marks for all reference designator numbers (e.g., U?, J?). Choose \u0026ldquo;Tools \u0026gt; Annotate\u0026rdquo; again, select \u0026ldquo;Incremental reference update\u0026rdquo;, and click OK (see Figure 10). This will replace all ? marks with numbers to create unique reference designators. Figure 10: Annotate window Additional Common Errors You changed your \u0026ldquo;nets\u0026rdquo; name but missed a trace somewhere You changed your \u0026ldquo;nets\u0026rdquo; name and connected two different nets together accidentally (e.g., Ground_Plane and Ground) Cadence couldn\u0026rsquo;t find your footprint, or no footprint was specified Missing a *.psm file for the *.dra file, or vice-versa Unconnected traces You used multiple ground symbols and connected them together incorrectly Forgetting to define your paths correctly for footprints to be findable Defining the footprint names for all parts. Based on a tutorial by Josh Carroll\n","permalink":"https://embedded-systems-design.github.io/transferring-a-cadence-schematic-to-pcb-editor/","tags":["cadence","pcb"],"title":"Transferring a Cadence schematic to PCB Editor"},{"categories":null,"contents":"What is a transistor? A transistor is a type of semiconductor device that can be used as both an amplifier or as an electronic switch.\nReference Practical Electronics for Inventors\nWhat are the different types of transistors? Bipolar Junction Transistor (BJT) come in both NPN and PNP forms\nInsulated Gate Bipolar Transistor MOSFETs come in many flavors, and all have both N-channel and P-channel forms\nUniJunction Transistors (UJT) Junction Field Effect Transistors (JFET) Depletion Mode MOSFET Enhancement Mode MOSFET Power MOSFET (HEXFET) What common situations might I need a transistor? How do I choose a transistor from the thousands of options? ","permalink":"https://embedded-systems-design.github.io/transistors/","tags":["circuit-design","transistors","bjt","mosfet"],"title":"Transistors"},{"categories":null,"contents":"What are Logical Operators? Say you are out grabbing lunch on behalf of a friend or a fellow student, and their lunch comes with a maximum of two sides for free. When you ask your friend about what sides they want, you may ask them one of the following 4 questions:\nDo you want an apple and bread? Do you want an apple or bread? Do you not want an apple and bread? Do you not want an apple or bread? Reading these questions outload, you would know that each question has 2 immediate and unique responses your friend could give:\nYes I want both, or no I do not want both. I want an apple, or I want a banana. I do, or do not want both the apple and bread. I do, or do not want an apple or bread. In programming the logic of \u0026ldquo;and\u0026rdquo;, \u0026ldquo;or\u0026rdquo;, and \u0026ldquo;not\u0026rdquo; related questions is the same as in real conversation. In Python, you can type these exact words when asking your computer to run through some logical thinking. In programs like C and Java however, the equivalent is \u0026amp;\u0026amp;, ||, and ! respectively. The syntax is straightforward, but the complexity of using logic operators in code comes with you as the programmer not knowing what questions and answers you need to have i.e. not knowing which logic operators you need to use.\nWhen to Use OR || Let\u0026rsquo;s say you designed a system with two buttons and one DC motor. You want to write a code so that if either one of the two buttons is pressed, and triggers a digital HIGH or 1, the motor will move. What we have here is the perfect example of an OR logic. If Button 1 OR Button 2 is HIGH, then the motor is HIGH. In pseudo code, we would have the following:\nint b1 = Pin 1 int b2 = Pin 2 int motor = Pin 3 main loop { if ( B1 || B2 == 1){ motor.HIGH; } } Notice in the pseudo code the use of \u0026ldquo;==\u0026rdquo; versus \u0026ldquo;=\u0026rdquo;. Remember from your previous programming class that these two symbols means two different things, when \u0026ldquo;==\u0026rdquo; is specific for logic operations, and \u0026ldquo;=\u0026rdquo; is equating a physical value to a data type.\nWhen to Use AND \u0026amp;\u0026amp; Let\u0026rsquo;s say this time you want to write a code so that if both one of the two buttons are pressed, then the motor will move. What we have here is the perfect example of an AND logic. If Button 1 AND Button 2 is HIGH, then the motor is HIGH. In pseudo code, we would have the following:\nmain loop { if ( B1 \u0026amp;\u0026amp; B2 == 1){ motor.HIGH; } } When to Use NOT ! Now let\u0026rsquo;s say you want to write a code so that if both of the two buttons are left unpressed, then the motor will move continuously. What we have here is the perfect example of the \u0026ldquo;!\u0026rdquo; logic. If Button 1 AND Button 2 is not HIGH, then the motor is HIGH. In pseudo code, we would have the following:\nmain loop { if ( !(B1 \u0026amp;\u0026amp; B2 == 1)){ motor.HIGH; } } What if you wanted to write a code so that if only one of the two buttons are left unpressed, then the motor will move continuously? Then we would have if Button 1 OR Button 2 is not HIGH, then the motor is HIGH. In pseudo code, we would have the following:\nmain loop { if ( ! (B1 || B2 == 1)){ motor.HIGH; } } Notice here how where the ! symbol is placed. It\u0026rsquo;s a typically adopted process in code to write a logic and then negate it as an easy what to tell the computer and other readers of your code that you are utilizing a NOT statement. Just know that if the NOT symbol was placed anywhere else, you would end up with a different output than you probably expected. With this said, be sure to write down your pseudo code and think very carefully about what you need.\n","permalink":"https://embedded-systems-design.github.io/types-of-logic-operators-and-how-to-use-them/","tags":["programming","logic"],"title":"Types of Logic Operators and How to Use Them"},{"categories":null,"contents":"UART PIC to Argon Tutorial Objectives Getting familiar with UART on both PIC and Particle platforms. In this tutorial, you will set up the PIC as a black box that will respond to various inputs from the Argon. Utilizing the USB serial bus on the Argon, we can verify the project at the end.\nResources Argon Serial Reference\nCuriosity Nano Product Page\nPuTTY\nProcedure Configure the PIC Device\nFirst you need to create a new project and set it up for your device and how you plan on programming it. For the Curiosity Nano, it will be a PIC16f18446 programmed with the XC8 compiler and the curiosity nano hardware tool.\nHopefully MCC opens automatically and brings you to the System Module page by default. If not, click the MCC button ( ) at the top to initialize it.\nFigure On the left side of the screen, find the Device Resources and select EUSART1 to add it to the project.\nMCC View For most applications, default settings should be fine. For convenience, I will move the RX and TX pins to RB6 and RB4 respectively.\nFigure Click Generate at the top left by Project Resources.\nFigure Open up the EUSART1.h header file under the project files. This will have all of the MCC generated functions that can be called to do whatever is needed.\nFigure You will want to make sure to call the initialize function first. As a general rule of thumb, you will want to check if RX is ready before you read data and check if TX is ready before you send data. For this tutorial, I will say that if the PIC receives the character â€˜a\u0026rsquo;, it will respond with a 1. If the PIC receives a â€˜b\u0026rsquo;, it will respond with a 2. For all other inputs, it will not respond. Take this as an opportunity to try to read some of the provided documentation and see if you can figure out a solution before continuing on.\nThis is the code that I created for this project:\nFigure Click the Hammer button ( ) to compile the project. If you see \u0026ldquo;Build Successful\u0026rdquo;, then you can flash the program to the microcontroller by clicking the Run main project button ( .)\nConfigure the Particle Device\nConfigure your Particle device to connect it to WIFI and connect to it through build.particle.io\nParticle follows the same language reference as arduino with one small difference. The Serial only applies to the usb port. Serial1 will do the same thing, but only applies to the RX and TX pins.\nThe particle device should be programmed to send out a character and see what response is received, printing both to a usb serial interface. Repeat this process to verify all parts of the PIC code.\nHere is the code that I created: It\u0026rsquo;s not great but it achieves the needed goals. Generally, delays should be avoided as they lock up the processor from doing other things for the duration.\nFigure This code can then be flashed to the Particle device using the Flash ( ) button.\nConnecting the Devices.\nPower should be connected to both the PIC and the Particle devices.\nRX and TX can be connected between the devices making sure to cross the connection. RX goes to TX and TX goes to RX. The transmit of one device will be received by the other.\nThe Particle device should be connected to a computer via USB.\nOpen a PuTTY terminal to the Serial port of the Particle device. You could also use the Serial Monitor of the Arduino IDE as both will do the same thing. Here you should be able to see the characters being printed by the Argon. After each â€˜a\u0026rsquo;, a 1 is received and after each â€˜b\u0026rsquo;, a 2 is received. This shows the devices are communicating properly.\nFigure Tutorial written by Mykol Reklaitis, March 2020\n","permalink":"https://embedded-systems-design.github.io/uart-pic-to-argon-tutorial/","tags":["uart"],"title":"UART PIC to Argon Tutorial"},{"categories":null,"contents":"Updating a Part in your Library Figure: Typical Schematic Sometimes its necessary to make small changes to your parts as you learn more about them or need to define them better in order to identify more design mistakes during the design process. But it\u0026rsquo;s difficult to know how to propagate these changes to a given schematic. Let\u0026rsquo;s say you have made a part but forgot to add a part outline, but you already connected it up in your schematic.\nSteps Go into the project explorer and navigate to the library in which your custom part is, and open it up.\nFigure 1 Make the necessary changes to your part and save using \u0026ldquo;ctrl+s\u0026rdquo; or by right clicking on the active tab and selecting \u0026ldquo;save\u0026rdquo;.\nFigure 2 Now you need to propagate your changes to your schematic. In the project explorer, go up to the affected schematic, expand until you find the design cache, identify the changed part, right click, and select \u0026ldquo;update cache\u0026rdquo;. Select yes to all the dialog boxes and go back to your schematic.\nFigure 3 Your schematic is now updated. Make sure you fix any connection problems if you updated pin names or numbers.\nFigure 4 ","permalink":"https://embedded-systems-design.github.io/updating-a-part-in-your-library/","tags":["ecad","cadence"],"title":"Updating a Part in your Library"},{"categories":null,"contents":"What are bitwise operators? Bitwise operators allow access to individual bits in a variable or register. A typical register or variable is at least 1 byte (8 bits) in size.\nWhat bitwise operators are available in C? \u0026amp;, |, ^, ~, \u0026laquo;, and \u0026raquo;\nWhere can I learn more about bitwise operators? See the Writing C Code for Microcontrollers with Bitwise Operators presentation from Dr. Jordan.\n","permalink":"https://embedded-systems-design.github.io/using-bitwise-operators-in-c/","tags":["programming"],"title":"Using Bitwise Operators in C"},{"categories":null,"contents":"GitHub is a programing organization tool that not only can store all your programs nicely but allow you to collaborate with others on the same \u0026ldquo;repository\u0026rdquo; (or 304/314 project folder in layman\u0026rsquo;s terms).\nIn this video, you will be walked through how to set up a GitHub repository for your team, how to set up individual branches for each team member, and how to utilize GitHub Desktop to easily contribute changes you make to a file on your computer through the app, and then online to the main branch. While the video works with an Arduino file and IDE, GitHub can also manage C/C++ files and work with the PSoC and MPLAB IDE\u0026rsquo;s as well. All that matters is that you are editing the files located in your local \u0026ldquo;GitHub\u0026rdquo; folder, which is linked to the GitHub Desktop app on it\u0026rsquo;s own. Editing files outside the GitHub folder linked to the desktop app cannot be pushed through the app to the online repository.\nAs mentioned in the video, GitHub can be a weird transition and hard to follow. Always reach out for help from the teaching staff if you need it, and feel free to YouTube videos on how to use GitHub. Good luck!\nTutorial Part 1\nTutorial Part 2\n","permalink":"https://embedded-systems-design.github.io/using-github-to-manage-project-files/","tags":["github"],"title":"Using GitHub to Manage Project Files"},{"categories":null,"contents":"You can use VCC (power) and GND (ground) symbols to connect power and ground instead of manually routing wires across your schematic. This is a common technique used by professional engineers to improve the readability of schematics.\nWith a schematic open Design Entry CIS, click on the Vxx or GND buttons in the toolbar at the top or right side of the screen (see Figure 1)\nFigure 1: Place power and ground symbol buttons in the toolbar Select the symbol you would like to use for your design and place it in your design (see Figure 2). You can rename power and ground symbols to assign them to a particular electrical net (e.g., +5V or +12V).\nFigure 2: \u0026#43;5V and GND symbols connected to a connector In order to connect multiple components to the same power rail, place the same power or ground symbol with the same net name on your schematic (see Figure 3). Symbols that have different net names will not be connected.\nFigure 3: Example of \u0026#43;5V and GND symbols connected to multiple components. In this example, pin 1 of J1 is electrically connected to Pin 6 of U2, and Pin 2 of CON2 is electrically connected to pin 21 of U2. Based on a tutorial written by Robert Goby and updated by Ryan Sparks (2020)\n","permalink":"https://embedded-systems-design.github.io/using-vcc-and-gnd-symbols/","tags":["cadence"],"title":"Using VCC and GND Symbols"},{"categories":null,"contents":"Version control (sometimes called source control) keeps track of changes to files over time. Multiple users can edit the same projects. Some platforms that support version control are GitHub, GitLab, BitBucket, and Google Drive.\nGit Git is an open source tool, but platforms like GitHub and GitLab integrate with git by hosting the repositories (project folders). Repositories can also be self-hosted and use git for management through other services. This post is structured GitHub, a popular platform for many developers. Keep in mind that other repository storage platforms have nuanced differences (e.g. GitHub UI drag and dropping existing files will track code changes, whereas GitLab UI drag and dropping existing files will assume the file is overwriting everything\u0026ndash;history included).\nWords to Know (in order of importance) Repository (aka repo) - a project folder that tracks changes in the subdirectories and files, a collection of files Commit - sometimes considered snapshots of edits made complete with time, a hash reference, message, and the edits themselves Pull - a command to retrieve the latest edits from the repository Push - a command to push the latest edits (packaged in a commit) to the repository README.md - a file that describes how to use the project, FAQ, and/or explains what the repository is about Branch - a development path, all paths branch from main Clone - a copy of a repository often including a link to the original repo (remote) and past commits .gitignore - a file that filters what files end up on GitHub (files like .c, .java, .md, etc.) and what don\u0026rsquo;t (e.g. compiled object files, secret keys, binary files) Merge Conflict - when edits are made at the same place (and time) and a conflict occurs Fork - a clone, but set up in a user\u0026rsquo;s profile linking back to the original repo Rebase - the process of combining (\u0026ldquo;replaying\u0026rdquo;) commit(s) into a new commit (often used when resolving merge conflicts) Stage - the action of preparing file(s) to be committed\nCommon commands git status get an update of what files have been changed or are untracked git add \u0026lt;filename, ., *\u0026gt; add changed files to stage a commit git commit -m “Commit message here” add a message to a commit git push push a staged commit to the central repository git pull retrieve the latest changes from the central repository git reset --hard HEAD reset all files to the last commit git checkout branchName / git switch branchName switch to a different development path git checkout -b newBranchName switch to a new development path (git branch newBranchName + git checkout newBranchName) A Normal Git Workflow (GitFlow) Clone or fork a repo git clone \u0026lt;repo name\u0026gt; Create a development branch git branch \u0026lt;new branch name\u0026gt; Switch to the development branch git checkout \u0026lt;new branch name\u0026gt; Edit file(s) Add file(s) to stage them for a commit git add \u0026lt;fileName\u0026gt; Write a message to explain the commit (aka commit message) git commit -m \u0026quot;put a short descriptive message about the changes here\u0026quot; Push the commit (message + prepared file(s)) to the development branch git push Switch to main branch git checkout main Pull recent changes to ensure the local branch instance is up to date git pull Make a Pull Request to merge the development branch into the main branch Go to GitHub to make a New Pull Request Confirm the pull request Click merge pull request If multiple users on a single repository, pull from the main branch into the development branch often git merge main to reduce merge conflicts Repeat from step 3. Pitfalls StackOverflow is great for fixing git things. However, git is an extremely powerful tool, and it is easy to wipe the entire edit history or cause irreversible change. With great power comes great responsibility. Never automatically follow instructions on fixing things in git without understanding what each command does. Edit history can be rewritten in git, but it may not be the rewrite needed. If comamnds are confusing, spend the time to figure it out, ask another git user, or try to find another way. Just don\u0026rsquo;t do everything the internet says and lose the whole project and be unable to get it back, that defeats the whole point of version control.\nPush to the development branch often/commit regularly. Not only to save changes but to ensure if others are on the branch they can pull each other\u0026rsquo;s changes and everyone can reduce their merge conflicts.\nResources Git Documentation\n","permalink":"https://embedded-systems-design.github.io/version-control-part-1/","tags":["version control","GitHub"],"title":"Version Control Part 1 -- What is Version Control?"},{"categories":null,"contents":"Setting up GitHub Create an account on GitHub by going to github.com and signing up. Once complete, click the profile circle on the top right. Most navigation items can be found through the pull down menu. Download a Git CLI, preferably (Git for Windows)[https://gitforwindows.org/], however, GitHub provides a CLI that is recently out of beta GitHub CLI.\nGit for Windows Agree to the license Don\u0026rsquo;t change what components are to be installed, click next Choose \u0026ldquo;override the default branch name for new repositories\u0026rdquo; and ensure that the initial branch name is \u0026ldquo;main\u0026rdquo;, click next Use bundled OpenSSH, click next Keep default git pull behavior and click next Only use Git Credential Manager Core and click next Do not select experimental options and click install The program is called Git Bash and can be accessed from File Explorer in any folder by right clicking and selecting \u0026ldquo;Git Bash here\u0026rdquo; If there are any additional options not specified here do not change the options just click next.\nCreate a personal access token Follow these steps\nSetting up the first repository Click the plus left of the profile menu and choose \u0026ldquo;New Repository.\u0026rdquo; When naming a repository the autochecker will reject repository names already in use by the account, special characters and spaces will be automatically turned into \u0026ldquo;-\u0026rdquo; and generally should be easy to remember and type. Though a description is optional, it is still recommended to add a short one sentence description or pitch about the project.\nUsers can have unlimited public and private repositories. Public means visible to all, private means only visible to members of the repository. If there are features of interest that require a GitHub paid plan, consider checking out the GitHub Education Student Package, which is free to all university students to have a Pro plan without needing to pay. As ASU students, additional verification will likely be needed and student validation requests are usually resolved in less than a week.\nSelect \u0026ldquo;Add a README.md\u0026rdquo; to instantiate (put a file in) the repo(sitory). Instructions to clone, build, and run projects, along with project descriptions, FAQ or other pertinent information can usually be found in the README.md. It is good practice to always have one at the top level of a repo.\nDo not select \u0026ldquo;Add .gitignore\u0026rdquo; as one is not need for this tutorial part. However, templates for specific languages exists. If another repo is created using a common language such as C or Java, consider including the .gitignore template to ensure object and binary files and folders are not pushed to the repo. Gitignore files remove \u0026ldquo;bloat\u0026rdquo; files from being committed as they are often binary files (unreadable by humans) or custom to the user (e.g. include paths such as C:/UserName/Documents/FolderName/ that are not usable by others).\nDo not select \u0026ldquo;Choose a license\u0026rdquo; but generally open source projects operate on different levels of licenses, which instruct what users of open source work can and can\u0026rsquo;t do with them. MIT Licenses and GNU Public Licenses are the most common licenses, however, both dictate different restrictions to the code. Research what license works best for custom projects that are public (and private) facing.\nSelect \u0026ldquo;Create repository\u0026rdquo; to be taken to the new repo with a README.md file in it.\nCloning a repo can be done multiple ways, this tutorial will only describe through zip and HTTPS.\nCloning via HTTPS Cloning via HTTPS will include a link back to the repo it came from and allow users to access past commit history. This is the preferred way of cloning repos unless SSH is necessary. GitHub used to require password verification, however, now it requires personal access tokens (PAT) which is more secure. To clone a repo, click the green button labelled \u0026ldquo;Code\u0026rdquo; to pull down the clone options. Ensure \u0026ldquo;HTTPS\u0026rdquo; is selected and click the clipboard icon to copy the URL. The URL can also be highlighted and copied.\nNavigate in Windows Explorer to find where to copy the repository to, in this case C:/UserName/Desktop. Right click in the folder in Windows Explorer and click \u0026ldquo;Git Bash here\u0026rdquo; In the terminal window that has appeared type git clone and paste the copied URL and hit enter. The command should look something like git clone https://github.com/username/repoName.git When first using the command line, terminal, or Git Bash to interact with GitHub, after the clone command is executed it will ask for a username, and then a PAT. If this has already been done, then it will not ask as the values may already be stored in cache through Git clients. Git for Windows and Git CLI will store these after the first use until it expires. Additional setup varies by the program.\nIn the Desktop folder there should now be a folder with the repo name. This is a local instance of the cloned repository.\nStarting with an empty repo When creating repo\u0026rsquo;s without a README.md, it is assumed there is an existing repo, or a repo will be created through the command line, terminal, or Git Bash. Follow the appropriate instructions depending on the context. Figure X shows a repo called tbd that was not initialized with a README.md and how to start a new repo from a local instance, link an existing repo, or link from another type of version control.\nDeleting a repo To delete a repo go to the repo, then settings, then scroll to the bottom of the options page. Deleting a repository requires the title and the account\u0026rsquo;s password to be entered to confirm the decision. Deleted repositories cannot be retrieved after deletion.\nPushing the first edits From the local instance on Desktop, create a new text file and name it \u0026ldquo;FirstFile.txt\u0026rdquo; and put \u0026ldquo;hello world\u0026rdquo; in the file. Normal git workflow (gitflow) involves making changes, staging the changes by adding the files, writing a descriptive message about the changes, and then pushing the bundled changes and message in a commit. Make sure a Git Bash window is open in this repository folder.\nTo see what files have been changed type git status into the Git Bash window. FirstFile.txt is not tracked yet due to it being a new file. To track the file git add FirstFile.txt Entering git status will now show the file is tracked and staged (or ready) to be committed. Open FirstFile.txt and add a new line and \u0026ldquo;another hello world\u0026rdquo; to it. Save and close the file. For every change that occurs after a file has been added, the file needs to be re-added or a commit will not include those changes. Commits do not need to include all changes. Do not add the file yet. To complete the commit of the creation of a new file and \u0026ldquo;hello world\u0026rdquo; (not \u0026ldquo;another hello world\u0026rdquo;) enter git commit -m \u0026quot;added new file and hello world message\u0026quot;. Commit messages should be short but descriptive such that another user or a future user can understand what edits occurred. To send the commit (the changes, the message) to GitHub where the repository is stored, enter git push. Commits don\u0026rsquo;t have to be sent and can be sent multiple at a time. However, it is not advised to not push commits once made, especially if there are other users on the repo. git status again to see that there are still changes that have not been committed. Repeat the process to commit the new changes. Run git status after to ensure that the working branch is clean or up to date meaning there are no new changes to commit. Pulling down changes GitHub has a decent UI, but it is best used for very quick fixes. Go back to the GitHub page for the repository created. The new file should now be visible. If not, refresh the page. Click \u0026ldquo;Add file\u0026rdquo; then \u0026ldquo;Create new file.\u0026rdquo;\nName the new file BrowserFile.txt because this file is being made through GitHub\u0026rsquo;s browser interface. Type \u0026ldquo;hello browser!\u0026rdquo; into the \u0026ldquo;Edit new file\u0026rdquo; window. Scroll to the bottom of the page to see \u0026ldquo;Commit new file\u0026rdquo; and give a short message in the smaller text field or leave it blank. Click \u0026ldquo;Commit new file.\u0026rdquo; If the field was left blank, \u0026ldquo;Create BrowserFile.txt\u0026rdquo; will be the commit message.\nGo back to Git Bash in the repository folder and type git pull. This will \u0026ldquo;pull\u0026rdquo; the new file down from the repo and the folder will now have the new file BrowserFile.txt This is how changes can be updated in local instances. This only works if recent changes are pushed to the repository on GitHub. Push and pull changes often to reduce merge conflicts, especially when working with multiple users.\nHandling Merge Conflicts Merge conflicts happen often when there is more than one editor in a repository editing the same files in the same locations. It can also happen if editing files through the web (e.g. on GitHub\u0026rsquo;s UI) and through a local desktop instance at the same locations. Normally, Git (and therefore GitHub etc.) automatically manage conflicts, however, sometimes it needs human input.\nAn example case might be merging a development branch into main. Merges can be done through terminal commands or through pull requests through GitHub\u0026rsquo;s UI. The following example assumes a user is using the command line (or terminal). Proper gitflow is that merge conflicts are handled on the feature branch (branch to be merged into main) and then merged into main after resolving the conflict. The following example has found a merge conflict trying to merge the branch mundo into the main branch. The merge is then aborted, and a new merge is started from main into the mundo branch. Once the conflict is resolved, mundo is finally merged into main.\nAttempting to merge mundo into main. This assumes that the user has checked out the main branch. (from main) git merge mundo (merge mundo into main) A merge conflict has been found! To cancel a merge run git merge --abort. Merges can be aborted in the middle of merge conflict resolutions (rebasing). First, checkout the mundo branch git checkout mundo then run git merge main. The following is what a merge conflict looks like in a file based on the most recent merge command: def hello \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD (aka current change aka changes from mundo) puts \u0026#39;hello mundo\u0026#39; ======= (aka incoming change aka changes from main) puts \u0026#39;hola world\u0026#39; \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; main In the above example, the changes in the main branch (\u0026lsquo;hola world\u0026rsquo;) conflict with the changes from the branch mundo (\u0026lsquo;hello mundo\u0026rsquo;). The changes in mundo are considered the \u0026ldquo;current change\u0026rdquo; or HEAD (think pointers), while the changes in main are considered the \u0026ldquo;incoming change\u0026rdquo; and both are separated by a series of \u0026lsquo;=\u0026rsquo; symbols. HEAD will always be preceded by a series of \u0026lsquo;\u0026lt;\u0026rsquo; while the conflict itself will be closed by a series of \u0026lsquo;\u0026gt;\u0026rsquo; and the branch name (main). Merge conflicts will always appear in the order of current change to incoming change. Sometimes, rather than removing one of the other, the code may need to be a combination of both sources, it is not always the most intuitive, and it is often recommended to use editors that can help manage conflicts, like Visual Studio Code (VSC).\nFor now, we want to keep the changes in mundo, so we need to remove all indicators of a merge conflict, namely, the lines including \u0026lsquo;\u0026lt;\u0026rsquo; and \u0026lsquo;\u0026gt;\u0026rsquo;.\ndef hello puts \u0026#39;hello mundo\u0026#39; Once all merge conflicts have been resolved (the lines indicated conflict exists have been removed) follow the process of committing changes from the start (add, add a message, push) and the conflict is complete. Now checkout the main branch, git merge mundo into main, and done!\nResources https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories\n","permalink":"https://embedded-systems-design.github.io/version-control-part-2/","tags":["version control","GitHub"],"title":"Version Control Part 2 -- GitHub and GitFlow Tutorial"},{"categories":null,"contents":"To use GitHub with PSoc code requires a very specific set up, this is mostly due to how PSoC creates and manages files.\nPSoC Creator has a default folder in Documents where project code is stored. Each workspace can host a number of projects. This tutorial commits the workspace, and therefore automatically includes all projects. Some PSoC users organizer their workspaces by keeping one workspace per microcontroller type.\nFirst, create a new workspace in PSoC Creator by selecting \u0026ldquo;New project\u0026rdquo; under the \u0026ldquo;File\u0026rdquo; tab, and selecting \u0026ldquo;workspace\u0026rdquo; when prompted with the radio buttons that appear. Use the default location (C:/Users/UserName/Documents/PSoC Creator/) and specify a name for the workspace\nNext, create a new project by using one of the existing template projects.\nPSoC Creator for now.\nSetting up the Repo and including a .gitignore Open the folder in which the workspace was saved (C:\\\\Users\\\\UserName\\\\Documents\\\\PSoC Creator\\\\WorkspaceName) in Windows Explorer.\nRight click within the folder and select \u0026ldquo;Git Bash here\u0026rdquo; to open a git terminal.\nTo initialize the workspace as a git repo, enter git init. Next, download the .gitignore and put the .gitignore file in the same folder.\nOn the GitHub UI, create a new repository, but do not initialize it with a README.md, .gitignore, license, or any other option. Just a name, such as PSoC Workspace. Click create repository.\nFollow the instructions that appear to push the local repository to the newly created repository on GitHub. Make sure to include the .gitignore. Instead of adding all the files manually, type git add ., this means to add all files in the directory. It is better practice to use purposeful selection of files (e.g. git add FolderName/* which adds all files in a folder, or git add FileName.fileExtension which adds a single file) to avoid accidentally adding files that are not caught by the .gitignore, or committing secrets (passwords, API tokens, etc.) that should never be publically available.\nPulling from the repo Other users can clone and pull changes, but must rebuild the project in order for it to work on their systems. The .gitignore omits all build files and pertinent workspace information that is custom to each user.\nEditing the .gitignore There is a very likely chance as the semester proceeds that the .gitignore will need to be modified for files in certain folders that are related to compilation and therefore (currently) not included. The following describes relevant symbols in .gitignores. The .gitignore file downloaded has notes on how to edit the file to include files after being ignored, or to identify specific files to be included.\nSymbols /# comments out the line /* is a wildcard. If placed in front of a folder or name, any number of alphanumerics can precede it. If placed at the end of a folder or name, any number of alphanumerics can follow after it / folder structures end with a forward slash even if on a Windows System ! means to include a file or folder after it has been excluded Further Explanation of the .gitignore edits If edits occur in the Generated_Source/ folder, to include specific files the .gitignore must be edited following the *Generated_Source/ line with the following: !*Generated_Source/FolderName/FileToInclude.* This may not be the only structure. The example listed refers to a custom USB_audio, thus, the added line looks like !*Generated_Source/PSoC4/USB_audio.*. This line indicates that all files in Generated Souree in PSoC4 that begin with USB_audio must not be ignored.\nIf other optional items such as datasheets are necessary to be commented then remove the preceding # from the line to uncomment it.\nCommit the changes to ensure they come into effect. Files that are present before a .gitignore is implemented (and they are marked to be ignored) will still be present in the repository and tracked. It is good practice to implement a .gitignore before development begins. To resolve this enter git rm -r --cached \u0026lt;To Be Ignored\u0026gt; where To Be Ignored refers to a file or folder structure (Folder/ to ignore a directory entirely Folder/* to ignore the folder\u0026rsquo;s contents) that needs to be removed. When you commit, the discrepancy should be resolved.\n","permalink":"https://embedded-systems-design.github.io/version-control-part-3/","tags":["version control","GitHub"],"title":"Version Control Part 3 -- Setting up for PSoC"},{"categories":null,"contents":"How do I choose a voltage regulator? There are three major types of voltage regulators that you will encounter in this program:\nLinear voltage regulator - burns off extra power in the form of heat Advantage: High current capacity Advantage: Low cost Disadvantage: Low precision Disadvantage: High dropout voltage (the voltage difference between the input and output) Low dropout voltage regulator - burns off extra power in the form of heat, but continues to regulate even when the input voltage is near the output voltage Advantage: Excellent for battery-powered applications Advantage: Higher precision Disadvantage: Lower current capacity Disadvantage: Higher cost Switching voltage regulator - generates as much power as is needed by the circuit, up to the maximum allowed by the regulator. Similar to Switching Power Supplies above Advantage: Highly energy efficient Disadvantage: High cost Disadvantage: External components (some difficult to find) may be necessary Disadvantage: Printed circuit board layout can be difficult DC-DC Converter - An Isolated power converter. (No electrical connection between input and output) Advantage: Can be used on sensitive equipment that need an isolated power supply Disadvantage: Requires more testing to guarantee isolation. Disadvantage: External components (some difficult to find) may be necessary Disadvantage: Noise due to PWM signal switching A highly detailed guide to linear and switching regulators is available here: http://www.ti.com/lit/an/snva558/snva558.pdf\nWhen should I use a DC-DC Converter? A DC-DC converter should be used when the following is needed:\nHigher efficiency (95% when compared to linear voltage regulator of 65%) Power that can be stepped up or stepped down A moderate - high max voltage output. ","permalink":"https://embedded-systems-design.github.io/voltage-regulators-vs-dc-dc-converters/","tags":["circuit-design","power-supplies"],"title":"Voltage Regulators VS DC-DC converters"},{"categories":null,"contents":"A Gantt Chart is a common project management tool that helps teams understand the phases of a project, deadlines, critical paths, and interdependencies between tasks. It is important to gain experience predicting how long tasks take in order to calibrate your time management.\nTime Management and Project Planning presentation by Drs. Grondin and Bekki What does a Gantt chart look like? Example 1 from prior semester Example 2 from prior semester What software can I use to make a Gantt Chart? Gantt Charts can be made with a variety of software programs. Here are several free options:\nMicrosoft Project - Available on MyApps (via Microsoft Imagine). This is the industry-standard project management tool (Windows) ProjectLibre is an open-source alternative to Microsoft Project (Windows, Mac OS X, Linux) RationalPlan Project Viewer is a Microsoft Project file viewer (Windows, Mac OS X, Linux) Gantt charts can also be made in Microsoft Excel, but will not meet the dependency requirements in Dr. Jordan\u0026rsquo;s assignment requirements. Gantter is a cloud-based collaborative Gantt chart tool Microsoft Visio is a general purpose graphical chart generation program with a nice Gantt chart template. It is available on myapps.asu.edu through Microsoft Imagine ","permalink":"https://embedded-systems-design.github.io/what-is-a-gantt-chart/","tags":["asu","software","project management"],"title":"What is a Gantt Chart?"},{"categories":null,"contents":"A printed circuit board (PCB) is a board made of both conducive and non-conductive materials onto which components can be soldered to create a circuit. The circuit connections are made via copper traces on the board. An example PCB is shown in Figure 1.\nFigure 1: Printed circuit board Dr. Jordan has created a Printed Circuit Board Overview describing the anatomy and fabrication of PCBs. Concepts and Terminology used in Printed Circuit Boards page from Electrosoft Engineering Anatomy of a PCB A PCB is made up of layers. Each layer represents a part of the manufacturing process (e.g., top and bottom copper layers, soldermask layer, silkscreen layer).\nOn the copper routing layers, components are soldered to copper footprints. A footprint is the physical layout on a PCB to which a component is soldered.\nEach footprint has individual pads to which parts of the component (e.g., pins) are soldered.\nHow are PCBs manufactured? In an industrial setting, PCBs are most commonly sent out to manufacturing houses that etch and return PCBs quickly but at very high cost. The following sites describe the PCB manufacturing process:\nBuilding a Printed Circuit Board from Advanced Circuits Manufacturing of Basic Printed Circuit Boards from Chapter 1.5 of Printed Circuit Boards by R. S. Khandpur. How do we manufacture PCBs at ASU? See the ASU PCB Fabrication Process blog entry.\n","permalink":"https://embedded-systems-design.github.io/what-is-a-printed-circuit-board/","tags":["pcb"],"title":"What is a printed circuit board?"},{"categories":null,"contents":"Cadence is an electronic computer-aided drafting (ECAD) program commonly used in industry for the design and simulation of electronic circuits and printed circuit boards. The following video by Casey Petersen describes the basics of Cadence:\nWhat are all of the different Cadence file extensions used for? Cadence Allegro file extensions and what they contain from Tharanthi What is the Cadence design and manufacturing process? The Cadence design flow (process) by which a PCB is created with Cadence is described fully in the Introduction to the PCB Design Flow by Example - Chapter 2 in Complete PCB Design Using OrCAD Capture and PCB Editor book by Kraig Mitzner. It is summarized in 4 steps:\nSchematic capture Design simulation (optional in the junior project classes) Printed circuit board layout Printed circuit board manufacturing ","permalink":"https://embedded-systems-design.github.io/what-is-cadence/","tags":["software","cadence","pcb"],"title":"What is Cadence?"},{"categories":null,"contents":"The Cypress Programmable System on a Chip (PSoC®) is a mixed-signal electronic hardware platform that integrates a microcontroller core, programmable analog signal processing blocks, programmable digital hardware blocks, and capacitive touch sensing. The following is a list of helpful resources for getting started with the PSoC®:\nWhat is PSoC? video from element14 Training on Demand videos from Cypress Cypress Developer Community Video Library (scroll to the bottom of the page and select the particular PSoC you are using to filter the videos) PSoC Developer forums (very useful when trying to solve problems) ","permalink":"https://embedded-systems-design.github.io/what-is-psoc/","tags":["cypress","microcontroller","example project","documentation","video"],"title":"What is PSoC?"},{"categories":null,"contents":"Working with Libraries - THIS IS A DUPLICATE TUTORIAL This tutorial details how to add and save a custom library.\nOpen an existing project or create a new project if you are starting from scratch\nGo to \u0026ldquo;file\u0026ndash;\u0026gt;new\u0026ndash;\u0026gt;library\u0026rdquo;. A new library will be created and added to your project.\nFigure 1 In the project explorer window, navigate to the newly created library, and right click on it to \u0026ldquo;save asâ€¦\u0026rdquo; Figure 2 Select the location you would like to save your parts library. This library can be used over and over in multiple projects, so the best place to store it is in one of your top level cadence folders.\nCreate a new part in the library by right clicking on it and selecting \u0026ldquo;new part\u0026rdquo;. A dialog will open that will allow you to define a new part and start designing it.\nFigure 3 ","permalink":"https://embedded-systems-design.github.io/working-with-libraries/","tags":null,"title":"Working with Libraries"},{"categories":null,"contents":"Menu \u0026amp; Icons File File Menu File \u0026ndash;\u0026gt; Open(ctrl+o): If the ESP32 is connected it permits you to open a file either on your computer or from the ESP32\u0026rsquo;s file space.\nLocal vs. Remote File System Selection File \u0026ndash;\u0026gt; Save(ctrl+s): Saves the file to the current destination\nFile \u0026ndash;\u0026gt; Save As(ctrl+shift+s): Permits you to save the file to a new destination, as well as to switch between saving to PC or ESP32\nRun Run Menu Run \u0026ndash;\u0026gt; Run current script(f5): This runs whatever code is in your current window. If the file is not saved, it will ask where to save it, but the code is executed through the shell rather than through the normal startup execution of the ESP32. You can save your code to your computer and run it on the ESP32 just by hitting f5, but then this means that once restarted, the ESP32 will not be able to run the code without running it again through Thonny. Run \u0026ndash;\u0026gt; Stop/Restart Backend: This will attempt to restart the shell, if for example you want to put the ESP32 in \u0026ldquo;interactive\u0026rdquo; mode after it was restarted and began to run its internal boot.py \u0026ndash;\u0026gt; main.py sequence. Shell / Python Interpreter Shell The shell is at the bottom, and permits you to interact directly with the ESP32. Type in a python command and it will run it and (usually) return a value.\nFor example:\nMicroPython v1.18 on 2022-01-17; ESP32 module with ESP32 Type \u0026#34;help()\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; a=1 \u0026gt;\u0026gt;\u0026gt; a 1 \u0026gt;\u0026gt;\u0026gt; Shortcuts Interrupted Code Execution Ctrl+C: This stops (interrupts) execution of your code, wherever it is. Python throws an exception and indicates where it was stopped. Files Files in python are called \u0026ldquo;modules\u0026rdquo;. To load a module you should use the import statement. The ESP32, however, also handles specific files as special cases:\nboot.py: If this file is present on the ESP32, it will be the first code to run after a hard reset main.py: If this file is present, it will be the second script that gets run automatically after a hard reset. It only runs once, so you have to implement a ``while``` loop if you want code to continue running. any other file: You must import that file in either boot.py or main.py if you want it to be loaded and run. For example, if you have a file called \u0026ldquo;my_program.py\u0026rdquo;, and want it to be run from \u0026ldquo;main.py\u0026rdquo;, open up \u0026ldquo;main.py\u0026rdquo; and add import my_program This will load and run the my_program.py module at that specific point in the code.\nupip Micropython has the capability to download and use packages from the internet. the upip module is responsible for this, and you can use it to download and install a number of useful external libraries. For example, assuming you have a working wifi connection established, you can type in the following to the shell\n\u0026gt;\u0026gt;\u0026gt; import upip \u0026gt;\u0026gt;\u0026gt; upip.install(\u0026#39;micropython-logging\u0026#39;) This has the effect of downloading the \u0026ldquo;micropython-logging\u0026rdquo; package from the pypi python repository to the \u0026ldquo;/lib/\u0026rdquo; folder.\nNot all pypi packages are compatible with micropython, and will throw an error if you attempt to install them. ESP32 Reset Button (EN): Use this button to restart the ESP32 Bootloader Button (Boot): This doesn\u0026rsquo;t seem to be necessary to program or work with micropython. It is most likely used for programming with other tools/languages/IDE\u0026rsquo;s to initiate \u0026ldquo;bootloader mode\u0026rdquo;. ","permalink":"https://embedded-systems-design.github.io/working-with-thonny/","tags":["esp32","python","micropython","thonny"],"title":"Working with Thonny"}]